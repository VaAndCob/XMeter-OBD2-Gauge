
8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   1
xmeter16.asm                                    

                       1	;Program X-Meter Version 1.0.6
                       2	;MCU    =   AT89S52
                       3	;X-TAL  =   22.118 MHz
                       4	;Ver 1.01 Date  25/11/2006 {turn off all warning lamp when switch to sleep mode}}
                       5	;Ver 1.02 Date  10/12/2006 {auto sleep and auto activate}
                       6	;Ver 1.03 Date  31/12/2006 {turn off all warning lamp when leave meter mode/DTC additional message/CLEAR MIL}
                       7	;Ver 1.04 Date  22/04/2007 {No. of DTC bug fixed, Read DTCs,HO2S voltage display bug fixed}
                       8	;Ver 1.05 Date 05/01/2013 {PID23 Fuel Rail Pressure Added, Auto Backlight added}
                       9	;Ver 1.06 Date 23/03/2013 {Mode 22 PID 1E1C Transmission Fluid Temp} 
                      10	;==============================================
                      11	;Pin Configuration
     0080=            12	LCDDATA		EQU	P0	;LCD data Line
                      13	;Port1
     0095=            14	MOSI		BIT	P1.5	;ISP Data Out
     0096=            15	MISO		BIT	P1.6	;ISP Data In
     0097=            16	SCK		BIT	P1.7	;ISP Clock
                      17	;Port 2
     00A0=            18	RW		BIT	P2.0	;LCD 0 = Read  1 = write
     00A1=            19	RS		BIT	P2.1	;LCD 0 = Instruction 1 = Data
     00A2=            20	EN		BIT	P2.2	;LCD clock High to Low 
     00A3=            21	BL		BIT	P2.3	;LCD Back Light 0 = On, 1 = OFF
     00A4=            22	BUZZER		BIT	P2.4	;Buzzer Bit 0= On, 1 = OFF
     00A5=            23	EEPSDA		BIT	P2.5	;EEprom Data Line
     00A6=            24	EEPSCL		BIT	P2.6	;EEprom Clock Line
     00A7=            25	EEPWP		BIT	P2.7	;EEprom write Protect 0 = Disable, 1= Write Protect
                      26	;now use bit P2.7 as Auto backlight input with LDR circuit
                      27	;Port3   P3.0 & P3.1 Reserved as Serial Port
     00B2=            28	BTNMENU	BIT	P3.2	;Menu button
     00B3=            29	BTNBL		BIT	P3.3	;Backlight toggle switch
     00B4=            30	BTNUP		BIT	P3.4	;UP button
     00B5=            31	BTNDN		BIT	P3.5	;Down button
     00B6=            32	LEDUP		BIT	P3.6	;Upper Warning  LED 0 = On, 1 = OFF		
     00B7=            33	LEDDN		BIT	P3.7	;Lower  Warning  LED 0 = On, 1 = OFF		
                      34	;Port1   Reserved as extentsion & ISP
                      35	;Internal Ram
     0008=            36	PID1		EQU	08h	;PID1 mode
     0009=            37	PID2		EQU	09h	;PID2 mode
     000A=            38	PIDTURN		EQU	0Ah	;check which PID will be sent to ELM
     000B=            39	WRADDL1	EQU	0Bh	;LCD write address for calculated value line1
     000C=            40	WRADDL2	EQU	0Ch	;LCD write address for calculated value line2
     000D=            41	B1		EQU	0Dh	;address for Byte1
     000E=            42	B2		EQU	0Eh	;address for Byte2
     000F=            43	RESULTLEN	EQU	0Fh	;keep length of result
     0010=            44	CONFIG		EQU	10h	;current config      
                      45	;bit3 = PID warning light (0-off,1-on) ,bit 2 = F/C mode(0=inst/1=avr) , bit1 =beep(0-off,1-on), bit0=backlight(0-off,1-on)
                      46	;bit4 = Auto sleep mode (0-off,1-on)
     0011=            47	TEMP1		EQU 	11h	;general ram use
     0012=            48	TEMP2		EQU	12h	;general ram use
     0013=            49	TEMP3		EQU	13h	;general ram use
     0014=            50	EEPERR   	EQU   	14h	;EEPROM I2C Error
     0015=            51	FCPTR		EQU	15h	;IRAM pointer for F/C 80h-FFh data logging
     0016=            52	LIMITCHK1	EQU	16h	;address for keep limit PID load from eeprom
     0017=            53	LIMITCHK2	EQU	17h	;address for keep limit PID load from eeprom
     0018=            54	SLEEPCNT	EQU	18h	;sleep mode counter
     0019=            55	AUTOBLSTAT	EQU	19h	;Hold Autobacklight status for checking
     0020=            56	BUFFER		EQU	20h	;Message Buffer
                      57	;Stack Pointer at 60h up to 7Fh
                      58	;Special Function Register

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   2
xmeter16.asm                                    

     00A6=            59	WDTRST		EQU	0A6h	;SFR address for Watchdog Timer Register
                      60	;EEPROM address assignment
     0000=            61	ECONFIG		EQU	00h	;Configuration same as CONFIG
     0001=            62	EPID1		EQU	01h
     0002=            63	EPID2		EQU	02h
                      64	;04h-4Fh  Reserved for Warning Lamp in each PID no.
                      65	
                      66	;PID04 CAL Engine Load ---%"	[90 = 0E5h]
                      67	;PID05 Coolant Temp: --- " 	[97 = 089h]
                      68	;PID06 S-T Fuel Trim1 --- %" 	[+/- 10 = 08Eh]
                      69	;PID07 L-T Fuel Trim1 --- %"	[+/- 10 = 08Eh]
                      70	;PID0A Fuel Pressure ---kPa"  	[ 250 = FAh]lowerlimit*
                      71	;PID0B MAN Air Press ---kPa"  	[101 = 65h]
                      72	;PID0C ENG Speed: ---- RPM " [6500 = 66h]
                      73	;PID0D VEH Speed: --- km/h " 	[160 = A0h]
                      74	;PID0E IGN ADV Timing: ---" 	[+/- 27.5 = FFh]
                      75	;PID0F Intake Air Temp --" 	[90c = 82h]
                      76	;PID10 Air Flow ---.- g/sec"	[50.0g/s = 14h]
                      77	;PID11 Throttle Pos: --- %  "	[80%  = CCh]
                      78	;PID14 Front HO2S Volt -.--" 	[0.21 V= 2Ah] lowerlimit*
                      79	;PID15 Rear  HO2S Volt -.--"	[0.21 V= 2Ah] lowerlimit*
                      80	;PID23 Rail Pressure ---MPa"      ((A*256)+B) /100
                      81	;PID2C Commanded EGR: --- %" [100% = FFh]
                      82	;PID2D EGR Error: --- %    "	[100% = FFh]
                      83	;PID2E CMD Evap Purge --- %"   [100% = FFh]	
                      84	;PID2F Fuel Level: --- %   "	[5%     =  0Ch] lower limit*
                      85	;PID33 Baro Pressure ---kPa"	[102 = 66h]
                      86	;PID3C CAT 1 Temp: ---.- "	[700c = 1Bh]
                      87	;PID3D CAT 2 Temp: ---.- "	[700c = 1Bh]
                      88	;PID42:PCM Voltage: --.-- V"	[11.0 = 2Bh] lowerlimit*
                      89	;PID43 ABS Engine Load ---%"	[90 = 0E5h]
                      90	;PID44 CMD EQV Ratio: -.--   "  [not sure = FFh]
                      91	;PID45 REL Throt Pos: --- %"	[90 = 0E5h]
                      92	;PID46 AMB Air Temp: --- "	[40 = 50h]
                      93	;TFT: DB "Trans Temp: ---.- " [100 = 64h]
                      94	
                      95	;*******************************************
                      96	;LCD Commands Write parameter   
                      97	;MOV A = parameter then CALL LCD_CMD_WR
     0001=            98	LCD_CLS		EQU	01
     0002=            99	LCD_HOME	EQU	02
     0004=           100	LCD_SETMODE	EQU	04    ;+I/D  S
                     101	;I/D  = 0 Cursor&DDRAM  Decrement  , I/D = 1 Cursor&DDRAM Increment
                     102	;S   = 0   Cursor Move as I/D, S =1  insert charactor
     0008=           103	LCD_SETVISIBLE	EQU	08    ;+ D C B
                     104	;D = 0 Off display ,D = 1 On display
                     105	;C = 0 Off Cur sor , C = 1 On cursor
                     106	;B = 0 Blink Off    ,  B = 1 Blink On
     0010=           107	LCD_SHIFT	EQU	16 ; + S/C  R/L  x  x
                     108	;S/C = 0 move cursor as R/L  1 position
                     109	;S/C = 1 move charactor as R/L 1 column on every line
                     110	;R/L = 0 Left direction, R/L = 1 Right direction
     0020=           111	LCD_SETFUNC	EQU	32; + DL  N  F  x  x
                     112	;DL = 0  4 bit mode , DL = 1  8 bit mode
                     113	;N = 0  1/8 Duty   ,N = 1 1/16 duty
                     114	;F = 0   5x7 dot,   F = 1  5x10 dot
     0040=           115	LCD_SETCGADDR	EQU	64 ; + address  upto 16 data
     0080=           116	LCD_SETDDADDR	EQU	128 ; + address
                     117	;Program Start Address  ================

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   3
xmeter16.asm                                    

     0000            118	ORG  	0000h  
                     119	;*****RESET START***************************
     0000            120	RES:
     0000 787F       121	MOV	  R0,#7FH           ;POWER UP CLEAR 61-7FH
     0002            122	RES1:    
     0002 7600       123	MOV	  @R0,#0
     0004 18         124	DEC	  R0
     0005 B800FA     125	CJNE	  R0,#00H,RES1	;Clear IRAM Adress 00h-7Fh = 0
     0008 75F000     126	MOV  	  B,#0              	;CLEAR SYSTEM FLAG
     000B 758180     127	MOV	  SP,#80h       	 ;SET STACK point to IRAM (not duplicate)
                     128	;Serial Port initialize
     000E 758780     129	MOV	PCON,#80H          	 ;1000000
     0011 758922     130	MOV  	TMOD,#22H        	 ;TIMER1 MODE2
     0014 758DFD     131	MOV    TH1,#0FDH  	  ;38400 bps
     0017 759852     132	MOV	SCON,#52H 	  ;SERIAL 8 BIT UART MODE
     001A D28E       133	SETB	TR1             	  ;TIMER1 ON
     001C C2AC       134	CLR	ES		;no interrupt
                     135	;Default  Internal RAM if EEPROM Error
     001E 750804     136	MOV	PID1,#04h	;default PID1
     0021 750911     137	MOV	PID2,#11h	;default PID2
     0024 750A01     138	MOV	PIDTURN,#01h	;set to PID1 current msg
     0027 751006     139	MOV	CONFIG,#00000110b	;beep on & backlight off , Instant F/C,Warning Lamp ON,auto sleep off
     002A 751579     140	MOV	FCPTR,#79h	;F/C pointer point to 79h
     002D 751824     141	MOV	SLEEPCNT,#24h	;Reset Sleep mode counter
                     142	;Initial Port
     0030 C2A0       143	CLR	P2
     0032 D2B0       144	SETB	P3
                     145	;MOV	P2,#00010000b	;clear port 2 for LCD  except buzzer to OFF
                     146	;MOV	P3,#0FFh		;Extend Port
                     147	;SETB	EEPWP		;EEPROM Write Protect enable (unused now)
     0034 C2A3       148	CLR	BL		;turn BL on
                     149	;addition here
                     150	;===========================
                     151	;Load CGRAM
     0036 7440       152	MOV	A,#LCD_SETCGADDR+0  ;set CDRAM address
     0038 120F2B     153	CALL	WRCMD
     003B 901595     154	MOV	DPTR,#CGUL
     003E 120ED3     155	CALL	WRSTR		;write 3 char in CGRAM  00
     0041 90159F     156	MOV	DPTR,#CGUM
     0044 120ED3     157	CALL	WRSTR		;write 3 char in CGRAM  01
     0047 9015A9     158	MOV	DPTR,#CGUR
     004A 120ED3     159	CALL	WRSTR		;write 3 char in CGRAM  02
     004D 9015B3     160	MOV	DPTR,#CGLL
     0050 120ED3     161	CALL	WRSTR		;write 3 char in CGRAM  03
     0053 9015BD     162	MOV	DPTR,#CGLM	
     0056 120ED3     163	CALL	WRSTR		;write 3 char in CGRAM  04
     0059 9015C7     164	MOV	DPTR,#CGLR
     005C 120ED3     165	CALL	WRSTR		;write 3 char in CGRAM  05h
                     166	;MOV	DPTR,#CGD	;Load D char
                     167	;CALL	WRSTR		;write D char in CGRAM  06h
                     168	;MOV	DPTR,#CGM	;Load 3 char
                     169	;CALL	WRSTR		;write 3 char in CGRAM  07h
     005F 90158B     170	MOV	DPTR,#CG3	;Load 3 char
     0062 120ED3     171	CALL	WRSTR		;write 3 char in CGRAM  06h
     0065 9015D1     172	MOV	DPTR,#CGX	;Load X Char
     0068 120ED3     173	CALL	WRSTR		;write X char in CGRAM 07h
                     174	
                     175	;add more here
                     176	;==================================

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   4
xmeter16.asm                                    

                     177	;LCD Initialize
     006B 7401       178	MOV	A,#LCD_CLS
     006D 120F2B     179	CALL	WRCMD
     0070 121067     180	CALL	DEL100m
     0073 7438       181	MOV	A,#LCD_SETFUNC+11000b 
     0075 120F2B     182	CALL	WRCMD
     0078 740C       183	MOV	A,#LCD_SETVISIBLE+100b      ; display on + nocursor + noblink
     007A 120F2B     184	CALL	WRCMD
     007D 7410       185	MOV	A,#LCD_SHIFT+0000b 
     007F 120F2B     186	CALL	WRCMD
     0082 7407       187	MOV	A,#LCD_SETMODE+11b	 ;Left scroll
     0084 120F2B     188	CALL	WRCMD
                     189	;==============================
                     190	;LCD display title
     0087 7480       191	MOV	A,#LCD_SETDDADDR+00 ;Line 1   OBDII X-METER V1
     0089 120F2B     192	CALL	WRCMD
     008C 90133E     193	MOV	DPTR,#TITLE1	;OBDII X-METER V1
     008F 120F01     194	CALL	WRSCR
     0092 74C0       195	MOV	A,#LCD_SETDDADDR+40h ;Line2
     0094 120F2B     196	CALL	WRCMD
     0097 901353     197	MOV	DPTR,#TITLE2	;---------------------------
     009A 120F01     198	CALL	WRSCR
                     199	;------------
     009D 7406       200	MOV	A,#LCD_SETMODE+10b 	;Normal Right Scroll
     009F 120F2B     201	CALL	WRCMD
                     202	;======= Set Limitted Value Mode
     00A2 20B269     203	JB	BTNMENU,UPGRADE	;by pass Limitted Value 
     00A5 121098     204	CALL	SOUND_BEEP
     00A8 7401       205	MOV	A,#LCD_CLS
     00AA 120F2B     206	CALL	WRCMD
     00AD 121067     207	CALL	DEL100m
     00B0 7480       208	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     00B2 120F2B     209	CALL	WRCMD
     00B5 901500     210	MOV	DPTR,#LIMITMSG	;Set limit message
     00B8 120ED3     211	CALL	WRSTR
     00BB 74C0       212	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     00BD 120F2B     213	CALL	WRCMD
     00C0 901542     214	MOV	DPTR,#UGFIRM2	;Waiting connection.
     00C3 120ED3     215	CALL	WRSTR
     00C6 740D       216	MOV	A,#LCD_SETVISIBLE+101b      ; display on + nocursor + blinking
     00C8 120F2B     217	CALL	WRCMD
     00CB C296       218	CLR	MISO		;set PIN checking to tell UPDATER xmeter is ready
     00CD C297       219	CLR          SCK                        	;set Low SCK for updater detect (X-Meter check Updater Start)
     00CF 20B303     220	JB	BTNBL,$+6	;toggle back light
     00D2 1210BE     221	CALL	BACKLIGHT
     00D5 3097F7     222	JNB       	SCK,$-6                       ;if SCK is set hi else back to Updater
     00D8 74C0       223	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     00DA 120F2B     224	CALL	WRCMD
     00DD 901557     225	MOV	DPTR,#UGFIRM3	;Now Loading...
     00E0 120ED3     226	CALL	WRSTR
                     227	;add eeprom writing code  here
     00E3 7801       228	MOV	R0,#01h		;start writing address (00h is reserved as CONFIG)
     00E5            229	LIMITREAD:
     00E5 7400       230	MOV	A,#00h
     00E7 7F08       231	MOV	R7,#08h
     00E9            232	READ8BIT:
     00E9 3097FD     233	JNB	SCK,$		;Wait CLK Hi
                     234	;read data 1 bit
     00EC A295       235	MOV    	C,MOSI

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   5
xmeter16.asm                                    

     00EE 33         236	RLC   	 A
     00EF D296       237	SETB	MISO		;tell Updater that 1 bit read
     00F1 2097FD     238	JB	SCK,$		;CLK Low end 1byte
     00F4 C296       239	CLR	MISO
     00F6 DFF1       240	DJNZ	R7,READ8BIT
                     241	;MOV	R0,address
     00F8 F9         242	MOV	R1,A
     00F9 1211C4     243	CALL	IPW		;write EEPROM 1 byte
     00FC 08         244	INC	R0		;next EEPROM address
     00FD B880E5     245	CJNE	R0,#080h,LIMITREAD;If address = 128 then exit
     0100 74C0       246	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     0102 120F2B     247	CALL	WRCMD
     0105 901516     248	MOV	DPTR,#LIMITFIN	;Setting complete...
     0108 120ED3     249	CALL	WRSTR
     010B 121098     250	CALL	SOUND_BEEP	;finish
                     251	;======= Firmware Upgrade Mode
     010E            252	UPGRADE:
     010E 20B443     253	JB	BTNUP,CHECKING		;by pass firmware upgrade
     0111 20B540     254	JB	BTNDN,CHECKING
     0114 121098     255	CALL	SOUND_BEEP
     0117 7401       256	MOV	A,#LCD_CLS
     0119 120F2B     257	CALL	WRCMD
     011C 121067     258	CALL	DEL100m
     011F 7480       259	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     0121 120F2B     260	CALL	WRCMD
     0124 90152C     261	MOV	DPTR,#UGFIRM1	;Upgrade Fimrware
     0127 120ED3     262	CALL	WRSTR
     012A 74C0       263	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     012C 120F2B     264	CALL	WRCMD
     012F 901542     265	MOV	DPTR,#UGFIRM2	;Waiting connection.
     0132 120ED3     266	CALL	WRSTR
     0135 740D       267	MOV	A,#LCD_SETVISIBLE+101b      ; display on + nocursor + blinking
     0137 120F2B     268	CALL	WRCMD
     013A C296       269	CLR	MISO		;set PIN checking for Upgrade firmwrae MISO (Updater Check X-Meter)
     013C C297       270	CLR          	SCK                        	;set Low SCK for updater detect (X-Meter check Updater Start)
     013E 20B303     271	JB	BTNBL,$+6	;toggle back light
     0141 1210BE     272	CALL	BACKLIGHT
     0144 3097F7     273	JNB       	SCK,$-6                       ;if SCK is set hi else back to Updater
     0147 74C0       274	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     0149 120F2B     275	CALL	WRCMD
     014C 901557     276	MOV	DPTR,#UGFIRM3	;Now Loading...
     014F 120ED3     277	CALL	WRSTR
     0152 80FE       278	JMP	$		;Loop forever tl finish Upgrade
                     279	;Checking system
     0154            280	CHECKING:
     0154 121056     281	CALL	DEL500m
     0157 121056     282	CALL	DEL500m
     015A 121056     283	CALL	DEL500m
     015D 121056     284	CALL	DEL500m
     0160 121056     285	CALL	DEL500m
     0163 121056     286	CALL	DEL500m
     0166 C2B6       287	CLR	LEDUP		;turn off LED
     0168 C2B7       288	CLR	LEDDN	
     016A 7401       289	MOV	A,#LCD_CLS	;clear screen once
     016C 120F2B     290	CALL	WRCMD
     016F 121067     291	CALL	DEL100m
                     292	;****************Check illegal firmware modified
     0172 1210A9     293	CALL	SOUND_TRIG
     0175 7480       294	MOV	A,#LCD_SETDDADDR+0 ;Line 1

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   6
xmeter16.asm                                    

     0177 120F2B     295	CALL	WRCMD
     017A 901368     296	MOV	DPTR,#TITLE3		  ;by Jerry@Thaimazda3  check illegal copy
     017D 120ED3     297	CALL	WRSTR
     0180 740D       298	MOV	A,#LCD_SETVISIBLE+101b      ; display on + nocursor + blinking
     0182 120F2B     299	CALL	WRCMD
                     300	;===============================
                     301	;ELM327 Initialize message
     0185 901316     302	MOV	DPTR,#SERINIT1
     0188 121029     303	CALL	SBLOCK
     018B 121067     304	CALL	DEL100m
     018E 90131C     305	MOV	DPTR,#SERINIT2
     0191 121029     306	CALL	SBLOCK
     0194 121067     307	CALL	DEL100m
     0197 901322     308	MOV	DPTR,#SERINIT3
     019A 121029     309	CALL	SBLOCK
     019D 121067     310	CALL	DEL100m
     01A0 901328     311	MOV	DPTR,#SERINIT4
     01A3 121029     312	CALL	SBLOCK
     01A6 121067     313	CALL	DEL100m
     01A9 901330     314	MOV	DPTR,#SERINIT5
     01AC 121029     315	CALL	SBLOCK
     01AF 121067     316	CALL	DEL100m
                     317	
                     318	;========= Check CAN connection =====================
     01B2            319	TRYCAN:			;OK and UNABLE TO CONNECT
     01B2 C298       320	CLR	RI		;clear SBUF interrupt
     01B4 74C0       321	MOV	A,#LCD_SETDDADDR+40h ;Line2
     01B6 120F2B     322	CALL	WRCMD
     01B9 901846     323	MOV	DPTR,#NODATA	;clear LCD line2
     01BC 120ED3     324	CALL	WRSTR
     01BF 74C0       325	MOV	A,#LCD_SETDDADDR+40h ;Line2
     01C1 120F2B     326	CALL	WRCMD
     01C4 901310     327	MOV	DPTR,#CHKCAN	;send 0100 to ELM327
     01C7 121029     328	CALL	SBLOCK
     01CA 743E       329	MOV	A,#3Eh		;send ">" first
     01CC            330	TRYCAN1:
     01CC 120F3A     331	CALL	WRCHAR		;write > to LCD & data receive by RBYTE
     01CF 121049     332	CALL	RBYTE		;Receive "SEARCHING...."
     01D2 B43403     333	CJNE	A,#34h,TRYCAN2	;If A = "4" then connection OK
     01D5 020200     334	JMP	CONNECT
     01D8            335	TRYCAN2:
     01D8 B40DF1     336	CJNE	A,#0Dh,TRYCAN1	;if A = CR wait 2 second  and try again
                     337	;add some thing here
     01DB 74C1       338	MOV	A,#LCD_SETDDADDR+41h 	;set address to line2+1
     01DD 120F2B     339	CALL	WRCMD
     01E0 0201E6     340	JMP	$+6		;jump CALL RBYTE
     01E3            341	TRYCAN3:
     01E3 120F3A     342	CALL	WRCHAR
     01E6 121049     343	CALL	RBYTE
     01E9 B40DF7     344	CJNE	A,#0Dh,TRYCAN3	;If A = "CR " then delay & retry again
     01EC 121056     345	CALL	DEL500m
     01EF 121056     346	CALL	DEL500m
     01F2 121056     347	CALL	DEL500m
     01F5 121056     348	CALL	DEL500m
     01F8 121056     349	CALL	DEL500m
     01FB 121056     350	CALL	DEL500m
     01FE 80B2       351	JMP	TRYCAN		;request again
     0200            352	CONNECT:
                     353	;loop to check > feed back

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   7
xmeter16.asm                                    

     0200 121049     354	CALL	RBYTE
     0203 B43EFA     355	CJNE	A,#3Eh,$-3	;ELM connected OK
     0206 740C       356	MOV	A,#LCD_SETVISIBLE+100b      ; display on + nocursor + noblink
     0208 120F2B     357	CALL	WRCMD
                     358	;==============Load setting from EEPROM=====================
     020B            359	LOADEEP:
     020B 7800       360	MOV	R0,#ECONFIG
     020D 121210     361	CALL	IPR		;read Back light & beep  status Result in R1
     0210 201426     362	JB	EEPERR,READERR;EEPROM error skip loading
     0213 8910       363	MOV	CONFIG,R1
     0215 E510       364	MOV	A,CONFIG		;check backlight
     0217 85E019     365	MOV	AUTOBLSTAT,ACC.0 ;keep auto back light status
                     366	;JB	ACC.0,$+5	;back light on then skip
                     367	;SETB	BL		;turn off
                     368	
     021A 7801       369	MOV	R0,#EPID1		;Read PID1 from eeprom
     021C 121210     370	CALL	IPR
     021F 8908       371	MOV	PID1,R1
                     372	
     0221 7802       373	MOV	R0,#EPID2		;Read PID2 from eeprom
     0223 121210     374	CALL	IPR
     0226 8909       375	MOV	PID2,R1
                     376	
     0228 A808       377	MOV	R0,PID1		;load limit pid from eeprom
     022A 121210     378	CALL	IPR		;Result in R1
     022D 8916       379	MOV	LIMITCHK1,R1	;keep in LIMITCHK1
     022F A809       380	MOV	R0,PID2		;load limit pid from eeprom
     0231 121210     381	CALL	IPR		;Result in R1
     0234 8917       382	MOV	LIMITCHK2,R1	;keep in LIMITCHK2
                     383	
                     384	;etc add here
     0236 02025F     385	JMP	METER		;Skip to METER (no error)
     0239            386	READERR:
     0239 E510       387	MOV	A,CONFIG
     023B C2E4       388	CLR	ACC.4
     023D F510       389	MOV	CONFIG,A		;turn off Warning Light mode
     023F 74C0       390	MOV	A,#LCD_SETDDADDR+40h 	;set address to line2
     0241 120F2B     391	CALL	WRCMD
     0244 90189E     392	MOV	DPTR,#RDERR	;Show EEprom error message
     0247 120ED3     393	CALL	WRSTR
     024A 121098     394	CALL	SOUND_BEEP
     024D 121056     395	CALL	DEL500m
     0250 121056     396	CALL	DEL500m
     0253 121056     397	CALL	DEL500m
     0256 121056     398	CALL	DEL500m
     0259 121056     399	CALL	DEL500m
     025C 121056     400	CALL	DEL500m
                     401	;===========================================================	
     025F            402	METER:
     025F 120CBB     403	CALL	LINE1		;first line PID display
     0262 120DC7     404	CALL	LINE2		;second line PID display
                     405	;send AT command
     0265 740D       406	MOV	A,#0Dh	
     0267 121041     407	CALL	SBYTE		;send CR to receive > and start receive data
                     408	;*************** MAIN LOOP **********************************
     026A            409	MAIN:			;Main Loop
                     410	;***** check PID mode and send command to ELM and show string to LCD
     026A E519       411	MOV	A,AUTOBLSTAT
     026C 30E009     412	JNB	ACC.0,$+12	;Auto BLoff thenskip

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   8
xmeter16.asm                                    

     026F 20A704     413	JB	EEPWP,$+7	;if LDR hi then jump
     0272 C2A3       414	CLR	BL		;turn on backlight
     0274 8002       415	SJMP	$+4
     0276 D2A3       416	SETB	BL		;turn off backlight
                     417	;---------------------------------------------
     0278 20B308     418	JB	BTNBL,$+11	;toggle back light
     027B 1210BE     419	CALL	BACKLIGHT
     027E 740D       420	MOV	A,#0Dh	
     0280 121041     421	CALL	SBYTE		;send CR to receive > and start receive data
                     422	
     0283 30B255     423	JNB	BTNMENU,SETUP0	;enter setup mode
     0286 209854     424	JB	RI,RECEIVE	;read back data from ELM
                     425	;***** PID mode change button check**********
     0289            426	MAIN3:
     0289 20B426     427	JB	BTNUP,MAIN2	;next mode Line1
     028C 1210A9     428	CALL	SOUND_TRIG
     028F 0508       429	INC	PID1		;add pid1+1
     0291 E508       430	MOV	A,PID1
     0293 12093F     431	CALL	SKIPPID		;skip unused PID mode
     0296 F508       432	MOV	PID1,A		;Return skipped PID mode
                     433	
     0298 A808       434	MOV	R0,PID1		;load limit pid from eeprom
     029A 121210     435	CALL	IPR		;Result in R1
     029D 8916       436	MOV	LIMITCHK1,R1	;keep in LIMITCHK1
                     437	
     029F 120CBB     438	CALL	LINE1
     02A2 121067     439	CALL	DEL100m	;keyboard delay
     02A5 121067     440	CALL	DEL100m	;keyboard delay
     02A8 121067     441	CALL	DEL100m	;keyboard delay
                     442	;addition
     02AB 740D       443	MOV	A,#0Dh		;send CR again 
     02AD 121041     444	CALL	SBYTE
     02B0 80B8       445	JMP	MAIN
                     446	;------------
     02B2            447	MAIN2:
     02B2 20B5B5     448	JB	BTNDN,MAIN	;next mode Line2
     02B5 1210A9     449	CALL	SOUND_TRIG
     02B8 0509       450	INC	PID2		;add pid1+1
     02BA E509       451	MOV	A,PID2
     02BC 12093F     452	CALL	SKIPPID		;skip unused PID mode
     02BF F509       453	MOV	PID2,A		;Return skipped PID mode
                     454	
     02C1 A809       455	MOV	R0,PID2		;load limit pid from eeprom
     02C3 121210     456	CALL	IPR		;Result in R1
     02C6 8917       457	MOV	LIMITCHK2,R1	;keep in LIMITCHK2
                     458	
     02C8 120DC7     459	CALL	LINE2		;Update LCD 
     02CB 121067     460	CALL	DEL100m	;keyboard delay
     02CE 121067     461	CALL	DEL100m	;keyboard delay
     02D1 121067     462	CALL	DEL100m	;keyboard delay
                     463	;adddition
     02D4 740D       464	MOV	A,#0Dh
     02D6 121041     465	CALL	SBYTE
     02D9 808F       466	JMP	MAIN
     02DB            467	SETUP0:
     02DB 6177       468	AJMP	SETUP
                     469	;=========END MAIN LOOP=================
     02DD            470	RECEIVE:
     02DD 121034     471	CALL	RBLOCK

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   9
xmeter16.asm                                    

     02E0 E50A       472	MOV	A,PIDTURN
     02E2 B40148     473	CJNE	A,#01h,PIDTURN2	;if PIDTURN<> 1 then goto PIDTURN2
                     474	;LCD LINE1**********************************
                     475	;CALL	LINE1		;Display PID mode in LINE1
     02E5 120F49     476	CALL	GETB1B2		;Translate ASCII in buffer to Hex Data and keep in B1,B2
     02E8 AA08       477	MOV	R2,PID1		;keep PID1 mode in R2 for CALCULATE
     02EA 12096F     478	CALL	CALCULATE	;Determine PID mode / calculate /translate to ASCII / keep in BUFFER/RESULTLEN
     02ED 1210CB     479	CALL	LIGHT1		;check warning lamp
                     480	;------Write Result to LCD lin1
     02F0 7480       481	MOV	A,#LCD_SETDDADDR 	;set address in LCD to write result in LINE1
     02F2 250B       482	ADD	A,WRADDL1		;add write address
     02F4 120F2B     483	CALL	WRCMD
     02F7 A90F       484	MOV	R1,RESULTLEN		;R1 = Length of result to display
     02F9 7820       485	MOV	R0,#BUFFER		;R0 point to buffer
     02FB            486	LENGTH1:
     02FB E6         487	MOV	A,@R0			;load char in A
     02FC 120F3A     488	CALL	WRCHAR
     02FF 08         489	INC	R0
     0300 D9F9       490	DJNZ	R1,LENGTH1		;loop til end of length
                     491	;check PID2 mode & send AT cmd to ELM
     0302 750A02     492	MOV	PIDTURN,#02h	;set  PIDTURN = 2
     0305 7430       493	MOV	A,#30h
     0307 121041     494	CALL	SBYTE	;send char0
     030A 7431       495	MOV	A,#31h
     030C 121041     496	CALL	SBYTE	;send char1
     030F E509       497	MOV	A,PID2	;keep pid2 in temp
     0311 C4         498	SWAP	A
     0312 540F       499	ANL	A,#0Fh
     0314 F9         500	MOV	R1,A
     0315 121019     501	CALL	HTOA
     0318 121041     502	CALL	SBYTE	;send higt byte
     031B E509       503	MOV	A,PID2	;keep pid2 in temp
     031D 540F       504	ANL	A,#0Fh
     031F F9         505	MOV	R1,A
     0320 121019     506	CALL	HTOA
     0323 121041     507	CALL	SBYTE	;send low byte
     0326 740D       508	MOV	A,#0Dh
     0328 121041     509	CALL	SBYTE	;send CR
     032B 4189       510	AJMP	MAIN3
                     511	;LINE2********************************************
     032D            512	PIDTURN2:
                     513	;CALL	LINE2		;Display PID mode in LINE2
     032D 120F49     514	CALL	GETB1B2		;Translate ASCII in buffer to Hex Data and keep in B1,B2
     0330 AA09       515	MOV	R2,PID2		;keep PID2 mode in R2 for CALCULATE
     0332 12096F     516	CALL	CALCULATE	;Determine PID mode / calculate /translate to ASCII / keep in BUFFER/RESULTLEN
     0335 121107     517	CALL	LIGHT2		;check warning lamp
                     518	;-------Write Result to LCD lin2
     0338 74C0       519	MOV	A,#LCD_SETDDADDR+40h 	;set address in LCD to write result in LINE2
     033A 250C       520	ADD	A,WRADDL2
     033C 120F2B     521	CALL	WRCMD
     033F A90F       522	MOV	R1,RESULTLEN		;R1 = Length of result to display
     0341 7820       523	MOV	R0,#BUFFER		;R0 point to buffer
     0343            524	LENGTH2:
     0343 E6         525	MOV	A,@R0			;load char in A
     0344 120F3A     526	CALL	WRCHAR
     0347 08         527	INC	R0
     0348 D9F9       528	DJNZ	R1,LENGTH2
                     529	;check PID2 mode & send AT cmd to ELM
     034A 750A01     530	MOV	PIDTURN,#01h	;set PIDTURN = 1

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  10
xmeter16.asm                                    

     034D 7430       531	MOV	A,#30h
     034F 121041     532	CALL	SBYTE	;send char0
     0352 7431       533	MOV	A,#31h
     0354 121041     534	CALL	SBYTE	;send char1
     0357 E508       535	MOV	A,PID1	;keep pid1 in temp
     0359 C4         536	SWAP	A
     035A 540F       537	ANL	A,#0Fh
     035C F9         538	MOV	R1,A
     035D 121019     539	CALL	HTOA
     0360 121041     540	CALL	SBYTE	;send higt byte
     0363 E508       541	MOV	A,PID1	;keep pid1 in temp
     0365 540F       542	ANL	A,#0Fh
     0367 F9         543	MOV	R1,A
     0368 121019     544	CALL	HTOA
     036B 121041     545	CALL	SBYTE	;send low byte
     036E 740D       546	MOV	A,#0Dh
     0370 121041     547	CALL	SBYTE	;send CR
     0373 4189       548	AJMP	MAIN3
                     549	;********************END of Program*****************************
     0375            550	CONSUMP0:
     0375 E1E9       551	AJMP	CONSUMP
                     552	
     0377            553	SETUP:     ; test setup menu
     0377 C2B6       554	CLR	LEDUP	;turn off LED
     0379 C2B7       555	CLR	LEDDN
     037B 121098     556	CALL	SOUND_BEEP
     037E 7C0A       557	MOV	R4,#0Ah 
     0380            558	DEL5m1:
     0380 7D64       559	MOV	R5,#064h
     0382            560	DEL5m3:
     0382 7F03       561	MOV	R7,#03h
     0384            562	DEL5m2:
     0384 7E98       563	MOV	R6,#098h
     0386 20B2EC     564	JB	BTNMENU,CONSUMP0	;goto fuel consumption mode
     0389 DEFB       565	DJNZ	R6,$-3
     038B DFF7       566	DJNZ	R7,DEL5m2
     038D DDF3       567	DJNZ       R5,DEL5m3
     038F DCEF       568	DJNZ	R4,DEL5m1	;end delay loop 
                     569	
     0391 7480       570	MOV	A,#LCD_SETDDADDR+00 ;Line 1
     0393 120F2B     571	CALL	WRCMD
     0396 90137E     572	MOV	DPTR,#MENU1
     0399 120ED3     573	CALL	WRSTR
     039C 74C0       574	MOV	A,#LCD_SETDDADDR+40h ;Line2
     039E 120F2B     575	CALL	WRCMD
     03A1 901442     576	MOV	DPTR,#MENU2
     03A4 120ED3     577	CALL	WRSTR
                     578	;select mode here
                     579	;**************************
     03A7            580	SELECT:
     03A7 20B303     581	JB	BTNBL,$+6	;toggle backlight
     03AA 1210BE     582	CALL	BACKLIGHT
     03AD 20B502     583	JB	BTNDN,GOSET	;if press down button goto Special function
     03B0 C12E       584	AJMP	SPLFUNC
     03B2            585	GOSET:
     03B2 20B4F2     586	JB	BTNUP,SELECT
                     587	;Enter setup menu
                     588	;1) set up Auto Backlight
     03B5 1210A9     589	CALL	SOUND_TRIG

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  11
xmeter16.asm                                    

     03B8 7401       590	MOV	A,#LCD_CLS
     03BA 120F2B     591	CALL	WRCMD
     03BD 121067     592	CALL	DEL100m
     03C0 7480       593	MOV	A,#LCD_SETDDADDR+00 ;Line 1
     03C2 120F2B     594	CALL	WRCMD
     03C5 901394     595	MOV	DPTR,#MENU11	;set up back light
     03C8 120ED3     596	CALL	WRSTR
     03CB 74C0       597	MOV	A,#LCD_SETDDADDR+40h ;Line 1
     03CD 120F2B     598	CALL	WRCMD
     03D0 9014EA     599	MOV	DPTR,#TOGGLE	;TOGGLE Here
     03D3 120ED3     600	CALL	WRSTR
     03D6            601	BLSTATUS:
     03D6 74C0       602	MOV	A,#LCD_SETDDADDR+40h ;Line 1 set address to write ON or OFF
     03D8 120F2B     603	CALL	WRCMD
     03DB E510       604	MOV	A,CONFIG		;read current status bit0
     03DD 30E014     605	JNB	ACC.0,BLOFF	;if ACC.0 = 0 then goto BLOFF
     03E0 744F       606	MOV	A,#4Fh		;O char
     03E2 120F3A     607	CALL	WRCHAR
     03E5 744E       608	MOV	A,#4Eh		;N char
     03E7 120F3A     609	CALL	WRCHAR
     03EA 7420       610	MOV	A,#20h		;space char
     03EC 120F3A     611	CALL	WRCHAR
     03EF C2A3       612	CLR	BL		;turn on
     03F1 020405     613	JMP	SETBL		;jump to set backlight
     03F4            614	BLOFF:
     03F4 744F       615	MOV	A,#4Fh		;O char
     03F6 120F3A     616	CALL	WRCHAR
     03F9 7446       617	MOV	A,#46h		;F char
     03FB 120F3A     618	CALL	WRCHAR
     03FE 7446       619	MOV	A,#46h		;F char
     0400 120F3A     620	CALL	WRCHAR
     0403 D2A3       621	SETB	BL		;turn off 
     0405            622	SETBL:
     0405 121056     623	CALL	DEL500m	;keyboard delay
     0408 20B303     624	JB	BTNBL,$+6	;toggle backlight
     040B 1210BE     625	CALL	BACKLIGHT
     040E 30B410     626	JNB	BTNUP,SETSOUND	;press to skip to set sound
     0411 20B5F4     627	JB	BTNDN,$-9
     0414 1210A9     628	CALL	SOUND_TRIG
     0417 E510       629	MOV	A,CONFIG
     0419 B2E0       630	CPL	ACC.0		;toggle value
     041B F510       631	MOV	CONFIG,A
     041D F519       632	MOV	AUTOBLSTAT,A
     041F 80B5       633	JMP	BLSTATUS	;refresh status
                     634	;-------------------------------------------
                     635	;2. SET BEEP SOUND
     0421            636	SETSOUND:
     0421 1210A9     637	CALL	SOUND_TRIG
     0424 7401       638	MOV	A,#LCD_CLS
     0426 120F2B     639	CALL	WRCMD
     0429 121067     640	CALL	DEL100m
     042C 7480       641	MOV	A,#LCD_SETDDADDR+00 ;Line 1
     042E 120F2B     642	CALL	WRCMD
     0431 9013AA     643	MOV	DPTR,#MENU12	;set BEEP on/OFF
     0434 120ED3     644	CALL	WRSTR
     0437 74C0       645	MOV	A,#LCD_SETDDADDR+40h ;Line 1
     0439 120F2B     646	CALL	WRCMD
     043C 9014EA     647	MOV	DPTR,#TOGGLE	;TOGGLE Here
     043F 120ED3     648	CALL	WRSTR

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  12
xmeter16.asm                                    

     0442            649	BEEPSTATUS:
     0442 74C0       650	MOV	A,#LCD_SETDDADDR+40h ;Line 1 set address to write ON or OFF
     0444 120F2B     651	CALL	WRCMD
     0447 E510       652	MOV	A,CONFIG		;check beep on/off status bit 1
     0449 30E112     653	JNB	ACC.1,BEEPOFF	;goto beep off
     044C 744F       654	MOV	A,#4Fh		;O char
     044E 120F3A     655	CALL	WRCHAR
     0451 744E       656	MOV	A,#4Eh		;N char
     0453 120F3A     657	CALL	WRCHAR
     0456 7420       658	MOV	A,#20h		;space char
     0458 120F3A     659	CALL	WRCHAR
     045B 02046D     660	JMP	SETBEEP		;jump to set beep
     045E            661	BEEPOFF:
     045E 744F       662	MOV	A,#4Fh		;O char
     0460 120F3A     663	CALL	WRCHAR
     0463 7446       664	MOV	A,#46h		;F char
     0465 120F3A     665	CALL	WRCHAR
     0468 7446       666	MOV	A,#46h		;F char
     046A 120F3A     667	CALL	WRCHAR
     046D            668	SETBEEP:
     046D 121056     669	CALL	DEL500m	;keyboard delay
     0470 20B303     670	JB	BTNBL,$+6	;toggle backlight
     0473 1210BE     671	CALL	BACKLIGHT
     0476 30B40E     672	JNB	BTNUP,SETUPPID ;skip to setup pid1&2
     0479 20B5F4     673	JB	BTNDN,$-9
     047C 1210A9     674	CALL	SOUND_TRIG
     047F E510       675	MOV	A,CONFIG
     0481 B2E1       676	CPL	ACC.1		;toggle value
     0483 F510       677	MOV	CONFIG,A
     0485 80BB       678	JMP	BEEPSTATUS	;refresh status
                     679	;--------------
                     680	;3. SET startup PID1
     0487            681	SETUPPID:
     0487 1210A9     682	CALL	SOUND_TRIG
     048A 7401       683	MOV	A,#LCD_CLS
     048C 120F2B     684	CALL	WRCMD
     048F 121067     685	CALL	DEL100m
     0492 74C0       686	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     0494 120F2B     687	CALL	WRCMD
     0497 9013BF     688	MOV	DPTR,#MENU13	;PID1
     049A 120ED3     689	CALL	WRSTR
     049D            690	SETPID1:
     049D 120CBB     691	CALL	LINE1		;write current PID to line1
     04A0 121056     692	CALL	DEL500m	;keyboard delay
     04A3 20B303     693	JB	BTNBL,$+6	;toggle backlight
     04A6 1210BE     694	CALL	BACKLIGHT
     04A9 30B411     695	JNB	BTNUP,PID1OK	;
     04AC 20B5F4     696	JB	BTNDN,$-9		;Wait BTN down press
     04AF 1210A9     697	CALL	SOUND_TRIG
     04B2 0508       698	INC	PID1		;add pid1+1
     04B4 E508       699	MOV	A,PID1
     04B6 12093F     700	CALL	SKIPPID		;skip unused PID mode
     04B9 F508       701	MOV	PID1,A		;Return skipped PID mode
     04BB 80E0       702	JMP	SETPID1
     04BD            703	PID1OK:			;select OK then write to eeprom
     04BD 7801       704	MOV	R0,#EPID1	;save in eeprom
     04BF A908       705	MOV	R1,PID1
     04C1 1211C4     706	CALL	IPW
                     707	;4. SET statup PID2

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  13
xmeter16.asm                                    

     04C4 1210A9     708	CALL	SOUND_TRIG
     04C7 7401       709	MOV	A,#LCD_CLS
     04C9 120F2B     710	CALL	WRCMD
     04CC 121067     711	CALL	DEL100m
     04CF 7480       712	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     04D1 120F2B     713	CALL	WRCMD
     04D4 9013D5     714	MOV	DPTR,#MENU14	;PID2
     04D7 120ED3     715	CALL	WRSTR
     04DA            716	SETPID2:
     04DA 120DC7     717	CALL	LINE2		;write current PID to line1
     04DD 121056     718	CALL	DEL500m	;keyboard delay
     04E0 20B303     719	JB	BTNBL,$+6	;toggle backlight
     04E3 1210BE     720	CALL	BACKLIGHT
     04E6 30B411     721	JNB	BTNUP,PID2OK	
     04E9 20B5F4     722	JB	BTNDN,$-9		;Wait BTN down press
     04EC 1210A9     723	CALL	SOUND_TRIG
     04EF 0509       724	INC	PID2		;add pid2+1
     04F1 E509       725	MOV	A,PID2
     04F3 12093F     726	CALL	SKIPPID		;skip unused PID mode
     04F6 F509       727	MOV	PID2,A		;Return skipped PID mode
     04F8 80E0       728	JMP	SETPID2
     04FA            729	PID2OK:			;select OK then write to eeprom
     04FA 7802       730	MOV	R0,#EPID2	;save eeprom
     04FC A909       731	MOV	R1,PID2
     04FE 1211C4     732	CALL	IPW
                     733	;5 Set Lightup Value for Each PID
     0501 1210A9     734	CALL	SOUND_TRIG
     0504 7401       735	MOV	A,#LCD_CLS
     0506 120F2B     736	CALL	WRCMD
     0509 121067     737	CALL	DEL100m
     050C 7480       738	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     050E 120F2B     739	CALL	WRCMD
     0511 9013EB     740	MOV	DPTR,#MENU15	;Warning Vaule
     0514 120ED3     741	CALL	WRSTR
     0517 74C0       742	MOV	A,#LCD_SETDDADDR+40h ;Line 1
     0519 120F2B     743	CALL	WRCMD
     051C 9014EA     744	MOV	DPTR,#TOGGLE	;TOGGLE Here
     051F 120ED3     745	CALL	WRSTR
     0522            746	PIDSTATUS:
     0522 74C0       747	MOV	A,#LCD_SETDDADDR+40h ;Line 1 set address to write ON or OFF
     0524 120F2B     748	CALL	WRCMD
     0527 E510       749	MOV	A,CONFIG		;check beep on/off status bit 1
     0529 30E312     750	JNB	ACC.3,PIDOFF	;goto PID off
     052C 744F       751	MOV	A,#4Fh		;O char
     052E 120F3A     752	CALL	WRCHAR
     0531 744E       753	MOV	A,#4Eh		;N char
     0533 120F3A     754	CALL	WRCHAR
     0536 7420       755	MOV	A,#20h		;space char
     0538 120F3A     756	CALL	WRCHAR
     053B 02054D     757	JMP	SETPID		;jump to set PID
     053E            758	PIDOFF:
     053E 744F       759	MOV	A,#4Fh		;O char
     0540 120F3A     760	CALL	WRCHAR
     0543 7446       761	MOV	A,#46h		;F char
     0545 120F3A     762	CALL	WRCHAR
     0548 7446       763	MOV	A,#46h		;F char
     054A 120F3A     764	CALL	WRCHAR
     054D            765	SETPID:
     054D 121056     766	CALL	DEL500m	;keyboard delay

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  14
xmeter16.asm                                    

     0550 20B303     767	JB	BTNBL,$+6	;toggle backlight
     0553 1210BE     768	CALL	BACKLIGHT
     0556 30B40E     769	JNB	BTNUP,AUTOSLEEP ;skip to set autosleep
     0559 20B5F4     770	JB	BTNDN,$-9
     055C 1210A9     771	CALL	SOUND_TRIG
     055F E510       772	MOV	A,CONFIG
     0561 B2E3       773	CPL	ACC.3		;toggle value
     0563 F510       774	MOV	CONFIG,A
     0565 80BB       775	JMP	PIDSTATUS	;refresh status
                     776	;--------------
                     777	;6. Set Auto Sleep Mode
     0567            778	AUTOSLEEP:
     0567 1210A9     779	CALL	SOUND_TRIG
     056A 7401       780	MOV	A,#LCD_CLS
     056C 120F2B     781	CALL	WRCMD
     056F 121067     782	CALL	DEL100m
     0572 7480       783	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     0574 120F2B     784	CALL	WRCMD
     0577 901401     785	MOV	DPTR,#MENU16	;Warning Vaule
     057A 120ED3     786	CALL	WRSTR
     057D 74C0       787	MOV	A,#LCD_SETDDADDR+40h ;Line 1
     057F 120F2B     788	CALL	WRCMD
     0582 9014EA     789	MOV	DPTR,#TOGGLE	;TOGGLE Here
     0585 120ED3     790	CALL	WRSTR
     0588            791	SLEEPSTATUS:
     0588 74C0       792	MOV	A,#LCD_SETDDADDR+40h ;Line 1 set address to write ON or OFF
     058A 120F2B     793	CALL	WRCMD
     058D E510       794	MOV	A,CONFIG		;check beep on/off status bit 1
     058F 30E412     795	JNB	ACC.4,SLEEPOFF	;goto PID off
     0592 744F       796	MOV	A,#4Fh		;O char
     0594 120F3A     797	CALL	WRCHAR
     0597 744E       798	MOV	A,#4Eh		;N char
     0599 120F3A     799	CALL	WRCHAR
     059C 7420       800	MOV	A,#20h		;space char
     059E 120F3A     801	CALL	WRCHAR
     05A1 0205B3     802	JMP	SETSLEEP	;jump to set sleep
     05A4            803	SLEEPOFF:
     05A4 744F       804	MOV	A,#4Fh		;O char
     05A6 120F3A     805	CALL	WRCHAR
     05A9 7446       806	MOV	A,#46h		;F char
     05AB 120F3A     807	CALL	WRCHAR
     05AE 7446       808	MOV	A,#46h		;F char
     05B0 120F3A     809	CALL	WRCHAR
     05B3            810	SETSLEEP:
     05B3 121056     811	CALL	DEL500m	;keyboard delay
     05B6 20B303     812	JB	BTNBL,$+6	;toggle backlight
     05B9 1210BE     813	CALL	BACKLIGHT
     05BC 30B40E     814	JNB	BTNUP,VERSION ;skip to firmware Version
     05BF 20B5F4     815	JB	BTNDN,$-9
     05C2 1210A9     816	CALL	SOUND_TRIG
     05C5 E510       817	MOV	A,CONFIG
     05C7 B2E4       818	CPL	ACC.4		;toggle value
     05C9 F510       819	MOV	CONFIG,A
     05CB 80BB       820	JMP	SLEEPSTATUS	;refresh status
                     821	;--------------
                     822	;7  Firmware Version
     05CD            823	VERSION:
     05CD 1210A9     824	CALL	SOUND_TRIG
     05D0 7401       825	MOV	A,#LCD_CLS

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  15
xmeter16.asm                                    

     05D2 120F2B     826	CALL	WRCMD
     05D5 121067     827	CALL	DEL100m
     05D8 7480       828	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     05DA 120F2B     829	CALL	WRCMD
     05DD 901416     830	MOV	DPTR,#MENU17	;Upgrade Fimrware
     05E0 120ED3     831	CALL	WRSTR
     05E3 74C0       832	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     05E5 120F2B     833	CALL	WRCMD
     05E8 90142C     834	MOV	DPTR,#RELEASE	;Release Date
     05EB 120ED3     835	CALL	WRSTR
     05EE 121056     836	CALL	DEL500m	;keyboard delay
     05F1 20B303     837	JB	BTNBL,$+6	;toggle backlight
     05F4 1210BE     838	CALL	BACKLIGHT
     05F7 20B4F7     839	JB	BTNUP,$-6	;Repeat til press to exit
     05FA 1210A9     840	CALL	SOUND_TRIG
     05FD 121056     841	CALL	DEL500m	;keyboard delay
                     842	;write setting in EEPROM
     0600 A910       843	MOV	R1,CONFIG	;Save CONFIG setting before getting out
     0602 7800       844	MOV	R0,#ECONFIG	;set eeprom address
     0604 1211C4     845	CALL	IPW		;Write setting to eeprom
     0607 201402     846	JB     	EEPERR,WRITEERR	;no error exit setup
     060A 415F       847	AJMP	METER		;goback to main loop
     060C            848	WRITEERR:		;eepromp writing error
     060C 74C0       849	MOV	A,#LCD_SETDDADDR+40h 	;set address to line2
     060E 120F2B     850	CALL	WRCMD
     0611 9018B4     851	MOV	DPTR,#WRERR	;Show EEprom error message
     0614 120ED3     852	CALL	WRSTR
     0617 121098     853	CALL	SOUND_BEEP
     061A 121056     854	CALL	DEL500m
     061D 121056     855	CALL	DEL500m
     0620 121056     856	CALL	DEL500m
     0623 121056     857	CALL	DEL500m
     0626 121056     858	CALL	DEL500m
     0629 121056     859	CALL	DEL500m
     062C 415F       860	AJMP	METER		;goback to main loop
                     861	;************************************************************************
                     862	;Special Function Menu
     062E            863	SPLFUNC: 
                     864	;VIN
     062E 1210A9     865	CALL	SOUND_TRIG
     0631 7401       866	MOV	A,#LCD_CLS
     0633 120F2B     867	CALL	WRCMD
     0636 121067     868	CALL	DEL100m
     0639 7480       869	MOV	A,#LCD_SETDDADDR+00 ;Line 1
     063B 120F2B     870	CALL	WRCMD
     063E 901458     871	MOV	DPTR,#VEHINFO	;show vehicle information no.
     0641 120ED3     872	CALL	WRSTR
                     873	;additional code here ???? 
     0644 121056     874	CALL	DEL500m	;keyboard delay
     0647 20B303     875	JB	BTNBL,$+6	;toggle backlight
     064A 1210BE     876	CALL	BACKLIGHT
     064D 20B4F7     877	JB	BTNUP,$-6		
                     878	;--------------------------------
                     879	;NO of DTC
     0650 1210A9     880	CALL	SOUND_TRIG
     0653 7401       881	MOV	A,#LCD_CLS
     0655 120F2B     882	CALL	WRCMD
     0658 121067     883	CALL	DEL100m
     065B 7480       884	MOV	A,#LCD_SETDDADDR+00 ;Line 1

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  16
xmeter16.asm                                    

     065D 120F2B     885	CALL	WRCMD
     0660 90146E     886	MOV	DPTR,#DTC	;no. of DTC
     0663 120ED3     887	CALL	WRSTR
     0666 C298       888	CLR	RI		;clear RI
     0668 9014C6     889	MOV	DPTR,#DTCPID
     066B 121029     890	CALL	SBLOCK		;send 0101
     066E 121034     891	CALL	RBLOCK		;receive result from ELM
     0671 120F49     892	CALL	GETB1B2		;get Byte1 Byte2
     0674 E50D       893	MOV	A,B1
     0676 6004       894	JZ	SHOWDTC	;IF B1=0 then goto SHOWDTC else next
     0678 9480       895	SUBB	A,#80h		;A - 80h = DTC no.
     067A F50D       896	MOV	B1,A		;keep no. DTC in B1
     067C            897	SHOWDTC:
     067C 900000     898	MOV	DPTR,#0000h
     067F 850D82     899	MOV	DPL,B1
     0682 121078     900	CALL	HTOD		;Result in R3
     0685 7491       901	MOV	A,#LCD_SETDDADDR+17	;set cursor position
     0687 120F2B     902	CALL	WRCMD
     068A EB         903	MOV	A,R3
     068B C4         904	SWAP	A		;get High nibble
     068C 540F       905	ANL	A,#0Fh		
     068E 2430       906	ADD	A,#30h
     0690 120F3A     907	CALL	WRCHAR		;write 1st digit
     0693 EB         908	MOV	A,R3
     0694 540F       909	ANL	A,#0Fh
     0696 2430       910	ADD	A,#30h
     0698 120F3A     911	CALL	WRCHAR		;write 2nd digit
     069B 74C0       912	MOV	A,#LCD_SETDDADDR+40h	;set to Line2
     069D 120F2B     913	CALL	WRCMD
                     914	;check DTC no. = 0 or not
     06A0 E50D       915	MOV	A,B1		;Read NO OF DTC
     06A2 701A       916	JNZ	MILISON		;if MIL off jump MILISON
     06A4 901484     917	MOV	DPTR,#MILOFF
     06A7 120ED3     918	CALL	WRSTR
     06AA 121056     919	CALL	DEL500m	;check keyboard delay
     06AD 20B303     920	JB	BTNBL,$+6	;toggle backlight
     06B0 1210BE     921	CALL	BACKLIGHT
     06B3 20B4F7     922	JB	BTNUP,$-6
     06B6 1210A9     923	CALL	SOUND_TRIG		
                     924	;----------------------
     06B9 121056     925	CALL	DEL500m	;keyboard delay
     06BC 415F       926	AJMP	METER		;back to PID mode
                     927	;----------------------
     06BE            928	MILISON:			;MIL is on next show DTCs
     06BE D2B6       929	SETB	LEDUP		;turn on LED UP
     06C0 90149A     930	MOV	DPTR,#MILON	;show message "Press to read DTC ->"
     06C3 120ED3     931	CALL	WRSTR
     06C6 121098     932	CALL	SOUND_BEEP	;BEEP warning
     06C9 121056     933	CALL	DEL500m	;check keyboard delay
     06CC 20B303     934	JB	BTNBL,$+6	;toggle backlight
     06CF 1210BE     935	CALL	BACKLIGHT
     06D2 20B5F7     936	JB	BTNDN,$-6
     06D5 1210A9     937	CALL	SOUND_TRIG	
     06D8 74C0       938	MOV	A,#LCD_SETDDADDR+40h	;set to Line2
     06DA 120F2B     939	CALL	WRCMD
     06DD 9014D0     940	MOV	DPTR,#DISPDTC
     06E0 120ED3     941	CALL	WRSTR
                     942	;Read Diagnosis troube code and show here
     06E3 9014CC     943	MOV	DPTR,#DTCREAD	;send 03 to read all DTC

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  17
xmeter16.asm                                    

     06E6 121029     944	CALL	SBLOCK
     06E9 121034     945	CALL	RBLOCK		;Receive DTC in buffer
     06EC F6         946	MOV	@R0,A		;Keep ">" in buffer
                     947	;------------------- DTC interpreter start here ------------------------
                     948	;DTC Header checking 43 first
     06ED 7819       949	MOV	R0,#19h		;R0 point to buffer
     06EF            950	CHECK4:
     06EF 08         951	INC	R0
     06F0 B634FC     952	CJNE	@R0,#34h,CHECK4	;check 43 (check only 4)
     06F3 08         953	INC	R0
     06F4 B633F8     954	CJNE	@R0,#33h,CHECK4	
     06F7 E8         955	MOV	A,R0		;found 43
     06F8 2404       956	ADD	A,#04h		;skip no of DTC byte
     06FA F8         957	MOV	R0,A		;R0 point to the first byte of DTC
     06FB 751300     958	MOV	TEMP3,#00h	;Counter DTC
                     959	
     06FE            960	DTC1READ:
     06FE 74C0       961	MOV	A,#LCD_SETDDADDR+40h	;set to Line2
     0700 120F2B     962	CALL	WRCMD
                     963	
     0703            964	DTCINTP:
     0703 08         965	INC	R0
     0704 B63E03     966	CJNE	@R0,#3Eh,$+6	;check ">" if not interpret code now
     0707 020786     967	JMP	CLEARMIL	;exit to CLEAR MIL
     070A 08         968	INC	R0
     070B B63E03     969	CJNE	@R0,#3Eh,$+6	;check ">" if not interpret code now
     070E 020786     970	JMP	CLEARMIL	;exit to CLEAR MIL
     0711 18         971	DEC	R0
     0712 B62002     972	CJNE	@R0,#20h,$+5	;check "SP"
     0715 80EC       973	JMP	DTCINTP	
     0717 B60D02     974	CJNE	@R0,#0Dh,$+5	;check "CR" 
     071A 80E7       975	JMP	DTCINTP	
     071C B63A02     976	CJNE	@R0,#3Ah,$+5	;check ":" 
     071F 80E2       977	JMP	DTCINTP	
     0721 08         978	INC	R0		;skip to check next byte
     0722 B63A02     979	CJNE	@R0,#3Ah,$+5	;check ":" next byte
     0725 80DC       980	JMP	DTCINTP
     0727 18         981	DEC	R0		;IF not  1: back last byte
                     982	;check #00 value to exit from read DTC
     0728 B63008     983	CJNE	@R0,#30h,SKIPNULL1
     072B 08         984	INC	R0
     072C B63003     985	CJNE	@R0,#30h,SKIPNULL2
     072F 020786     986	JMP	CLEARMIL	;IF read data is 00 then skip to clear MIL
     0732            987	SKIPNULL2:
     0732 18         988	DEC	R0
     0733            989	SKIPNULL1:
                     990	;1 DTC code read checking for CR
                     991	;display to LCD  write number first
     0733 8811       992	MOV	TEMP1,R0	;keep R0
     0735 900000     993	MOV	DPTR,#0000h
     0738 0513       994	INC	TEMP3
     073A 851382     995	MOV	DPL,TEMP3
     073D 121078     996	CALL	HTOD		;convert counter to dec output R3
     0740 EB         997	MOV	A,R3
     0741 54F0       998	ANL	A,#11110000b
     0743 C4         999	SWAP	A
     0744 121019    1000	CALL	HTOA
     0747 120F3A    1001	CALL	WRCHAR		;write 1st digit
     074A EB        1002	MOV	A,R3

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  18
xmeter16.asm                                    

     074B 540F      1003	ANL	A,#00001111b
     074D 121019    1004	CALL	HTOA
     0750 120F3A    1005	CALL	WRCHAR
     0753 742D      1006	MOV	A,#2Dh		; "-" sign
     0755 120F3A    1007	CALL	WRCHAR
     0758 A811      1008	MOV	R0,TEMP1	;return R0
                    1009	;interpret now
     075A 121290    1010	CALL	INTPDTC		;inteprte troube code ,save result PX in buffer
     075D E9        1011	MOV	A,R1		;show DTC 1st digit
     075E 120F3A    1012	CALL	WRCHAR
     0761 EA        1013	MOV	A,R2		;show DTC 2nd digit
     0762 120F3A    1014	CALL	WRCHAR
                    1015	;PX read now read remaining 3 byte code
     0765 08        1016	INC	R0		;point to next byte
     0766 E6        1017	MOV	A,@R0		
     0767 120F3A    1018	CALL	WRCHAR		;show DTC 3rd digit
     076A 08        1019	INC	R0		;skip space
     076B 08        1020	INC	R0
     076C E6        1021	MOV	A,@R0		
     076D 120F3A    1022	CALL	WRCHAR		;show DTC 4th digit
     0770 08        1023	INC	R0
     0771 E6        1024	MOV	A,@R0		
     0772 120F3A    1025	CALL	WRCHAR		;show DTC 5th digit
                    1026	;read next line here
     0775 121056    1027	CALL	DEL500m	;check keyboard delay
     0778 20B303    1028	JB	BTNBL,$+6	;toggle backlight
     077B 1210BE    1029	CALL	BACKLIGHT
     077E 20B5F7    1030	JB	BTNDN,$-6
     0781 1210A9    1031	CALL	SOUND_TRIG	
     0784 C1FE      1032	JMP	DTC1READ	;Jump back to read next couple byte
                    1033	;change end code from CR to 00
     0786           1034	CLEARMIL:
                    1035	;No more DTC Clear MIL status or not
     0786 74C0      1036	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     0788 120F2B    1037	CALL	WRCMD
     078B 9014B0    1038	MOV	DPTR,#SETMIL	;Clear MIL  |  [NO ]->
     078E 120ED3    1039	CALL	WRSTR
     0791 751300    1040	MOV	TEMP3,#00	;TEMP3= 00  -> not clear ,TEMP3=1 -> clear MIL
     0794           1041	MILSTATUS:
     0794 74CF      1042	MOV	A,#LCD_SETDDADDR+4Fh ;Line 2 set address to write YES or NO
     0796 120F2B    1043	CALL	WRCMD
     0799 E513      1044	MOV	A,TEMP3
     079B 30E012    1045	JNB	ACC.0,NOTCLR		;no MIL clear
     079E 7459      1046	MOV	A,#59h		;Y char
     07A0 120F3A    1047	CALL	WRCHAR
     07A3 7445      1048	MOV	A,#45h		;E char
     07A5 120F3A    1049	CALL	WRCHAR
     07A8 7453      1050	MOV	A,#53h		;S char
     07AA 120F3A    1051	CALL	WRCHAR
     07AD 0207BF    1052	JMP	SETMILOFF	;jump to set MIL off
     07B0           1053	NOTCLR:
     07B0 744E      1054	MOV	A,#4Eh		;N char
     07B2 120F3A    1055	CALL	WRCHAR
     07B5 744F      1056	MOV	A,#4Fh		;O char
     07B7 120F3A    1057	CALL	WRCHAR
     07BA 7420      1058	MOV	A,#20h		;Space
     07BC 120F3A    1059	CALL	WRCHAR
     07BF           1060	SETMILOFF:
     07BF 121056    1061	CALL	DEL500m	;keyboard delay

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  19
xmeter16.asm                                    

     07C2 20B303    1062	JB	BTNBL,$+6	;toggle backlight
     07C5 1210BE    1063	CALL	BACKLIGHT
     07C8 30B40E    1064	JNB	BTNUP,SPLEXIT       ;skip to exit special function
     07CB 20B5F4    1065	JB	BTNDN,$-9
     07CE 1210A9    1066	CALL	SOUND_TRIG
     07D1 E513      1067	MOV	A,TEMP3
     07D3 B2E0      1068	CPL	ACC.0		;toggle value
     07D5 F513      1069	MOV	TEMP3,A
     07D7 80BB      1070	JMP	MILSTATUS	;refresh status
     07D9           1071	SPLEXIT:
     07D9 E513      1072	MOV	A,TEMP3
     07DB 30E006    1073	JNB	ACC.0,$+9		;NO then skip CLR MIL 
                    1074	;send CLRMIL  0400 Message Here
     07DE 9014E6    1075	MOV	DPTR,#CLRMIL
     07E1 121029    1076	CALL	SBLOCK
     07E4 121056    1077	CALL	DEL500m	;keyboard delay
     07E7 415F      1078	AJMP	METER		;back to PID mode
                    1079	;----------------------
                    1080	;***********END CONFIG******************
     07E9           1081	CONSUMP:
     07E9 7401      1082	MOV	A,#LCD_CLS
     07EB 120F2B    1083	CALL	WRCMD
     07EE 121067    1084	CALL	DEL100m
     07F1 7480      1085	MOV	A,#LCD_SETDDADDR+00 ;Line 1
     07F3 120F2B    1086	CALL	WRCMD
     07F6 90185C    1087	MOV	DPTR,#SPDMAF
     07F9 120ED3    1088	CALL	WRSTR		
     07FC 74C0      1089	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     07FE 120F2B    1090	CALL	WRCMD
     0801 E510      1091	MOV	A,CONFIG		;check default FC mode
     0803 20E209    1092	JB	ACC.2,AVRMODE	;goto average mode
                    1093	;Instant mode
     0806 901872    1094	MOV	DPTR,#INSTFC
     0809 120ED3    1095	CALL	WRSTR
     080C 020815    1096	JMP	CONSUMP2
     080F           1097	AVRMODE:
     080F 901888    1098	MOV	DPTR,#AVRFC
     0812 120ED3    1099	CALL	WRSTR
                    1100	
     0815           1101	CONSUMP2:	;calculate loop
                    1102	;---Get Vehicle Speed
     0815 90156D    1103	MOV	DPTR,#SPDPID
     0818 121029    1104	CALL	SBLOCK		;send 010D to ELM
     081B 121034    1105	CALL	RBLOCK
     081E 120F49    1106	CALL	GETB1B2	
     0821 850D11    1107	MOV	TEMP1,B1	;keep speed in temp1
     0824 120AA4    1108	CALL	FORMULA3	;calculate speed result in BUFFER
     0827 7480      1109	MOV	A,#LCD_SETDDADDR+0	;set cursot line1 
     0829 120F2B    1110	CALL	WRCMD
     082C A90F      1111	MOV	R1,RESULTLEN
     082E 7820      1112	MOV	R0,#BUFFER	;point to buffer
     0830           1113	VEHSPD:
     0830 E6        1114	MOV	A,@R0			;load char in A
     0831 120F3A    1115	CALL	WRCHAR
     0834 08        1116	INC	R0
     0835 D9F9      1117	DJNZ	R1,VEHSPD		;loop til end of length
                    1118	;---Get Manifold Air Flow
     0837 901573    1119	MOV	DPTR,#MAFPID
     083A 121029    1120	CALL	SBLOCK		;send 010D to ELM

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  20
xmeter16.asm                                    

     083D 121034    1121	CALL	RBLOCK
     0840 120F49    1122	CALL	GETB1B2	
     0843 850D12    1123	MOV	TEMP2,B1	;keep airflow in temp2
     0846 850E13    1124	MOV	TEMP3,B2	;keep airflow in temp3
     0849 120B92    1125	CALL	AIRFLOW		;calculate airflow result in buffer
     084C 748B      1126	MOV	A,#LCD_SETDDADDR+11	;set cursor line1 
     084E 120F2B    1127	CALL	WRCMD
     0851 A90F      1128	MOV	R1,RESULTLEN
     0853 7820      1129	MOV	R0,#BUFFER	;point to buffer
     0855           1130	MAF:
     0855 E6        1131	MOV	A,@R0			;load char in A
     0856 120F3A    1132	CALL	WRCHAR
     0859 08        1133	INC	R0
     085A D9F9      1134	DJNZ	R1,MAF		;loop til end of length
                    1135	;calculate fuel consumption & display on Line 2
                    1136	;FC = (speed x 1Dhx0Ah)/ (Airflow /0Ah)  [100%]
     085C A912      1137	MOV	R1,TEMP2	;Airflow /0Ah
     085E A813      1138	MOV	R0,TEMP3
     0860 7B00      1139	MOV	R3,#00h
     0862 7A0A      1140	MOV	R2,#0Ah
     0864 121143    1141	CALL	UDIV16		;result in R1,R0
     0867 8912      1142	MOV	TEMP2,R1
     0869 8813      1143	MOV	TEMP3,R0
                    1144	
     086B 7900      1145	MOV	R1,#00h
     086D A811      1146	MOV	R0,TEMP1		;Speed x 1Dhx0Ah = Speedx 122h
     086F 7B01      1147	MOV	R3,#01h
                    1148	;FC = (speed x 1Ch,x0Ah)/(Airflow/0Ah)   [ 5% compensation]
     0871 7A13      1149	MOV	R2,#13h
                    1150	;MOV	R2,#22h		;100%
     0873 121179    1151	CALL	UMUL16		;result in R3,R2,R1,R0 (use only R1 R0)
     0876 AB12      1152	MOV	R3,TEMP2	;prepare divider
     0878 AA13      1153	MOV	R2,TEMP3
                    1154	
     087A 121143    1155	CALL	UDIV16		;result in R1,R0
                    1156	;end FC calculate
     087D 8983      1157	MOV	DPH,R1		;keep result in DPTR
     087F 8882      1158	MOV	DPL,R0
                    1159	;check F/C mode
     0881 E510      1160	MOV	A,CONFIG
     0883 30E24F    1161	JNB	ACC.2,INSTMODE	;skip to INSTANT mode
                    1162	
                    1163	;keep logging data in iram 80h-FFh
     0886 0515      1164	INC	FCPTR
     0888 A815      1165	MOV	R0,FCPTR	;#80h
     088A A683      1166	MOV	@R0,DPH
     088C 08        1167	INC	R0		;#81h
     088D A682      1168	MOV	@R0,DPL
     088F 8815      1169	MOV	FCPTR,R0	;#81h
                    1170	
     0891 E515      1171	MOV	A,FCPTR		;check end of data at 0FFh or not
     0893 B4FF6C    1172	CJNE	A,#0FFh,FCKEY	;not end of data jump to FCKEY
                    1173	;Start average here
     0896 7880      1174	MOV	R0,#080h		;R0 point to 81h
     0898 7981      1175	MOV	R1,#081h		;R1 point to 83h
     089A 8683      1176	MOV	DPH,@R0	;first data HI byte in DPH
     089C 8782      1177	MOV	DPL,@R1		;first data LOW byte in DPL
     089E 7882      1178	MOV	R0,#082h		;R0 point to 82h
     08A0 E6        1179	MOV	A,@R0	

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  21
xmeter16.asm                                    

     08A1 FB        1180	MOV	R3,A		;2 nd data High Nibble  in R3
     08A2 08        1181	INC	R0
     08A3 E6        1182	MOV	A,@R0		
     08A4 FA        1183	MOV	R2,A		;2nd data Low Nibble  in R2
     08A5 A983      1184	MOV	R1,DPH		;1st data in R1,R0
     08A7 A882      1185	MOV	R0,DPL		;;1st data in R1,R0
     08A9 751183    1186	MOV	TEMP1,#083h	;data index
     08AC           1187	AVERAGE: 	;average every 64 data logging then divide by 64 at final
     08AC 1211B8    1188	CALL	ADD16		;16bit add		result in R1,R0	
     08AF 8983      1189	MOV	DPH,R1		;keep sum result in DPTR
     08B1 8882      1190	MOV	DPL,R0
     08B3 0511      1191	INC	TEMP1		;84h
     08B5 A811      1192	MOV	R0,TEMP1
     08B7 E6        1193	MOV	A,@R0		;Load Next data digit1 84h
     08B8 FB        1194	MOV	R3,A
     08B9 08        1195	INC	R0
     08BA E6        1196	MOV	A,@R0		;Load Next data digit2 85h
     08BB FA        1197	MOV	R2,A
     08BC 8811      1198	MOV	TEMP1,R0	;TEMP1 = 85h
     08BE A983      1199	MOV	R1,DPH		;1st data in R1,R0 load result back
     08C0 A882      1200	MOV	R0,DPL		;;1st data in R1,R0
     08C2 E511      1201	MOV	A,TEMP1
     08C4 B4FFE5    1202	CJNE	A,#0FFh,AVERAGE	;not end of data average again
     08C7 7B00      1203	MOV	R3,#00h
     08C9 7A40      1204	MOV	R2,#64
     08CB 121143    1205	CALL	UDIV16		;Divide by 64 Result in R1,R0
     08CE 8983      1206	MOV	DPH,R1
     08D0 8882      1207	MOV	DPL,R0		;Prepare data for HTOD
     08D2 75157F    1208	MOV	FCPTR,#7Fh	;reset pointer
     08D5           1209	INSTMODE:
     08D5 121078    1210	CALL	HTOD		;convert result to DEC
     08D8 74CC      1211	MOV	A,#LCD_SETDDADDR+76	;set cursot line1 
     08DA 120F2B    1212	CALL	WRCMD
     08DD EA        1213	MOV	A,R2
     08DE 540F      1214	ANL	A,#0Fh
     08E0 6005      1215	JZ	FCZERO
     08E2 2430      1216	ADD	A,#30h		;change to ascii
     08E4 0208E9    1217	JMP	FCNONZERO
     08E7           1218	FCZERO:
     08E7 7417      1219	MOV	A,#17h		;space
     08E9           1220	FCNONZERO:
     08E9 120F3A    1221	CALL	WRCHAR		;write 1 st digit
     08EC EB        1222	MOV	A,R3
     08ED C4        1223	SWAP	A
     08EE 540F      1224	ANL	A,#0Fh
     08F0 2430      1225	ADD	A,#30h
     08F2 120F3A    1226	CALL	WRCHAR		;write 2nd digit
     08F5 742E      1227	MOV	A,#2Eh		
     08F7 120F3A    1228	CALL	WRCHAR		;write full stop
     08FA EB        1229	MOV	A,R3
     08FB 540F      1230	ANL	A,#0Fh
     08FD 2430      1231	ADD	A,#30h
     08FF 120F3A    1232	CALL	WRCHAR		;write 3nd digit
                    1233	;end calculation fuel consumption and check button press
     0902           1234	FCKEY:
     0902 20B303    1235	JB	BTNBL,$+6	;toggle back light
     0905 1210BE    1236	CALL	BACKLIGHT
     0908 20B40C    1237	JB	BTNUP,FCMODE
     090B 1210A9    1238	CALL	SOUND_TRIG

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  22
xmeter16.asm                                    

     090E E510      1239	MOV	A,CONFIG		;Instant mode
     0910 C2E2      1240	CLR	ACC.2
     0912 F510      1241	MOV	CONFIG,A
     0914 0207E9    1242	LJMP	CONSUMP	;restart FC
     0917           1243	FCMODE:
     0917 20B50C    1244	JB	BTNDN,FCEXIT
     091A 1210A9    1245	CALL	SOUND_TRIG
     091D E510      1246	MOV	A,CONFIG
     091F D2E2      1247	SETB	ACC.2		;Average mode;
     0921 F510      1248	MOV	CONFIG,A
     0923 0207E9    1249	LJMP	CONSUMP	;Restart FC
     0926           1250	FCEXIT:
     0926 20B213    1251	JB	BTNMENU,CONSUMP3	;jump back to calculte consump
     0929 1210A9    1252	CALL	SOUND_TRIG
     092C 7800      1253	MOV	R0,#ECONFIG	;set eeprom address
     092E A910      1254	MOV	R1,CONFIG	;save last mode in EEPROM
     0930 1211C4    1255	CALL	IPW		;Write setting to eeprom
     0933 121056    1256	CALL	DEL500m
     0936 121056    1257	CALL	DEL500m	;key delay
     0939 02025F    1258	LJMP	METER		;Exit
     093C           1259	CONSUMP3:
     093C 020815    1260	LJMP	CONSUMP2
                    1261	;============SUB ROUTINE=======================
                    1262	;SKIP PID  IN A(PID mode) OUT  A and PID
     093F           1263	SKIPPID:
     093F B40803    1264	CJNE	A,#08h,$+6
     0942 740A      1265	MOV	A,#0Ah
     0944 22        1266	RET
     0945 B41203    1267	CJNE	A,#12h,$+6
     0948 7414      1268	MOV	A,#14h
     094A 22        1269	RET
     094B B41603    1270	CJNE	A,#16h,$+6
     094E 7422      1271	MOV	A,#22h
     0950 22        1272	RET
     0951 B42403    1273	CJNE	A,#24h,$+6
     0954 742C      1274	MOV	A,#2Ch
     0956 22        1275	RET
     0957 B43003    1276	CJNE	A,#30h,$+6
     095A 7433      1277	MOV	A,#33h
     095C 22        1278	RET
     095D B43403    1279	CJNE	A,#34h,$+6
     0960 743C      1280	MOV	A,#3Ch
     0962 22        1281	RET
     0963 B43E03    1282	CJNE	A,#3Eh,$+6
     0966 7442      1283	MOV	A,#42h
     0968 22        1284	RET
     0969 B44702    1285	CJNE	A,#47h,$+5
     096C 7404      1286	MOV	A,#04h
     096E 22        1287	RET
                    1288	;*********************************
                    1289	;IN   B1,B2 ,R2
                    1290	;OUT   BUFFER,RESULTLEN
     096F           1291	CALCULATE:  ;Determine PID mode / calculate /translate to ASCII / keep in BUFFER/RESULTLEN
                    1292	
     096F BA0404    1293	CJNE	R2,#04h,$+7	;CAL Engine Load
     0972 120A33    1294	CALL	FORMULA1
     0975 22        1295	RET
     0976 BA0504    1296	CJNE	R2,#05h,$+7	;Coolant Temp
     0979 120A75    1297	CALL	FORMULA2

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  23
xmeter16.asm                                    

     097C 22        1298	RET
     097D BA0604    1299	CJNE	R2,#06h,$+7	;Short Term Fuel TRim B1
     0980 120ADC    1300	CALL	FUELTRIM
     0983 22        1301	RET
     0984 BA0704    1302	CJNE	R2,#07h,$+7	;Long Term Fuel Trim B1
     0987 120ADC    1303	CALL	FUELTRIM
     098A 22        1304	RET
     098B BA0A04    1305	CJNE	R2,#0Ah,$+7	;Fuel Pressure
     098E 120AA4    1306	CALL	FORMULA3
     0991 22        1307	RET
     0992 BA0B04    1308	CJNE	R2,#0Bh,$+7	;MAN air Press
     0995 120AA4    1309	CALL	FORMULA3
     0998 22        1310	RET
     0999 BA0C04    1311	CJNE	R2,#0Ch,$+7	;ENG Speed
     099C 120B1A    1312	CALL	ENGSPEED
     099F 22        1313	RET
     09A0 BA0D04    1314	CJNE	R2,#0Dh,$+7	;VEH Speed
     09A3 120AA4    1315	CALL	FORMULA3
     09A6 22        1316	RET
     09A7 BA0E04    1317	CJNE	R2,#0Eh,$+7	;IGN ADV Timing
     09AA 120B5C    1318	CALL	IGNTIME
     09AD 22        1319	RET
     09AE BA0F04    1320	CJNE	R2,#0Fh,$+7	;Intake Air Temp
     09B1 120A75    1321	CALL	FORMULA2
     09B4 22        1322	RET
     09B5 BA1004    1323	CJNE	R2,#10h,$+7	;Air Flow
     09B8 120B92    1324	CALL	AIRFLOW
     09BB 22        1325	RET
     09BC BA1104    1326	CJNE	R2,#11h,$+7	;Throttle Pos
     09BF 120A33    1327	CALL	FORMULA1
     09C2 22        1328	RET
     09C3 BA1404    1329	CJNE	R2,#14h,$+7	;HO2S 1 voltage
     09C6 120C87    1330	CALL	HO2SVOLT
     09C9 22        1331	RET
     09CA BA1504    1332	CJNE	R2,#15h,$+7	;HO2S 2 voltage
     09CD 120C87    1333	CALL	HO2SVOLT
     09D0 22        1334	RET
     09D1 BA2204    1335	CJNE	R2,#22h,$+7	;TransmissTemp
     09D4 120BD3    1336	CALL	CATTEMP
     09D7 22        1337	RET
     09D8 BA2304    1338	CJNE	R2,#23h,$+7	;Fuel Rail Pressure
     09DB 120B92    1339	CALL	AIRFLOW		;Same Fomula as Air Flow
     09DE 22        1340	RET
     09DF BA2C04    1341	CJNE	R2,#2Ch,$+7	;Command EGR
     09E2 120A33    1342	CALL	FORMULA1
     09E5 22        1343	RET
     09E6 BA2D04    1344	CJNE	R2,#2Dh,$+7	;EGR error
     09E9 120A33    1345	CALL	FORMULA1
     09EC 22        1346	RET
     09ED BA2E04    1347	CJNE	R2,#2Eh,$+7	;Command Evap Purge
     09F0 120A33    1348	CALL	FORMULA1
     09F3 22        1349	RET
     09F4 BA2F04    1350	CJNE	R2,#2Fh,$+7	;Fuel Level
     09F7 120A33    1351	CALL	FORMULA1
     09FA 22        1352	RET
     09FB BA3304    1353	CJNE	R2,#33h,$+7	;Baro Press
     09FE 120AA4    1354	CALL	FORMULA3
     0A01 22        1355	RET
     0A02 BA3C04    1356	CJNE	R2,#3Ch,$+7	;CAT 1 Temp

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  24
xmeter16.asm                                    

     0A05 120BD3    1357	CALL	CATTEMP
     0A08 22        1358	RET
     0A09 BA3D04    1359	CJNE	R2,#3Dh,$+7	;CAT 2 Temp
     0A0C 120BD3    1360	CALL	CATTEMP
     0A0F 22        1361	RET
     0A10 BA4204    1362	CJNE	R2,#42h,$+7	;ECU Volt
     0A13 120C21    1363	CALL	ECUVOLT
     0A16 22        1364	RET
     0A17 BA4304    1365	CJNE	R2,#43h,$+7	;ABS ENgine load
     0A1A 120A33    1366	CALL	FORMULA1
     0A1D 22        1367	RET
     0A1E BA4404    1368	CJNE	R2,#44h,$+7	;CMD EQV RAtio
     0A21 120C55    1369	CALL	CMDEQV
     0A24 22        1370	RET
     0A25 BA4504    1371	CJNE	R2,#45h,$+7	;REL Throt Pos
     0A28 120A33    1372	CALL	FORMULA1
     0A2B 22        1373	RET
     0A2C BA4603    1374	CJNE	R2,#46h,$+6	;AMB Air Temp
     0A2F 120A75    1375	CALL	FORMULA2
     0A32 22        1376	RET
                    1377	;***********************************
                    1378	;--SUB Formula Caculation---------------------------------------
                    1379	;IN   B1,B2
                    1380	;OUT BUFFER, RESULTLEN
     0A33           1381	FORMULA1:	;Percentage calculate B1/255 x 100
     0A33 E50D      1382	MOV	A,B1
     0A35 75F064    1383	MOV	B,#100
     0A38 A4        1384	MUL	AB	;result in BA
     0A39 900000    1385	MOV	DPTR,#0000h	;DPTR=0
     0A3C F582      1386	MOV	DPL,A	;DPL=A
     0A3E 121078    1387	CALL	HTOD	;Result fraction A keep in R2,R3  take only R2 low nibble
     0A41 EA        1388	MOV	A,R2	;keep carry in A
     0A42 900000    1389	MOV	DPTR,#0000h
     0A45 85F082    1390	MOV	DPL,B	;take byte1 
     0A48 25F0      1391	ADD	A,B	;add byte1 with carry 
     0A4A 900000    1392	MOV	DPTR,#000h	;final result for HTOD
     0A4D F582      1393	MOV	DPL,A
     0A4F 121078    1394	CALL	HTOD	;Result in R2,R2
                    1395	
     0A52 EA        1396	MOV	A,R2
     0A53 540F      1397	ANL	A,#0Fh
     0A55 FC        1398	MOV	R4,A	;keep
     0A56 6007      1399	JZ	$+9	;IF A = 0 then skip to BUFFER = #17h
     0A58 2430      1400	ADD	A,#30h	;convert dec to ASCII
     0A5A F520      1401	MOV	BUFFER,A	;digit1
     0A5C 020A62    1402	JMP	$+6
     0A5F 752017    1403	MOV	BUFFER,#17h	;Result is 0 then put SPACE
     0A62 EB        1404	MOV	A,R3
     0A63 C4        1405	SWAP	A
     0A64 540F      1406	ANL	A,#0Fh
     0A66 2430      1407	ADD	A,#30h	;convert dec to ASCII
     0A68 F521      1408	MOV	BUFFER+1,A	;digit2
     0A6A EB        1409	MOV	A,R3
     0A6B 540F      1410	ANL	A,#0Fh
     0A6D 2430      1411	ADD	A,#30h	;convert dec to ASCII
     0A6F F522      1412	MOV	BUFFER+2,A	;digit1
     0A71 750F03    1413	MOV	RESULTLEN,#03
     0A74 22        1414	RET
                    1415	;------------------

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  25
xmeter16.asm                                    

     0A75           1416	FORMULA2:	;Temperature B1-40
     0A75 900000    1417	MOV	DPTR,#0000h
     0A78 E50D      1418	MOV	A,B1
     0A7A C3        1419	CLR	C
     0A7B 9428      1420	SUBB	A,#40
     0A7D F582      1421	MOV	DPL,A
     0A7F 121078    1422	CALL	HTOD
     0A82 EA        1423	MOV	A,R2
     0A83 540F      1424	ANL	A,#0Fh
     0A85 6007      1425	JZ	$+9	;IF A = 0 then skip to BUFFER = #17h
     0A87 2430      1426	ADD	A,#30h	;convert dec to ASCII
     0A89 F520      1427	MOV	BUFFER,A	;digit1
     0A8B 020A91    1428	JMP	$+6
     0A8E 752017    1429	MOV	BUFFER,#17h	;Result is 0 then put SPACE
     0A91 EB        1430	MOV	A,R3
     0A92 C4        1431	SWAP	A
     0A93 540F      1432	ANL	A,#0Fh
     0A95 2430      1433	ADD	A,#30h	;convert dec to ASCII
     0A97 F521      1434	MOV	BUFFER+1,A	;digit2
     0A99 EB        1435	MOV	A,R3
     0A9A 540F      1436	ANL	A,#0Fh
     0A9C 2430      1437	ADD	A,#30h	;convert dec to ASCII
     0A9E F522      1438	MOV	BUFFER+2,A	;digit1
     0AA0 750F03    1439	MOV	RESULTLEN,#03
     0AA3 22        1440	RET
                    1441	;------------------
     0AA4           1442	FORMULA3:	;direct byte
     0AA4 900000    1443	MOV	DPTR,#0000h
     0AA7 850D82    1444	MOV	DPL,B1
     0AAA 121078    1445	CALL	HTOD	;convert hex to Decimal (R1,R2,R3)
     0AAD EA        1446	MOV	A,R2
     0AAE 540F      1447	ANL	A,#0Fh
     0AB0 6007      1448	JZ	$+9	;IF A = 0 then skip to BUFFER = #17
     0AB2 2430      1449	ADD	A,#30h	;convert dec to ASCII
     0AB4 F520      1450	MOV	BUFFER,A	;digit1
     0AB6 020ABC    1451	JMP	$+6
     0AB9 752017    1452	MOV	BUFFER,#17h	;Result is 0 then put SPACE
     0ABC EB        1453	MOV	A,R3
     0ABD C4        1454	SWAP	A
     0ABE 540F      1455	ANL	A,#0Fh
     0AC0 AF20      1456	MOV	R7,BUFFER	;check space or not
     0AC2 BF1702    1457	CJNE	R7,#17h,$+5
     0AC5 6007      1458	JZ	$+9		;If 1digit =0 and 2 digit = 0 then jump
     0AC7 2430      1459	ADD	A,#30h	;convert dec to ASCII
     0AC9 F521      1460	MOV	BUFFER+1,A	;digit2
     0ACB 020AD1    1461	JMP	$+6
     0ACE 752117    1462	MOV	BUFFER+1,#17h	;Result is 0 then put SPACE
     0AD1 EB        1463	MOV	A,R3
     0AD2 540F      1464	ANL	A,#0Fh
     0AD4 2430      1465	ADD	A,#30h	;convert dec to ASCII
     0AD6 F522      1466	MOV	BUFFER+2,A	;digit1
     0AD8 750F03    1467	MOV	RESULTLEN,#03
     0ADB 22        1468	RET
                    1469	;--------------------
     0ADC           1470	FUELTRIM:	;( B1x64h)/80h - 64h
     0ADC E50D      1471	MOV	A,B1
     0ADE 75F064    1472	MOV	B,#64h
     0AE1 A4        1473	MUL	AB	;Result in B,A
     0AE2 A9F0      1474	MOV	R1,B

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  26
xmeter16.asm                                    

     0AE4 F8        1475	MOV	R0,A
     0AE5 7B00      1476	MOV	R3,#00
     0AE7 7A80      1477	MOV	R2,#80h
     0AE9 121143    1478	CALL	UDIV16	;Result in R1,R0
     0AEC C3        1479	CLR	C	;clear carry flag
     0AED E8        1480	MOV	A,R0
     0AEE 9464      1481	SUBB	A,#64h	;Result in ACC
                    1482	;Sign checking
     0AF0 4007      1483	JC	$+9	; OV set then negative sign
     0AF2 75202B    1484	MOV	BUFFER,#2Bh	;+sign
     0AF5 020AFF    1485	JMP	POSFT
     0AF8 75202D    1486	MOV	BUFFER,#2Dh	;-Sign
     0AFB FC        1487	MOV	R4,A
     0AFC 7464      1488	MOV	A,#64h
     0AFE 9C        1489	SUBB	A,R4		;64h - A
     0AFF           1490	POSFT:
     0AFF 900000    1491	MOV	DPTR,#0000h
     0B02 F582      1492	MOV	DPL,A
     0B04 121078    1493	CALL	HTOD	;convert hex to Decimal (R1,R2,R3)
     0B07 EB        1494	MOV	A,R3
     0B08 C4        1495	SWAP	A
     0B09 540F      1496	ANL	A,#0Fh
     0B0B 2430      1497	ADD	A,#30h	;convert dec to ASCII
     0B0D F521      1498	MOV	BUFFER+1,A	;digit2
     0B0F EB        1499	MOV	A,R3
     0B10 540F      1500	ANL	A,#0Fh
     0B12 2430      1501	ADD	A,#30h	;convert dec to ASCII
     0B14 F522      1502	MOV	BUFFER+2,A	;digit1
     0B16 750F03    1503	MOV	RESULTLEN,#03
     0B19 22        1504	RET
                    1505	;--------------------
     0B1A           1506	ENGSPEED:	;[(B1x256) + B2] / 4
     0B1A E50D      1507	MOV	A,B1
     0B1C 75F004    1508	MOV	B,#04h
     0B1F 84        1509	DIV	AB	;B1/4  fraction in B
     0B20 F583      1510	MOV	DPH,A	;keep A in DPH
     0B22 7440      1511	MOV	A,#40h	
     0B24 A4        1512	MUL	AB	;A = B x #40h   Result in BA
     0B25 FC        1513	MOV	R4,A	;keep result in R4
     0B26 E50E      1514	MOV	A,B2	
     0B28 75F004    1515	MOV	B,#04h
     0B2B 84        1516	DIV	AB
     0B2C 2C        1517	ADD	A,R4	;B2/4 + R4
     0B2D F582      1518	MOV	DPL,A	;keep A in DPL
     0B2F 121078    1519	CALL	HTOD	;Result  in R2,R3 then convert to ASCII
     0B32 EA        1520	MOV	A,R2	;digit1
     0B33 C4        1521	SWAP	A
     0B34 540F      1522	ANL	A,#0Fh
     0B36 6007      1523	JZ	$+9	;IF A = 0 then skip to BUFFER = #17h
     0B38 2430      1524	ADD	A,#30h	;convert dec to ASCII
     0B3A F520      1525	MOV	BUFFER,A	;digit1
     0B3C 020B42    1526	JMP	$+6
     0B3F 752017    1527	MOV	BUFFER,#17h	;Result is 0 then put SPACE
     0B42 EA        1528	MOV	A,R2	;digit2
     0B43 540F      1529	ANL	A,#0Fh
     0B45 2430      1530	ADD	A,#30h	;convert dec to ASCII
     0B47 F521      1531	MOV	BUFFER+1,A	;digit2
     0B49 EB        1532	MOV	A,R3	;digit3
     0B4A C4        1533	SWAP	A

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  27
xmeter16.asm                                    

     0B4B 540F      1534	ANL	A,#0Fh
     0B4D 2430      1535	ADD	A,#30h	;convert dec to ASCII
     0B4F F522      1536	MOV	BUFFER+2,A	;digit3
     0B51 EB        1537	MOV	A,R3	;digit4
     0B52 540F      1538	ANL	A,#0Fh
     0B54 2430      1539	ADD	A,#30h	;convert dec to ASCII
     0B56 F523      1540	MOV	BUFFER+3,A	;digit4
     0B58 750F04    1541	MOV	RESULTLEN,#04
     0B5B 22        1542	RET
                    1543	;-------------------
     0B5C           1544	IGNTIME:		;(B1 / 2) -64h
     0B5C E50D      1545	MOV 	A,B1
     0B5E 75F002    1546	MOV	B,#02h
     0B61 84        1547	DIV	AB
     0B62 C3        1548	CLR	C
     0B63 9440      1549	SUBB	A,#64
                    1550	;Sign checking
     0B65 4007      1551	JC	$+9	; OV set then negative sign
     0B67 75202B    1552	MOV	BUFFER,#2Bh	;+sign
     0B6A 020B76    1553	JMP	POS
     0B6D 75202D    1554	MOV	BUFFER,#2Dh	;-Sign
     0B70 FC        1555	MOV	R4,A
     0B71 74FF      1556	MOV	A,#0FFh
     0B73 9C        1557	SUBB	A,R4
     0B74 2402      1558	ADD	A,#02h		;correction
                    1559	
     0B76           1560	POS:
     0B76 900000    1561	MOV	DPTR,#0000h
     0B79 F582      1562	MOV	DPL,A
     0B7B FC        1563	MOV	R4,A		;keep A in R4
     0B7C 121078    1564	CALL	HTOD	;convert hex to Decimal (R1,R2,R3)
     0B7F EB        1565	MOV	A,R3
     0B80 C4        1566	SWAP	A
     0B81 540F      1567	ANL	A,#0Fh
     0B83 2430      1568	ADD	A,#30h	;convert dec to ASCII
     0B85 F521      1569	MOV	BUFFER+1,A	;digit2
     0B87 EB        1570	MOV	A,R3
     0B88 540F      1571	ANL	A,#0Fh
     0B8A 2430      1572	ADD	A,#30h	;convert dec to ASCII
     0B8C F522      1573	MOV	BUFFER+2,A	;digit1
     0B8E 750F03    1574	MOV	RESULTLEN,#03
     0B91 22        1575	RET
                    1576	;-------------------------
     0B92           1577	AIRFLOW:		;[(B1x256)+B2]/100
     0B92 850D83    1578	MOV	DPH,B1
     0B95 850E82    1579	MOV	DPL,B2	;keep A in DPL
     0B98 121078    1580	CALL	HTOD	;Result  in R2,R3 then convert to ASCII
     0B9B E9        1581	MOV	A,R1	;digit1
     0B9C 6007      1582	JZ	$+9	;IF A = 0 then skip to BUFFER = #17h
     0B9E 2430      1583	ADD	A,#30h	;convert dec to ASCII
     0BA0 F520      1584	MOV	BUFFER,A	;digit1
     0BA2 020BA8    1585	JMP	$+6
     0BA5 752017    1586	MOV	BUFFER,#17h	;Result is 0 then put SPACE
                    1587	
     0BA8 EA        1588	MOV	A,R2	;digit2
     0BA9 C4        1589	SWAP	A
     0BAA 540F      1590	ANL	A,#0Fh
     0BAC AF20      1591	MOV	R7,BUFFER	;check 1digit is zero or not
     0BAE BF1702    1592	CJNE	R7,#17h,$+5	;if BUFFER <> space then jump to ADD  A,#20h

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  28
xmeter16.asm                                    

     0BB1 6007      1593	JZ	$+9
     0BB3 2430      1594	ADD	A,#30h	;convert dec to ASCII
     0BB5 F521      1595	MOV	BUFFER+1,A
     0BB7 020BBD    1596	JMP	$+6
     0BBA 752117    1597	MOV	BUFFER+1,#17h	;Result is 0 then put SPACE
     0BBD EA        1598	MOV	A,R2	;digit4
     0BBE 540F      1599	ANL	A,#0Fh
     0BC0 2430      1600	ADD	A,#30h	;convert dec to ASCII
     0BC2 F522      1601	MOV	BUFFER+2,A	;digit2
     0BC4 EB        1602	MOV	A,R3	;digit5
     0BC5 C4        1603	SWAP	A
     0BC6 540F      1604	ANL	A,#0Fh
     0BC8 2430      1605	ADD	A,#30h	;convert dec to ASCII
     0BCA F524      1606	MOV	BUFFER+4,A	;digit3
     0BCC 75232E    1607	MOV	BUFFER+3,#2Eh	;full stop
     0BCF 750F05    1608	MOV	RESULTLEN,#05
     0BD2 22        1609	RET
                    1610	;-------------------------
     0BD3           1611	CATTEMP:	;[(B1x256)+B2]/10 - 40
     0BD3 850D83    1612	MOV	DPH,B1
     0BD6 850E82    1613	MOV	DPL,B2
     0BD9 121078    1614	CALL	HTOD	;Result  in R2,R3 then convert to ASCII
                    1615	;change R2 to Hex, then -4 and change back to dec
     0BDC EA        1616	MOV A, R2
     0BDD 75F010    1617	MOV B,#10h
     0BE0 84        1618	DIV AB
     0BE1 AAF0      1619	MOV R2, B
     0BE3 75F00A    1620	MOV B,#0Ah
     0BE6 A4        1621	MUL AB
     0BE7 2A        1622	ADD A, R2 ; now return hex
     0BE8 9404      1623	SUBB A,#04h; as equation
                    1624	
     0BEA 75F00A    1625	MOV B,#0Ah
     0BED 84        1626	DIV AB
     0BEE AAF0      1627	MOV R2, B
     0BF0 75F010    1628	MOV B,#10h
     0BF3 A4        1629	MUL AB
     0BF4 2A        1630	ADD A, R2 ; now return DEC
                    1631	
     0BF5 C4        1632	SWAP	A; digit1
     0BF6 540F      1633	ANL	A,#0Fh
     0BF8 6007      1634	JZ	$+9	;IF A = 0 then skip to BUFFER = #17h
     0BFA 2430      1635	ADD	A,#30h	;convert dec to ASCII
     0BFC F520      1636	MOV	BUFFER,A	;digit1
     0BFE 020C04    1637	JMP	$+6
     0C01 752017    1638	MOV	BUFFER,#17h	;Result is 0 then put SPACE
     0C04 EA        1639	MOV	A,R2	;digit2
     0C05 540F      1640	ANL	A,#0Fh
     0C07 2430      1641	ADD	A,#30h	;convert dec to ASCII
     0C09 F521      1642	MOV	BUFFER+1,A	;digit2
     0C0B EB        1643	MOV	A,R3	;digit3
     0C0C C4        1644	SWAP	A
     0C0D 540F      1645	ANL	A,#0Fh
     0C0F 2430      1646	ADD	A,#30h	;convert dec to ASCII
     0C11 F522      1647	MOV	BUFFER+2,A	;digit3
     0C13 EB        1648	MOV	A,R3	;digit4
     0C14 540F      1649	ANL	A,#0Fh
     0C16 2430      1650	ADD	A,#30h	;convert dec to ASCII
     0C18 F524      1651	MOV	BUFFER+4,A	;digit4

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  29
xmeter16.asm                                    

     0C1A 75232E    1652	MOV	BUFFER+3,#2Eh	;full stop
     0C1D 750F05    1653	MOV	RESULTLEN,#05
     0C20 22        1654	RET
                    1655	;-------------------------
     0C21           1656	ECUVOLT:	;[(B1x256)+B2]/1000
     0C21 850D83    1657	MOV	DPH,B1
     0C24 850E82    1658	MOV	DPL,B2	;keep A in DPL
     0C27 121078    1659	CALL	HTOD	;Result  in R2,R3 then convert to ASCII
     0C2A E9        1660	MOV	A,R1	;digit1
     0C2B 6007      1661	JZ	$+9	;IF A = 0 then skip to BUFFER = #17h
     0C2D 2430      1662	ADD	A,#30h	;convert dec to ASCII
     0C2F F520      1663	MOV	BUFFER,A	;digit1
     0C31 020C37    1664	JMP	$+6
     0C34 752017    1665	MOV	BUFFER,#17h	;Result is 0 then put SPACE
     0C37 EA        1666	MOV	A,R2	;digit2
     0C38 C4        1667	SWAP	A
     0C39 540F      1668	ANL	A,#0Fh
     0C3B 2430      1669	ADD	A,#30h	;convert dec to ASCII
     0C3D F521      1670	MOV	BUFFER+1,A	;digit2
     0C3F EA        1671	MOV	A,R2	;digit4
     0C40 540F      1672	ANL	A,#0Fh
     0C42 2430      1673	ADD	A,#30h	;convert dec to ASCII
     0C44 F523      1674	MOV	BUFFER+3,A	;digit2
     0C46 EB        1675	MOV	A,R3	;digit5
     0C47 C4        1676	SWAP	A
     0C48 540F      1677	ANL	A,#0Fh
     0C4A 2430      1678	ADD	A,#30h	;convert dec to ASCII
     0C4C F524      1679	MOV	BUFFER+4,A	;digit3
     0C4E 75222E    1680	MOV	BUFFER+2,#2Eh	;full stop
     0C51 750F05    1681	MOV	RESULTLEN,#05
     0C54 22        1682	RET
     0C55           1683	CMDEQV:		;calculate commanded equivalent ratio (B1x256 + B2) / 32768
     0C55 E50D      1684	MOV	A,B1
     0C57 75F064    1685	MOV	B,#64h
     0C5A A4        1686	MUL	AB	;B1x100  Result in BA
     0C5B A9F0      1687	MOV	R1,B
     0C5D F8        1688	MOV	R0,A
     0C5E 7B00      1689	MOV	R3,#00h
     0C60 7A80      1690	MOV	R2,#80h
     0C62 121143    1691	CALL	UDIV16    ; {B1x100 /128} Result in R1,R0
     0C65 8983      1692	MOV	DPH,R1
     0C67 8882      1693	MOV	DPL,R0
     0C69 121078    1694	CALL	HTOD	;convert to decimal resultin R1,R2,R3
     0C6C EA        1695	MOV	A,R2
     0C6D 2430      1696	ADD	A,#30h
     0C6F F520      1697	MOV	BUFFER,A	;1st digit
     0C71 75212E    1698	MOV	BUFFER+1,#2Eh	;full stop
     0C74 EB        1699	MOV	A,R3
     0C75 C4        1700	SWAP	A
     0C76 540F      1701	ANL	A,#0Fh
     0C78 2430      1702	ADD	A,#30h
     0C7A F522      1703	MOV	BUFFER+2,A	;2nd digit
     0C7C EB        1704	MOV	A,R3
     0C7D 540F      1705	ANL	A,#0Fh
     0C7F 2430      1706	ADD	A,#30h
     0C81 F523      1707	MOV	BUFFER+3,A	;3rd digit
     0C83 750F04    1708	MOV	RESULTLEN,#04
     0C86 22        1709	RET
     0C87           1710	HO2SVOLT:	;Volt = B1/200

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  30
xmeter16.asm                                    

     0C87 E50D      1711	MOV	A,B1
     0C89 75F064    1712	MOV	B,#100
     0C8C A4        1713	MUL	AB	;result in BA
     0C8D A9F0      1714	MOV	R1,B
     0C8F F8        1715	MOV	R0,A
     0C90 7B00      1716	MOV	R3,#00h
     0C92 7AC8      1717	MOV	R2,#0C8h
     0C94 121143    1718	CALL	UDIV16    ; {B1B2 / #0C8h} Result in R1,R0
     0C97 8983      1719	MOV	DPH,R1
     0C99 8882      1720	MOV	DPL,R0
     0C9B 121078    1721	CALL	HTOD	;convert to decimal resultin R1,R2,R3
     0C9E EA        1722	MOV	A,R2
     0C9F 540F      1723	ANL	A,#0Fh
     0CA1 2430      1724	ADD	A,#30h	;convert dec to ASCII
     0CA3 F520      1725	MOV	BUFFER,A	;digit1
     0CA5 75212E    1726	MOV	BUFFER+1,#2Eh	;full stop
     0CA8 EB        1727	MOV	A,R3
     0CA9 C4        1728	SWAP	A
     0CAA 540F      1729	ANL	A,#0Fh
     0CAC 2430      1730	ADD	A,#30h	;convert dec to ASCII
     0CAE F522      1731	MOV	BUFFER+2,A	;digit2
     0CB0 EB        1732	MOV	A,R3
     0CB1 540F      1733	ANL	A,#0Fh
     0CB3 2430      1734	ADD	A,#30h	;convert dec to ASCII
     0CB5 F523      1735	MOV	BUFFER+3,A	;digit3
     0CB7 750F04    1736	MOV	RESULTLEN,#04
     0CBA 22        1737	RET
                    1738	;**********************************
                    1739	;------------- SUB  PID mode select Line1-----------------------
     0CBB           1740	LINE1:
     0CBB 7480      1741	MOV	A,#LCD_SETDDADDR+0h ;Line1
     0CBD 120F2B    1742	CALL	WRCMD
                    1743	
     0CC0 E508      1744	MOV	A,PID1
     0CC2 B40406    1745	CJNE	A,#04h,$+9
     0CC5 9015DB    1746	MOV	DPTR,#PID04
     0CC8 020DC1    1747	JMP	LINE12
     0CCB B40506    1748	CJNE	A,#05h,$+9
     0CCE 9015F1    1749	MOV	DPTR,#PID05
     0CD1 020DC1    1750	JMP	LINE12
     0CD4 B40606    1751	CJNE	A,#06h,$+9
     0CD7 901607    1752	MOV	DPTR,#PID06
     0CDA 020DC1    1753	JMP	LINE12
     0CDD B40706    1754	CJNE	A,#07h,$+9
     0CE0 90161D    1755	MOV	DPTR,#PID07
     0CE3 020DC1    1756	JMP	LINE12
     0CE6 B40A06    1757	CJNE	A,#0Ah,$+9
     0CE9 901633    1758	MOV	DPTR,#PID0A
     0CEC 020DC1    1759	JMP	LINE12
     0CEF B40B06    1760	CJNE	A,#0Bh,$+9
     0CF2 901649    1761	MOV	DPTR,#PID0B
     0CF5 020DC1    1762	JMP	LINE12
     0CF8 B40C06    1763	CJNE	A,#0Ch,$+9
     0CFB 90165F    1764	MOV	DPTR,#PID0C
     0CFE 020DC1    1765	JMP	LINE12
     0D01 B40D06    1766	CJNE	A,#0Dh,$+9
     0D04 901675    1767	MOV	DPTR,#PID0D
     0D07 020DC1    1768	JMP	LINE12
     0D0A B40E06    1769	CJNE	A,#0Eh,$+9

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  31
xmeter16.asm                                    

     0D0D 90168B    1770	MOV	DPTR,#PID0E
     0D10 020DC1    1771	JMP	LINE12
     0D13 B40F06    1772	CJNE	A,#0Fh,$+9
     0D16 9016A1    1773	MOV	DPTR,#PID0F
     0D19 020DC1    1774	JMP	LINE12
     0D1C B41006    1775	CJNE	A,#10h,$+9
     0D1F 9016B7    1776	MOV	DPTR,#PID10
     0D22 020DC1    1777	JMP	LINE12
     0D25 B41106    1778	CJNE	A,#11h,$+9
     0D28 9016CD    1779	MOV	DPTR,#PID11
     0D2B 020DC1    1780	JMP	LINE12
     0D2E B41406    1781	CJNE	A,#14h,$+9
     0D31 9016E4    1782	MOV	DPTR,#PID14
     0D34 020DC1    1783	JMP	LINE12
     0D37 B41506    1784	CJNE	A,#15h,$+9
     0D3A 9016FA    1785	MOV	DPTR,#PID15
     0D3D 020DC1    1786	JMP	LINE12
     0D40 B42206    1787	CJNE	A,#22h,$+9
     0D43 901830    1788	MOV	DPTR,#TFT
     0D46 020DC1    1789	JMP	LINE12
     0D49 B42306    1790	CJNE	A,#23h,$+9
     0D4C 901710    1791	MOV	DPTR,#PID23
     0D4F 020DC1    1792	JMP	LINE12
     0D52 B42C06    1793	CJNE	A,#2Ch,$+9
     0D55 901726    1794	MOV	DPTR,#PID2C
     0D58 020DC1    1795	JMP	LINE12
     0D5B B42D06    1796	CJNE	A,#2Dh,$+9
     0D5E 90173C    1797	MOV	DPTR,#PID2D
     0D61 020DC1    1798	JMP	LINE12
     0D64 B42E06    1799	CJNE	A,#2Eh,$+9
     0D67 901752    1800	MOV	DPTR,#PID2E
     0D6A 020DC1    1801	JMP	LINE12
     0D6D B42F06    1802	CJNE	A,#2Fh,$+9
     0D70 901768    1803	MOV	DPTR,#PID2F
     0D73 020DC1    1804	JMP	LINE12
     0D76 B43306    1805	CJNE	A,#33h,$+9
     0D79 90177E    1806	MOV	DPTR,#PID33
     0D7C 020DC1    1807	JMP	LINE12
     0D7F B43C06    1808	CJNE	A,#3Ch,$+9
     0D82 901794    1809	MOV	DPTR,#PID3C
     0D85 020DC1    1810	JMP	LINE12
     0D88 B43D06    1811	CJNE	A,#3Dh,$+9
     0D8B 9017AA    1812	MOV	DPTR,#PID3D
     0D8E 020DC1    1813	JMP	LINE12
     0D91 B44206    1814	CJNE	A,#42h,$+9
     0D94 9017C0    1815	MOV	DPTR,#PID42
     0D97 020DC1    1816	JMP	LINE12
     0D9A B44306    1817	CJNE	A,#43h,$+9
     0D9D 9017D6    1818	MOV	DPTR,#PID43
     0DA0 020DC1    1819	JMP	LINE12
     0DA3 B44406    1820	CJNE	A,#44h,$+9
     0DA6 9017EC    1821	MOV	DPTR,#PID44
     0DA9 020DC1    1822	JMP	LINE12
     0DAC B44506    1823	CJNE	A,#45h,$+9
     0DAF 901804    1824	MOV	DPTR,#PID45
     0DB2 020DC1    1825	JMP	LINE12
     0DB5 B44606    1826	CJNE	A,#46h,$+9
     0DB8 90181A    1827	MOV	DPTR,#PID46
     0DBB 020DC1    1828	JMP	LINE12

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  32
xmeter16.asm                                    

     0DBE 901846    1829	MOV	DPTR,#NODATA
     0DC1           1830	LINE12:
     0DC1 120ED3    1831	CALL	WRSTR		;write to LCD 1 Line
     0DC4 890B      1832	MOV	WRADDL1,R1	;keep write address from R1
     0DC6 22        1833	RET
                    1834	;*************************************
                    1835	;---SUB  PID mode select Line2
     0DC7           1836	LINE2:
     0DC7 74C0      1837	MOV	A,#LCD_SETDDADDR+40h ;Line2
     0DC9 120F2B    1838	CALL	WRCMD
                    1839	
     0DCC E509      1840	MOV	A,PID2
     0DCE B40406    1841	CJNE	A,#04h,$+9
     0DD1 9015DB    1842	MOV	DPTR,#PID04
     0DD4 020ECD    1843	JMP	LINE22
     0DD7 B40506    1844	CJNE	A,#05h,$+9
     0DDA 9015F1    1845	MOV	DPTR,#PID05
     0DDD 020ECD    1846	JMP	LINE22
     0DE0 B40606    1847	CJNE	A,#06h,$+9
     0DE3 901607    1848	MOV	DPTR,#PID06
     0DE6 020ECD    1849	JMP	LINE22
     0DE9 B40706    1850	CJNE	A,#07h,$+9
     0DEC 90161D    1851	MOV	DPTR,#PID07
     0DEF 020ECD    1852	JMP	LINE22
     0DF2 B40A06    1853	CJNE	A,#0Ah,$+9
     0DF5 901633    1854	MOV	DPTR,#PID0A
     0DF8 020ECD    1855	JMP	LINE22
     0DFB B40B06    1856	CJNE	A,#0Bh,$+9
     0DFE 901649    1857	MOV	DPTR,#PID0B
     0E01 020ECD    1858	JMP	LINE22
     0E04 B40C06    1859	CJNE	A,#0Ch,$+9
     0E07 90165F    1860	MOV	DPTR,#PID0C
     0E0A 020ECD    1861	JMP	LINE22
     0E0D B40D06    1862	CJNE	A,#0Dh,$+9
     0E10 901675    1863	MOV	DPTR,#PID0D
     0E13 020ECD    1864	JMP	LINE22
     0E16 B40E06    1865	CJNE	A,#0Eh,$+9
     0E19 90168B    1866	MOV	DPTR,#PID0E
     0E1C 020ECD    1867	JMP	LINE22
     0E1F B40F06    1868	CJNE	A,#0Fh,$+9
     0E22 9016A1    1869	MOV	DPTR,#PID0F
     0E25 020ECD    1870	JMP	LINE22
     0E28 B41006    1871	CJNE	A,#10h,$+9
     0E2B 9016B7    1872	MOV	DPTR,#PID10
     0E2E 020ECD    1873	JMP	LINE22
     0E31 B41106    1874	CJNE	A,#11h,$+9
     0E34 9016CD    1875	MOV	DPTR,#PID11
     0E37 020ECD    1876	JMP	LINE22
     0E3A B41406    1877	CJNE	A,#14h,$+9
     0E3D 9016E4    1878	MOV	DPTR,#PID14
     0E40 020ECD    1879	JMP	LINE22
     0E43 B41506    1880	CJNE	A,#15h,$+9
     0E46 9016FA    1881	MOV	DPTR,#PID15
     0E49 020ECD    1882	JMP	LINE22
     0E4C B42206    1883	CJNE	A,#22h,$+9
     0E4F 901830    1884	MOV	DPTR,#TFT
     0E52 020ECD    1885	JMP	LINE22
     0E55 B42306    1886	CJNE	A,#23h,$+9
     0E58 901710    1887	MOV	DPTR,#PID23

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  33
xmeter16.asm                                    

     0E5B 020ECD    1888	JMP	LINE22
     0E5E B42C06    1889	CJNE	A,#2Ch,$+9
     0E61 901726    1890	MOV	DPTR,#PID2C
     0E64 020ECD    1891	JMP	LINE22
     0E67 B42D06    1892	CJNE	A,#2Dh,$+9
     0E6A 90173C    1893	MOV	DPTR,#PID2D
     0E6D 020ECD    1894	JMP	LINE22
     0E70 B42E06    1895	CJNE	A,#2Eh,$+9
     0E73 901752    1896	MOV	DPTR,#PID2E
     0E76 020ECD    1897	JMP	LINE22
     0E79 B42F06    1898	CJNE	A,#2Fh,$+9
     0E7C 901768    1899	MOV	DPTR,#PID2F
     0E7F 020ECD    1900	JMP	LINE22
     0E82 B43306    1901	CJNE	A,#33h,$+9
     0E85 90177E    1902	MOV	DPTR,#PID33
     0E88 020ECD    1903	JMP	LINE22
     0E8B B43C06    1904	CJNE	A,#3Ch,$+9
     0E8E 901794    1905	MOV	DPTR,#PID3C
     0E91 020ECD    1906	JMP	LINE22
     0E94 B43D06    1907	CJNE	A,#3Dh,$+9
     0E97 9017AA    1908	MOV	DPTR,#PID3D
     0E9A 020ECD    1909	JMP	LINE22
     0E9D B44206    1910	CJNE	A,#42h,$+9
     0EA0 9017C0    1911	MOV	DPTR,#PID42
     0EA3 020ECD    1912	JMP	LINE22
     0EA6 B44306    1913	CJNE	A,#43h,$+9
     0EA9 9017D6    1914	MOV	DPTR,#PID43
     0EAC 020ECD    1915	JMP	LINE22
     0EAF B44406    1916	CJNE	A,#44h,$+9
     0EB2 9017EC    1917	MOV	DPTR,#PID44
     0EB5 020ECD    1918	JMP	LINE22
     0EB8 B44506    1919	CJNE	A,#45h,$+9
     0EBB 901804    1920	MOV	DPTR,#PID45
     0EBE 020ECD    1921	JMP	LINE22
     0EC1 B44606    1922	CJNE	A,#46h,$+9
     0EC4 90181A    1923	MOV	DPTR,#PID46
     0EC7 020ECD    1924	JMP	LINE22
     0ECA 901846    1925	MOV	DPTR,#NODATA
     0ECD           1926	LINE22:
     0ECD 120ED3    1927	CALL	WRSTR		;Write to LCD Line2
     0ED0 890C      1928	MOV	WRADDL2,R1	;keep write address from R1
     0ED2 22        1929	RET
                    1930	;-----------------------
                    1931	;Write string line to LCD & read WRADDR sub routine (INPUT   MOV DPTR,#xxxxx)
                    1932	;Uses R0 for pointer R1 for WRADDR
     0ED3           1933	WRSTR:
     0ED3 7820      1934	MOV	R0,#BUFFER	
     0ED5           1935	WRSTR1:	;Load string to buffer
     0ED5 E4        1936	CLR	 A
     0ED6 93        1937	MOVC	 A,@A+DPTR	;read from table
     0ED7 F6        1938	MOV	@R0,A
     0ED8 B40D03    1939	CJNE	 A,#0Dh,$+6
     0EDB 020EE2    1940	JMP	WRSTR2
     0EDE A3        1941	INC	DPTR
     0EDF 08        1942	INC	R0
     0EE0 80F3      1943	JMP	WRSTR1
     0EE2           1944	WRSTR2:  ;write buffer to LCD
     0EE2 08        1945	INC	R0
     0EE3 760D      1946	MOV	@R0,#0Dh

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  34
xmeter16.asm                                    

     0EE5 A3        1947	INC	DPTR
     0EE6 E4        1948	CLR	A
     0EE7 93        1949	MOVC	 A,@A+DPTR
     0EE8 F9        1950	MOV	R1,A	; for use to write calculated data to any DDRAM address
     0EE9 7820      1951	MOV	R0,#BUFFER	;point to buffer
     0EEB           1952	WRSTR3:
     0EEB E6        1953	MOV	A,@R0		; A = data in iram
     0EEC B40D01    1954	CJNE	A,#0Dh,$+4
     0EEF 22        1955	RET			;return back
                    1956	;write char to LCD
     0EF0 D2A2      1957	SETB	EN
     0EF2 00        1958	NOP
     0EF3 D2A1      1959	SETB	RS
     0EF5 00        1960	NOP
     0EF6 F580      1961	MOV	LCDDATA,A
     0EF8 00        1962	NOP
     0EF9 C2A2      1963	CLR	EN
     0EFB 121051    1964	CALL	DEL5m 
                    1965	;-----
     0EFE 08        1966	INC	R0		;next char
     0EFF 80EA      1967	JMP	WRSTR3
                    1968	;********************************
                    1969	;Write & Scroll string line to LCD sub routine (INPUT   MOV DPTR,#xxxxx)
     0F01           1970	WRSCR:
     0F01 7820      1971	MOV	R0,#BUFFER	
     0F03           1972	WRSCR1:	;Load string to buffer
     0F03 E4        1973	CLR	 A
     0F04 93        1974	MOVC	 A,@A+DPTR	;read from table
     0F05 F6        1975	MOV	@R0,A
     0F06 B40D03    1976	CJNE	 A,#0Dh,$+6
     0F09 020F10    1977	JMP	WRSCR2
     0F0C A3        1978	INC	DPTR
     0F0D 08        1979	INC	R0
     0F0E 80F3      1980	JMP	WRSCR1
     0F10           1981	WRSCR2:  ;write buffer to LCD
     0F10 08        1982	INC	R0
     0F11 760D      1983	MOV	@R0,#0Dh
     0F13 7820      1984	MOV	R0,#BUFFER	;point to buffer
     0F15           1985	WRSCR3:
     0F15 E6        1986	MOV	A,@R0		; A = data in iram
     0F16 B40D01    1987	CJNE	A,#0Dh,$+4	
     0F19 22        1988	RET
                    1989	;write char to LCD
     0F1A D2A2      1990	SETB	EN
     0F1C 00        1991	NOP
     0F1D D2A1      1992	SETB	RS
     0F1F 00        1993	NOP
     0F20 F580      1994	MOV	LCDDATA,A
     0F22 00        1995	NOP
     0F23 C2A2      1996	CLR	EN
     0F25 121067    1997	CALL	DEL100m
                    1998	;-----
     0F28 08        1999	INC	R0		;next char
     0F29 80EA      2000	JMP	WRSCR3
                    2001	;********************************
     0F2B           2002	WRCMD:	;write command  INPUT ACC
     0F2B D2A2      2003	SETB	EN
     0F2D 00        2004	NOP
     0F2E C2A1      2005	CLR	RS

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  35
xmeter16.asm                                    

     0F30 00        2006	NOP
     0F31 F580      2007	MOV	LCDDATA,A
     0F33 00        2008	NOP
     0F34 C2A2      2009	CLR	EN
     0F36 121067    2010	CALL	DEL100m
     0F39 22        2011	RET
                    2012	;********************************
     0F3A           2013	WRCHAR: ;wite data to LCD  INPUT ACC
     0F3A D2A2      2014	SETB	EN
     0F3C 00        2015	NOP
     0F3D D2A1      2016	SETB	RS
     0F3F 00        2017	NOP
     0F40 F580      2018	MOV	LCDDATA,A
     0F42 00        2019	NOP
     0F43 C2A2      2020	CLR	EN
     0F45 121051    2021	CALL	DEL5m
     0F48 22        2022	RET
                    2023	;********************************
                    2024	;get result in buffer and translate to B1,B2
                    2025	;USE	R0,R1
                    2026	;IN 	BUFFER
                    2027	;OUT	B1,B2,PID
     0F49           2028	GETB1B2:
     0F49 E520      2029	MOV	A,BUFFER	;check 41 01 response first
     0F4B B43426    2030	CJNE	A,#34h,MODE22	;If A = "4" then next else jump
     0F4E 751824    2031	MOV	SLEEPCNT,#24h	;Reset sleep mode counter
     0F51 7826      2032	MOV	R0,#BUFFER+6	;point to byte1
     0F53 E6        2033	MOV	A,@R0
     0F54 12100A    2034	CALL	ATOH		;translate 1st byte
     0F57 C4        2035	SWAP	A		;keep data in B7-B4
     0F58 F50D      2036	MOV	B1,A		;keep B7-B4 in BYTE1
     0F5A 08        2037	INC	R0
     0F5B E6        2038	MOV	A,@R0
     0F5C 12100A    2039	CALL	ATOH		;translate 2nd byte
     0F5F 790D      2040	MOV	R1,#B1		;point bo B1
     0F61 D7        2041	XCHD	A,@R1		;keep B3-B0 in BYTE1
                    2042	;---Byte 1 Get OK
     0F62 7829      2043	MOV	R0,#BUFFER+9	;point to byte2
     0F64 E6        2044	MOV	A,@R0
     0F65 12100A    2045	CALL	ATOH		;translate 1st byte
     0F68 C4        2046	SWAP	A		;keep data in B7-B4
     0F69 F50E      2047	MOV	B2,A		;keep B7-B4 in BYTE1
     0F6B 08        2048	INC	R0
     0F6C E6        2049	MOV	A,@R0
     0F6D 12100A    2050	CALL	ATOH		;translate 2nd byte
     0F70 790E      2051	MOV	R1,#B2		;point bo B1
     0F72 D7        2052	XCHD	A,@R1		;keep B3-B0 in BYTE1
     0F73 22        2053	RET
                    2054	;*********adddition for TFT 221E1C******************
                    2055	;respond 62 1E 1C B1 B2
     0F74           2056	MODE22:
     0F74 B43626    2057	CJNE	A,#36h,PWRDOWN	;If A = "6" then next else jump
     0F77 751824    2058	MOV	SLEEPCNT,#24h	;Reset sleep mode counter
     0F7A 7829      2059	MOV	R0,#BUFFER+9	;point to byte1
     0F7C E6        2060	MOV	A,@R0
     0F7D 12100A    2061	CALL	ATOH		;translate 1st byte
     0F80 C4        2062	SWAP	A		;keep data in B7-B4
     0F81 F50D      2063	MOV	B1,A		;keep B7-B4 in BYTE1
     0F83 08        2064	INC	R0

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  36
xmeter16.asm                                    

     0F84 E6        2065	MOV	A,@R0
     0F85 12100A    2066	CALL	ATOH		;translate 2nd byte
     0F88 790D      2067	MOV	R1,#B1		;point bo B1
     0F8A D7        2068	XCHD	A,@R1		;keep B3-B0 in BYTE1
                    2069	;---Byte 1 Get OK
     0F8B 782C      2070	MOV	R0,#BUFFER+12	;point to byte2
     0F8D E6        2071	MOV	A,@R0
     0F8E 12100A    2072	CALL ATOH		;translate 1st byte
     0F91 C4        2073	SWAP	A		;keep data in B7-B4
     0F92 F50E      2074	MOV	B2,A		;keep B7-B4 in BYTE1
     0F94 08        2075	INC	R0
     0F95 E6        2076	MOV	A,@R0
     0F96 12100A    2077	CALL	ATOH		;translate 2nd byte
     0F99 790E      2078	MOV	R1,#B2		;point bo B1
     0F9B D7        2079	XCHD	A,@R1		;keep B3-B0 in BYTE1
     0F9C 22        2080	RET
*******  Assembly error  *******
S,1                 2081	*******************************************
                    2082	
     0F9D           2083	PWRDOWN:	 	;Error mesasge receive then goto sleep mode
     0F9D D51843    2084	DJNZ	SLEEPCNT,NO_DATA
     0FA0 E510      2085	MOV	A,CONFIG		;Check Auto sleep On or OFF
     0FA2 30E43E    2086	JNB	ACC.4,NO_DATA	;If auto sleep mode is off then skip to NODATA
     0FA5 121098    2087	CALL	SOUND_BEEP
     0FA8 7401      2088	MOV	A,#LCD_CLS
     0FAA F12B      2089	CALL	WRCMD
     0FAC 121067    2090	CALL	DEL100m
     0FAF 7480      2091	MOV	A,#LCD_SETDDADDR+0 ;Line 1
     0FB1 F12B      2092	CALL	WRCMD
     0FB3 9018CA    2093	MOV	DPTR,#PDOWN1	;Power Down Mode
     0FB6 D1D3      2094	CALL	WRSTR
     0FB8 74C0      2095	MOV	A,#LCD_SETDDADDR+40h ;Line 2
     0FBA F12B      2096	CALL	WRCMD
     0FBC 9018E0    2097	MOV	DPTR,#PDOWN2	;Power Down Mode
     0FBF D1D3      2098	CALL	WRSTR
     0FC1 121056    2099	CALL	DEL500m
     0FC4 1210A9    2100	CALL	SOUND_TRIG
     0FC7 121056    2101	CALL	DEL500m
     0FCA 1210A9    2102	CALL	SOUND_TRIG
     0FCD 121056    2103	CALL	DEL500m
     0FD0 1210A9    2104	CALL	SOUND_TRIG
     0FD3 121056    2105	CALL	DEL500m
     0FD6 7408      2106	MOV	A,#LCD_SETVISIBLE+000b      ; display off + nocursor + noblink
     0FD8 F12B      2107	CALL	WRCMD
     0FDA C2B6      2108	CLR	LEDUP		;turn off LED
     0FDC C2B7      2109	CLR	LEDDN	
     0FDE D2A3      2110	SETB	BL		;Turn off Back light
                    2111	;MOV	PCON,#02h	;set PCON.1 the power down...........
                    2112	;System shut down here
     0FE0 020FEA    2113	JMP	TURNONCHK	
     0FE3           2114	NO_DATA:
     0FE3 750D00    2115	MOV	B1,#00h
     0FE6 750E00    2116	MOV	B2,#00h
     0FE9 22        2117	RET
                    2118	;check engine turn on again or not
     0FEA           2119	TURNONCHK:
     0FEA 901310    2120	MOV	DPTR,#CHKCAN
     0FED 121029    2121	CALL	SBLOCK
     0FF0 121049    2122	CALL	RBYTE		;Receive "SEARCHING...."

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  37
xmeter16.asm                                    

     0FF3 B43409    2123	CJNE	A,#34h,$+12	;If A = "4" then start watch dog to make all reset
     0FF6 901338    2124	MOV	DPTR,#SERWS	;send warm start message
     0FF9 121029    2125	CALL	SBLOCK
     0FFC 121289    2126	CALL	WDRESET	;All System Reset Here
     0FFF 75110A    2127	MOV	TEMP1,#10
     1002           2128	DEL5SEC:
     1002 121056    2129	CALL	DEL500m
     1005 D511FA    2130	DJNZ	TEMP1,DEL5SEC
     1008 80E0      2131	JMP	TURNONCHK	;check turn on key again
                    2132	;add some thing here
                    2133	
                    2134	
                    2135	;-------------ASCII to HEX-----------------------------
                    2136	;IN = A,R1
                    2137	;OUT = A
     100A           2138	ATOH:			;ASCII to Hex Converter
     100A 75F041    2139	MOV	B,#41h		
     100D 84        2140	DIV	AB
     100E B40104    2141	CJNE	A,#01h,ATOF2	;IF A=>B then goto ATOF2
     1011 E6        2142	MOV	A,@R0		;data in buffer
     1012 9437      2143	SUBB	A,#37h
     1014 22        2144	RET
     1015           2145	ATOF2:
     1015 E6        2146	MOV	A,@R0		;data in buffer
     1016 942F      2147	SUBB	A,#2Fh
     1018 22        2148	RET		 
                    2149	;--------------HexToASCII----------------
                    2150	;IN = A,R7
                    2151	;OUT = A
     1019           2152	HTOA:
     1019 FF        2153	MOV	R7,A
     101A 75F00A    2154	MOV	B,#0Ah		;Hex value to ASCII Code Sub Routine Use ACC
     101D 84        2155	DIV	AB
     101E B40104    2156	CJNE	A,#01h,ATOF	;If A=>B then goto ATOF
     1021 EF        2157	MOV	A,R7
     1022 2437      2158	ADD	A,#37h		;Result in A  (for 0 - 9)
     1024 22        2159	RET
     1025           2160	ATOF:
     1025 EF        2161	MOV	A,R7		;Return IRAM data to A
     1026 2430      2162	ADD	A,#30h		;REsult in A  (for  A-F)
     1028 22        2163	RET
                    2164	; ********** SBLOCK SUB **********
                    2165	; SEND BLOCK
                    2166	; IN  = DPTR ROM-ADDRESS (END BY 0 OR 0DH)
                    2167	; OUT = DPTR (NEXT)
                    2168	; REG = A,DPTR
     1029           2169	SBLOCK:
     1029 E4        2170	CLR	 A
     102A 93        2171	MOVC 	 A,@A+DPTR
     102B 7001      2172	JNZ	SBLOCK1
     102D 22        2173	RET                      		;EXIT BY 0
     102E           2174	SBLOCK1:
     102E A3        2175	INC	DPTR		;next char
     102F 121041    2176	CALL	SBYTE		;send char
     1032 80F5      2177	JMP	SBLOCK
                    2178	;===========RBLOCK=========
                    2179	; IN  = A
                    2180	; OUT = BUFFER
                    2181	; REG = R0,DPTR

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  38
xmeter16.asm                                    

     1034           2182	RBLOCK:
     1034 7820      2183	MOV	R0,#BUFFER	;R0 point to buffer memory address
     1036           2184	RBLOCK1:
     1036 121049    2185	CALL	RBYTE		;wait for incoming char
     1039 B43E01    2186	CJNE	A,#3Eh,RBLOCK2	;If A = '>' then end message
     103C 22        2187	RET                      		;EXIT BY '>'
     103D           2188	RBLOCK2:
     103D F6        2189	MOV	@R0,A		;Save char in buffer
     103E 08        2190	INC	R0		;point next address
     103F 80F5      2191	JMP	RBLOCK1
                    2192	 ; ----------------------------------
     1041           2193	SBYTE:   			;Send Data from RS232
     1041 3099FD    2194	JNB 	TI,$    	 	;WAIT FOR SEND OK
     1044 C299      2195	CLR 	TI
     1046 F599      2196	MOV        SBUF,A
     1048 22        2197	RET
                    2198	;------------------------------------
     1049           2199	RBYTE:			;Receive Data from RS232
     1049 3098FD    2200	JNB    	RI,$                ;WAIT FOR RECEIVE OK
     104C C298      2201	CLR   	RI
     104E E599      2202	MOV    	A,SBUF
     1050 22        2203	RET
                    2204	;-------- Delay 50 usec-----------------------------------
                    2205	;USE = R6,R7
     1051           2206	DEL5m:	
     1051 7E1F      2207	MOV	R6,#1Fh
     1053 DEFE      2208	DJNZ	R6,$
     1055 22        2209	RET
                    2210	;----------delay 0.5 sec-----------------------------
                    2211	;USE = R4,R5,R6,R7
     1056           2212	DEL500m:
     1056 7C0A      2213	MOV	R4,#0Ah 
     1058           2214	DEL500m1:
     1058 7D64      2215	MOV	R5,#064h
     105A           2216	DEL500m3:
     105A 7F03      2217	MOV	R7,#03h
     105C           2218	DEL500m2:
     105C 7E98      2219	MOV	R6,#098h
     105E DEFE      2220	DJNZ	R6,$
     1060 DFFA      2221	DJNZ	R7,DEL500m2
     1062 DDF6      2222	DJNZ         R5,DEL500m3
     1064 DCF2      2223	DJNZ	R4,DEL500m1
     1066 22        2224	RET
                    2225	;----------delay 0.1 sec-----------------------------
                    2226	;USE = R4,R5,R6,R7
     1067           2227	DEL100m:
     1067 7C02      2228	MOV	R4,#02h 
     1069           2229	DEL100m1:
     1069 7D32      2230	MOV	R5,#032h
     106B           2231	DEL100m3:
     106B 7F03      2232	MOV	R7,#03h
     106D           2233	DEL100m2:
     106D 7E98      2234	MOV	R6,#098h
     106F DEFE      2235	DJNZ	R6,$
     1071 DFFA      2236	DJNZ	R7,DEL100m2
     1073 DDF6      2237	DJNZ          R5,DEL100m3
     1075 DCF2      2238	DJNZ	R4,DEL100m1
     1077 22        2239	RET
                    2240	;---------Hex to Dec------------------

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  39
xmeter16.asm                                    

                    2241	;IN = DPTR		;FFFF
                    2242	;OUT = R1,R2,R3		;R1=6  R2=55 R3=35
                    2243	;REG = A,R0,R1-R5,DPTR
     1078           2244	HTOD:
     1078 7400      2245	MOV	A,#00h
     107A F9        2246	MOV	R1,A
     107B FA        2247	MOV	R2,A
     107C FB        2248	MOV	R3,A
     107D 7C10      2249	MOV	R4,#16
     107F           2250	HTOD1:
     107F E582      2251	MOV	A,DPL
     1081 33        2252	RLC	A
     1082 F582      2253	MOV	DPL,A
     1084 E583      2254	MOV	A,DPH
     1086 33        2255	RLC	A
     1087 F583      2256	MOV	DPH,A
     1089 7D03      2257	MOV	R5,#3
     108B 7803      2258	MOV	R0,#3
     108D           2259	HTOD2:
     108D E6        2260	MOV	A,@R0
     108E 35E0      2261	ADDC	A,ACC
     1090 D4        2262	DA	A
     1091 F6        2263	MOV	@R0,A
     1092 18        2264	DEC	R0
     1093 DDF8      2265	DJNZ	R5,HTOD2
     1095 DCE8      2266	DJNZ	R4,HTOD1
     1097 22        2267	RET
                    2268	;********************************
     1098           2269	SOUND_BEEP:
     1098 C2A4      2270	CLR  	 BUZZER	     ;buzzer on
     109A 7B07      2271	MOV	R3,#07h
     109C           2272	DELS1:
     109C 7CFF      2273	MOV	R4,#0FFh
     109E           2274	SOUND_BEEP1:  
     109E 7DFF      2275	MOV	R5,#0FFh         
     10A0 DDFE      2276	DJNZ	R5,$
     10A2 DCFA      2277	DJNZ	R4,SOUND_BEEP1
     10A4 DBF6      2278	DJNZ	R3,DELS1
     10A6 D2A4      2279	SETB   	 BUZZER	    ;buzzer off
     10A8 22        2280	RET
                    2281	;************************************************
     10A9           2282	SOUND_TRIG:
     10A9 E510      2283	MOV	A,CONFIG
     10AB 20E103    2284	JB	ACC.1,SOUND_TRIG0	;If BEEP on Do next
     10AE 1167      2285	CALL	DEL100m	;delay compensate trig loop
     10B0 22        2286	RET
     10B1           2287	SOUND_TRIG0:
     10B1 C2A4      2288	CLR  	 BUZZER	     ;buzzer on
     10B3 7B30      2289	MOV	 R3,#030h                                    ;SOUND LOOP
     10B5           2290	SOUND_TRIG1:  
     10B5 7CFF      2291	MOV	R4,#0FFh
     10B7 DCFE      2292	DJNZ	R4,$
     10B9 DBFA      2293	DJNZ	 R3,SOUND_TRIG1 	             ;NEXT LOOP
     10BB D2A4      2294	SETB   	 BUZZER	    ;buzzer off
     10BD 22        2295	RET 			             ;back to main routine	
                    2296	;**********************************************
     10BE           2297	BACKLIGHT: ;toggle back light
     10BE 20A305    2298	JB	BL,BACKLIGHT2
     10C1 D2A3      2299	SETB	BL	;turn off

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  40
xmeter16.asm                                    

     10C3 1156      2300	CALL	DEL500m
     10C5 22        2301	RET
     10C6           2302	BACKLIGHT2:
     10C6 C2A3      2303	CLR	BL	;turn on
     10C8 1156      2304	CALL	DEL500m
     10CA 22        2305	RET
                    2306	;*********************************************
     10CB           2307	LIGHT1:	;warning light up  checking compare value by diviation 
     10CB E510      2308	MOV	A,CONFIG		;check PID warning lamp status on/off
     10CD 30E32C    2309	JNB	ACC.3,LIGHT11 	;off then jump LIGHT11
                    2310	;INPUT current pid in ACC 
     10D0 E50D      2311	MOV	A,B1	;load first byte only
     10D2 8516F0    2312	MOV	B,LIMITCHK1
     10D5 84        2313	DIV	AB
     10D6 FF        2314	MOV	R7,A	;keep result in R7
     10D7 E508      2315	MOV	A,PID1
     10D9 B40A03    2316	CJNE	A,#0Ah,$+6
     10DC 0210FF    2317	JMP	LOWLIMIT1
     10DF B41403    2318	CJNE	A,#014h,$+6
     10E2 0210FF    2319	JMP	LOWLIMIT1
     10E5 B41503    2320	CJNE	A,#015h,$+6
     10E8 0210FF    2321	JMP	LOWLIMIT1
     10EB B42F03    2322	CJNE	A,#02Fh,$+6
     10EE 0210FF    2323	JMP	LOWLIMIT1
     10F1 B44203    2324	CJNE	A,#042h,$+6
     10F4 0210FF    2325	JMP	LOWLIMIT1
                    2326	;check high limit
     10F7 EF        2327	MOV	A,R7	;return RESULT
     10F8 6002      2328	JZ	LIGHT11	;if A>0 then OK  , if A=0 then Over limit-> warning on
     10FA D2B6      2329	SETB	LEDUP
     10FC           2330	LIGHT11:
     10FC C2B7      2331	CLR	LEDDN	;off LEDDN
     10FE 22        2332	RET
     10FF           2333	LOWLIMIT1:	;check lowlimit
     10FF EF        2334	MOV	A,R7
     1100 70FA      2335	JNZ	LIGHT11 ;if A = 0 then lower limit -> warning on
     1102 D2B6      2336	SETB	LEDUP
     1104 C2B7      2337	CLR	LEDDN	;off LEDDN
     1106 22        2338	RET
                    2339	;*********************************************
     1107           2340	LIGHT2:	;warning light down checking
     1107 E510      2341	MOV	A,CONFIG		;check PID warning lamp status on/off
     1109 30E32C    2342	JNB	ACC.3,LIGHT22 	;off then jump LIGHT22
                    2343	;INPUT current pid in ACC
     110C E50D      2344	MOV	A,B1	;load first byte only
     110E 8517F0    2345	MOV	B,LIMITCHK2
     1111 84        2346	DIV	AB
     1112 FF        2347	MOV	R7,A	;keep result in R7
     1113 E509      2348	MOV	A,PID2
     1115 B40A03    2349	CJNE	A,#0Ah,$+6
     1118 02113B    2350	JMP	LOWLIMIT2
     111B B41403    2351	CJNE	A,#014h,$+6
     111E 02113B    2352	JMP	LOWLIMIT2
     1121 B41503    2353	CJNE	A,#015h,$+6
     1124 02113B    2354	JMP	LOWLIMIT2
     1127 B42F03    2355	CJNE	A,#02Fh,$+6
     112A 02113B    2356	JMP	LOWLIMIT2
     112D B44203    2357	CJNE	A,#042h,$+6
     1130 02113B    2358	JMP	LOWLIMIT2

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  41
xmeter16.asm                                    

                    2359	;check high limit
     1133 EF        2360	MOV	A,R7	;return RESULT
     1134 6002      2361	JZ	LIGHT22	;if A>0 then OK  , if A=0 then Over limit-> warning on
     1136 D2B7      2362	SETB	LEDDN
     1138           2363	LIGHT22:
     1138 C2B6      2364	CLR	LEDUP	;off LEDDN
     113A 22        2365	RET
     113B           2366	LOWLIMIT2:	;check lowlimit
     113B EF        2367	MOV	A,R7
     113C 70FA      2368	JNZ	LIGHT22 ;if A = 0 then lower limit -> warning on
     113E D2B7      2369	SETB	LEDDN
     1140 C2B6      2370	CLR	LEDUP	;off LEDDN
     1142 22        2371	RET
                    2372	;*********************************************
                    2373	
                    2374	; subroutine UDIV16
                    2375	; 16-Bit / 16-Bit to 16-Bit Quotient & Remainder Unsigned Divide
                    2376	;
                    2377	; input:    r1, r0 = Dividend X
                    2378	;           r3, r2 = Divisor Y
                    2379	;
                    2380	; output:   r1, r0 = quotient Q of division Q = X / Y
                    2381	;           r3, r2 = remainder 
                    2382	;
                    2383	; alters:   acc, B, dpl, dph, r4, r5, r6, r7, flags
                    2384	;====================================================================
                    2385	
     1143 7F00      2386	UDIV16:        mov     r7, #0          ; clear partial remainder
     1145 7E00      2387	               mov     r6, #0
     1147 75F010    2388	               mov     B, #16          ; set loop count
                    2389	
     114A C3        2390	div_loop:      clr     C               ; clear carry flag
     114B E8        2391	               mov     a, r0           ; shift the highest bit of
     114C 33        2392	               rlc     a               ; the dividend into...
     114D F8        2393	               mov     r0, a
     114E E9        2394	               mov     a, r1
     114F 33        2395	               rlc     a
     1150 F9        2396	               mov     r1, a
     1151 EE        2397	               mov     a, r6           ; ... the lowest bit of the
     1152 33        2398	               rlc     a               ; partial remainder
     1153 FE        2399	               mov     r6, a
     1154 EF        2400	               mov     a, r7
     1155 33        2401	               rlc     a
     1156 FF        2402	               mov     r7, a
     1157 EE        2403	               mov     a, r6           ; trial subtract divisor
     1158 C3        2404	               clr     C               ; from partial remainder
     1159 9A        2405	               subb    a, r2
     115A F582      2406	               mov     dpl, a
     115C EF        2407	               mov     a, r7
     115D 9B        2408	               subb    a, r3
     115E F583      2409	               mov     dph, a
     1160 B3        2410	               cpl     C               ; complement external borrow
     1161 5004      2411	               jnc     div_1           ; update partial remainder if
                    2412	                                       ; borrow
     1163 AF83      2413	               mov     r7, dph         ; update partial remainder
     1165 AE82      2414	               mov     r6, dpl
     1167 EC        2415	div_1:         mov     a, r4           ; shift result bit into partial
     1168 33        2416	               rlc     a               ; quotient
     1169 FC        2417	               mov     r4, a

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  42
xmeter16.asm                                    

     116A ED        2418	               mov     a, r5
     116B 33        2419	               rlc     a
     116C FD        2420	               mov     r5, a
     116D D5F0DA    2421	               djnz    B, div_loop
     1170 ED        2422	               mov     a, r5           ; put quotient in r0, and r1
     1171 F9        2423	               mov     r1, a
     1172 EC        2424	               mov     a, r4
     1173 F8        2425	               mov     r0, a
     1174 EF        2426	               mov     a, r7           ; get remainder, saved before the
     1175 FB        2427	               mov     r3, a           ; last subtraction
     1176 EE        2428	               mov     a, r6
     1177 FA        2429	               mov     r2, a
     1178 22        2430	               ret
                    2431	;===================================================
                    2432	; subroutine UMUL16
                    2433	; 16-Bit x 16-Bit to 32-Bit Product Unsigned Multiply
                    2434	;
                    2435	; input:    r1, r0 = multiplicand X
                    2436	;           r3, r2 = multiplier Y
                    2437	;
                    2438	; output:   r3, r2, r1, r0 = product P = X x Y
                    2439	;
                    2440	; alters:   acc, C
                    2441	;====================================================================
                    2442	
     1179 C0F0      2443	UMUL16:        push    B
     117B C082      2444	               push    dpl
     117D E8        2445	               mov     a, r0
     117E 8AF0      2446	               mov     b, r2
     1180 A4        2447	               mul     ab              ; multiply XL x YL
     1181 C0E0      2448	               push    acc             ; stack result low byte
     1183 C0F0      2449	               push    b               ; stack result high byte
     1185 E8        2450	               mov     a, r0
     1186 8BF0      2451	               mov     b, r3
     1188 A4        2452	               mul     ab              ; multiply XL x YH
     1189 D000      2453	               pop     00H
     118B 28        2454	               add     a, r0
     118C F8        2455	               mov     r0, a
     118D E4        2456	               clr     a
     118E 35F0      2457	               addc    a, b
     1190 F582      2458	               mov     dpl, a
     1192 EA        2459	               mov     a, r2
     1193 89F0      2460	               mov     b, r1
     1195 A4        2461	               mul     ab              ; multiply XH x YL
     1196 28        2462	               add     a, r0
     1197 F8        2463	               mov     r0, a
     1198 E582      2464	               mov     a, dpl
     119A 35F0      2465	               addc    a, b
     119C F582      2466	               mov     dpl, a
     119E E4        2467	               clr     a
     119F 3400      2468	               addc    a, #0
     11A1 C0E0      2469	               push    acc             ; save intermediate carry
     11A3 EB        2470	               mov     a, r3
     11A4 89F0      2471	               mov     b, r1
     11A6 A4        2472	               mul     ab              ; multiply XH x YH
     11A7 2582      2473	               add     a, dpl
     11A9 FA        2474	               mov     r2, a
     11AA D0E0      2475	               pop     acc             ; retrieve carry
     11AC 35F0      2476	               addc    a, b

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  43
xmeter16.asm                                    

     11AE FB        2477	               mov     r3, a
     11AF A900      2478	               mov     r1, 00H
     11B1 D000      2479	               pop     00H             ; retrieve result low byte
     11B3 D082      2480	               pop     dpl
     11B5 D0F0      2481	               pop     B
     11B7 22        2482	               ret
                    2483	;====================================================================
                    2484	; subroutine ADD16
                    2485	; 16-Bit Signed (2's Complement) Addition
                    2486	;
                    2487	; input:     r1, r0 = X
                    2488	;            r3, r2 = Y
                    2489	;
                    2490	; output:    r1, r0 = signed sum S = X + Y
                    2491	;            Carry C is set if the result (S) is out of range
                    2492	;
                    2493	; alters:    acc, C, OV
                    2494	;====================================================================
     11B8 53D0E7    2495	ADD16:         anl    PSW, #0E7H       ; Register Bank 0
     11BB E8        2496	               mov     a, r0           ; load X low byte into acc
     11BC 2A        2497	               add     a, r2           ; add Y low byte
     11BD F8        2498	               mov     r0, a           ; put result in Z low byte
     11BE E9        2499	               mov     a, r1           ; load X high byte into acc
     11BF 3B        2500	               addc    a, r3           ; add Y high byte with carry
     11C0 F9        2501	               mov     r1, a           ; save result in Z high byte
     11C1 A2D2      2502	               mov     C, OV
     11C3 22        2503	               ret
                    2504	;====================================================================
                    2505	;EEPROM 24LC01B  Sub Routine
                    2506	; ********** IPW SUB **********
                    2507	; 24LC01B WRITE
                    2508	;IN   	 R0=  ADDRESS,   R1 = DATA
                    2509	;OUT	 EEPERR  0=OK 1=ERROR
                    2510	; REG = A,R2
     11C4           2511	IPW: 
                    2512	;CLR	EEPWP		;disable write protect
     11C4 121283    2513	CALL	CDEL		;delay
     11C7 D2A5      2514	SETB	EEPSDA             ;START CONDITION
     11C9 D2A6      2515	SETB	EEPSCL
     11CB C2A5      2516	CLR    	EEPSDA
     11CD 121283    2517	CALL   	CDEL				
     11D0 C2A6      2518	CLR    	EEPSCL
     11D2 D2A5      2519	SETB   	EEPSDA
     11D4 74A0      2520	MOV    	A,#10100000B      	;Write Control Code  1010AAAW
     11D6 1211F3    2521	CALL   	IPWRB		;1 Byte Write
     11D9 20140D    2522	JB     	EEPERR,IPW9
     11DC E8        2523	MOV    	A,R0  	           	 ;WORD ADDRESS
     11DD 547F      2524	ANL    	A,#01111111B	;Limit Address to 128 byte only
     11DF 1211F3    2525	CALL   	IPWRB		;1 Byte Write
     11E2 201404    2526	JB     	EEPERR,IPW9
     11E5 E9        2527	MOV   	 A,R1 		 ;DATA
     11E6 1211F3    2528	CALL  	 IPWRB		;1 Byte Write
     11E9           2529	IPW9: 
     11E9 C2A5      2530	CLR	EEPSDA  	 ;STOP CONDITION
     11EB D2A6      2531	SETB   	EEPSCL
     11ED 121283    2532	CALL   	CDEL
     11F0 D2A5      2533	SETB 	EEPSDA
                    2534	;SETB	EEPWP		;ENable write protech
     11F2 22        2535	RET

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  44
xmeter16.asm                                    

                    2536	; ********** IPWRB SUB **********
                    2537	; 24LC01B WRITE 1 BYTE
                    2538	; IN  = A
                    2539	; OUT = EEPERR  0=OK 1=ERROR
                    2540	; REG = A,R2
     11F3           2541	IPWRB: 
     11F3 C214      2542	CLR	EEPERR            ;Reset Error Byte
     11F5 7A08      2543	MOV    	R2,#8
     11F7           2544	IPWRB1:
     11F7 33        2545	RLC    	A
     11F8 92A5      2546	MOV   	EEPSDA,C
     11FA 121273    2547	CALL   	CHIGH             ;CLOCK
     11FD 12127B    2548	CALL   	CLOW
     1200 DAF5      2549	DJNZ   	R2,IPWRB1
     1202 D2A5      2550	SETB   	EEPSDA            ;ACKNOWLEDGE BIT
     1204 121273    2551	CALL   	CHIGH
     1207 30A502    2552	JNB    	EEPSDA,IPWRB2
     120A D214      2553	SETB   	EEPERR
     120C           2554	IPWRB2:
     120C 12127B    2555	CALL   	CLOW
     120F 22        2556	RET
                    2557	; ********** IPR SUB **********
                    2558	;24LC01B READ
                    2559	;IN  = R0  ADDRESS
                    2560	;OUT = R1  DATA
                    2561	; EEPERR  0=OK 1=ERROR
                    2562	; REG = A,R2
     1210           2563	IPR:
     1210 D2A5      2564	SETB  	EEPSDA             ;START CONDITION
     1212 D2A6      2565	SETB   	EEPSCL
     1214 C2A5      2566	CLR    	EEPSDA
     1216 121283    2567	CALL   	CDEL
     1219 C2A6      2568	CLR    	EEPSCL
     121B 74A0      2569	MOV    	A,#10100000B      ;DEVICE ADDRESS 1010AAAW
     121D 31F3      2570	CALL   	IPWRB
     121F 20142A    2571	JB     	EEPERR,IPR9
     1222 E8        2572	MOV    	A,R0              ;WORD ADDRESS
     1223 547F      2573	ANL    	A,#01111111B
     1225 31F3      2574	CALL   	IPWRB
     1227 201422    2575	JB     	EEPERR,IPR9
     122A C2A5      2576	CLR    	EEPSDA             ;STOP CONDITION
     122C D2A6      2577	SETB   	EEPSCL
     122E 121283    2578	CALL   	CDEL
     1231 D2A5      2579	SETB   	EEPSDA
     1233 D2A5      2580	SETB   	EEPSDA             ;START CONDITION
     1235 D2A6      2581	SETB   	EEPSCL
     1237 C2A5      2582	CLR    	EEPSDA
     1239 121283    2583	CALL   	CDEL
     123C C2A6      2584	CLR    	EEPSCL
     123E 74A1      2585	MOV    	A,#10100001B      ;DEVICE ADDRESS 1010AAAR
     1240 31F3      2586	CALL   	IPWRB
     1242 201407    2587	JB     	EEPERR,IPR9
     1245 121256    2588	CALL   	IPRDB             ;Read DATA
     1248 201401    2589	JB     	EEPERR,IPR9
     124B F9        2590	MOV    	R1,A
     124C           2591	IPR9:
     124C C2A5      2592	CLR    	EEPSDA             ;STOP CONDITION
     124E D2A6      2593	SETB   	EEPSCL
     1250 121283    2594	CALL   	CDEL

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  45
xmeter16.asm                                    

     1253 D2A5      2595	SETB   	EEPSDA
     1255 22        2596	RET
                    2597	; ********** IPRDB SUB **********
                    2598	; READ BYTE
                    2599	; OUT = A
                    2600	; EEPERR  0=OK 1=ERROR
                    2601	; REG = A,R2
     1256           2602	IPRDB:   
     1256 C214      2603	CLR    	EEPERR		;reset Error Byte
     1258 7A08      2604	MOV    	R2,#8
     125A           2605	IPRDB1:
     125A 121273    2606	CALL   	CHIGH
     125D A2A5      2607	MOV    	C,EEPSDA
     125F 33        2608	RLC   	 A
     1260 12127B    2609	CALL   	CLOW
     1263 DAF5      2610	DJNZ   	R2,IPRDB1
     1265 D2A5      2611	SETB   	EEPSDA            ;ACKNOWLEDGE BIT (1)
     1267 121273    2612	CALL   	CHIGH
     126A 20A502    2613	JB     	EEPSDA,IPRDB2
     126D D214      2614	SETB   	EEPERR
     126F           2615	IPRDB2:  
     126F 12127B    2616	CALL   	CLOW
     1272 22        2617	RET
                    2618	;********EEPROM Clock***************
     1273           2619	CHIGH:  
     1273 D2A6      2620	SETB   EEPSCL            ;**** SCL HIGH + DELAY ****
     1275 00        2621	NOP
     1276 00        2622	NOP
     1277 00        2623	NOP
     1278 00        2624	NOP
     1279 00        2625	NOP
     127A 22        2626	RET
                    2627	
     127B           2628	CLOW: 
     127B C2A6      2629	CLR    EEPSCL            ;**** SCL LOW + DELAY ****
     127D 00        2630	NOP
     127E 00        2631	NOP
     127F 00        2632	NOP
     1280 00        2633	NOP
     1281 00        2634	NOP
     1282 22        2635	RET
                    2636	
     1283           2637	CDEL:
     1283 00        2638	NOP                      ;**** DELAY ****
     1284 00        2639	NOP
     1285 00        2640	NOP
     1286 00        2641	NOP
     1287 00        2642	NOP
     1288 22        2643	RET
                    2644	;================================================
     1289           2645	WDRESET:	;Reset watchdog timer 
     1289 75A61E    2646	MOV	WDTRST,#01Eh
     128C 75A6E1    2647	MOV	WDTRST,#0E1h
     128F 22        2648	RET
                    2649	;------------------------------------------------------------------
                    2650	;Interprete trouble code
                    2651	;IN = R0  OUT = R1,R2
     1290           2652	INTPDTC:
     1290 B63005    2653	CJNE	@R0,#30h,$+8

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  46
xmeter16.asm                                    

     1293 7950      2654	MOV	R1,#50h	;P char
     1295 7A30      2655	MOV	R2,#30h	;0 char
     1297 22        2656	RET
     1298 B63105    2657	CJNE	@R0,#31h,$+8
     129B 7950      2658	MOV	R1,#50h	;P char
     129D 7A31      2659	MOV	R2,#31h	;1 char
     129F 22        2660	RET
     12A0 B63205    2661	CJNE	@R0,#32h,$+8
     12A3 7950      2662	MOV	R1,#50h	;P char
     12A5 7A32      2663	MOV	R2,#32h	;2 char
     12A7 22        2664	RET
     12A8 B63305    2665	CJNE	@R0,#33h,$+8
     12AB 7950      2666	MOV	R1,#50h	;P char
     12AD 7A33      2667	MOV	R2,#33h	;3 char
     12AF 22        2668	RET
     12B0 B63405    2669	CJNE	@R0,#34h,$+8
     12B3 7943      2670	MOV	R1,#43h	;C char
     12B5 7A30      2671	MOV	R2,#30h	;0 char
     12B7 22        2672	RET
     12B8 B63505    2673	CJNE	@R0,#35h,$+8
     12BB 7943      2674	MOV	R1,#43h	;C char
     12BD 7A31      2675	MOV	R2,#31h	;1 char
     12BF 22        2676	RET
     12C0 B63605    2677	CJNE	@R0,#36h,$+8
     12C3 7943      2678	MOV	R1,#43h	;C char
     12C5 7A32      2679	MOV	R2,#32h	;2 char
     12C7 22        2680	RET
     12C8 B63705    2681	CJNE	@R0,#37h,$+8
     12CB 7943      2682	MOV	R1,#43h	;C char
     12CD 7A33      2683	MOV	R2,#33h	;3 char
     12CF 22        2684	RET
     12D0 B63805    2685	CJNE	@R0,#38h,$+8
     12D3 7942      2686	MOV	R1,#42h	;B char
     12D5 7A30      2687	MOV	R2,#30h	;0 char
     12D7 22        2688	RET
     12D8 B63905    2689	CJNE	@R0,#39h,$+8
     12DB 7942      2690	MOV	R1,#42h	;B char
     12DD 7A31      2691	MOV	R2,#31h	;1 char
     12DF 22        2692	RET
     12E0 B64105    2693	CJNE	@R0,#41h,$+8
     12E3 7942      2694	MOV	R1,#42h	;B char
     12E5 7A32      2695	MOV	R2,#32h	;2 char
     12E7 22        2696	RET
     12E8 B64205    2697	CJNE	@R0,#42h,$+8
     12EB 7942      2698	MOV	R1,#42h	;B char
     12ED 7A33      2699	MOV	R2,#33h	;3 char
     12EF 22        2700	RET
     12F0 B64305    2701	CJNE	@R0,#43h,$+8
     12F3 7955      2702	MOV	R1,#55h	;U char
     12F5 7A30      2703	MOV	R2,#30h	;0 char
     12F7 22        2704	RET
     12F8 B64405    2705	CJNE	@R0,#44h,$+8
     12FB 7955      2706	MOV	R1,#55h	;U char
     12FD 7A31      2707	MOV	R2,#31h	;1 char
     12FF 22        2708	RET
     1300 B64505    2709	CJNE	@R0,#45h,$+8
     1303 7955      2710	MOV	R1,#55h	;U char
     1305 7A32      2711	MOV	R2,#32h	;2 char
     1307 22        2712	RET

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  47
xmeter16.asm                                    

     1308 B64605    2713	CJNE	@R0,#46h,$+8
     130B 7955      2714	MOV	R1,#55h	;U char
     130D 7A33      2715	MOV	R2,#33h	;3 char
     130F 22        2716	RET
                    2717	;================================================
                    2718	;Looking Table
     1310 30313030  2719	CHKCAN:DB "0100",0Dh,00h		;PID send to check CAN connection
     1314 0D00
     1316 41544530  2720	SERINIT1:DB "ATE0",0Dh,00h		;set Echo off
     131A 0D00
     131C 41544C30  2721	SERINIT2:DB "ATL0",0Dh,00h		;set Lind Feed off
     1320 0D00
     1322 41544830  2722	SERINIT3:DB "ATH0",0Dh,00h		;set Msg Header  off
     1326 0D00
     1328 41545354  2723	SERINIT4:DB "ATST00",0DH,00h	;set wait time = 4 msec
     132C 30300D00
     1330 41545350  2724	SERINIT5:DB "ATSPA6",0Dh,00h	;set Default CAN Bus and auto search
     1334 41360D00
     1338 41545753  2725	SERWS:DB "ATWS",0Dh,00h		;ELM warm start message
     133C 0D00
     133E 00010220  2726	TITLE1:DB  00h,01h,02h," OBDII ",07h,"-METER V1",0Dh
     1342 4F424449
     1346 4920072D
     134A 4D455445
     134E 52205631
     1352 0D
     1353 03040520  2727	TITLE2:DB  03h,04h,05h," ----------------",0Dh
     1357 2D2D2D2D
     135B 2D2D2D2D
     135F 2D2D2D2D
     1363 2D2D2D2D
     1367 0D
     1368 4279204A  2728	TITLE3:DB  "By Jerry @ThaiMazda",06h,0Dh,00h
     136C 65727279
     1370 20405468
     1374 61694D61
     1378 7A646106
     137C 0D00
                    2729	
     137E 53656C65  2730	MENU1:DB "Select SETUP Menu[~]",0Dh,00h
     1382 63742053
     1386 45545550
     138A 204D656E
     138E 755B7E5D
     1392 0D00
     1394 312E2041  2731	MENU11:DB "1. Auto Backlight   ",0Dh,00h
     1398 75746F20
     139C 4261636B
     13A0 6C696768
     13A4 74202020
     13A8 0D00
     13AA 322E2053  2732	MENU12: DB "2. Set SPEAKER     ",0Dh,00h
     13AE 65742053
     13B2 5045414B
     13B6 45522020
     13BA 2020200D
     13BE 00
     13BF 332E2053  2733	MENU13: DB "3. Set start-up PID1",0Dh,00h
     13C3 65742073

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  48
xmeter16.asm                                    

     13C7 74617274
     13CB 2D757020
     13CF 50494431
     13D3 0D00
     13D5 342E2053  2734	MENU14: DB "4. Set start-up PID2",0Dh,00h
     13D9 65742073
     13DD 74617274
     13E1 2D757020
     13E5 50494432
     13E9 0D00
     13EB 352E2050  2735	MENU15: DB "5. PID Warning Light",0Dh,00h
     13EF 49442057
     13F3 61726E69
     13F7 6E67204C
     13FB 69676874
     13FF 0D00
     1401 362E2041  2736	MENU16: DB "6. Auto Sleep Mode.",0Dh,00h
     1405 75746F20
     1409 536C6565
     140D 70204D6F
     1411 64652E0D
     1415 00
     1416 372E2046  2737	MENU17: DB "7. Firmware Ver 1.05",0Dh,00h
     141A 69726D77
     141E 61726520
     1422 56657220
     1426 312E3035
     142A 0D00
     142C 4A616E30  2738	RELEASE: DB "Jan05,2013|JavaJacob",00Dh,00h
     1430 352C3230
     1434 31337C4A
     1438 6176614A
     143C 61636F62
     1440 0D00
                    2739	
     1442 53706563  2740	MENU2:DB "Special Function [~]",0Dh,00h
     1446 69616C20
     144A 46756E63
     144E 74696F6E
     1452 205B7E5D
     1456 0D00
     1458 312E2056  2741	VEHINFO:DB "1. Veh Info Numbers:",0Dh,00h
     145C 65682049
     1460 6E666F20
     1464 4E756D62
     1468 6572733A
     146C 0D00
     146E 322E204E  2742	DTC:DB "2. No. of DTCs = -- ",0Dh,16
     1472 6F2E206F
     1476 66204454
     147A 4373203D
     147E 202D2D20
     1482 0D10
     1484 4D494C20  2743	MILOFF:DB "MIL status is OFF...",0Dh,00h
     1488 73746174
     148C 75732069
     1490 73204F46
     1494 462E2E2E
     1498 0D00

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  49
xmeter16.asm                                    

     149A 50726573  2744	MILON:DB "Press to read DTC[~]",0Dh,00h
     149E 7320746F
     14A2 20726561
     14A6 64204454
     14AA 435B7E5D
     14AE 0D00
     14B0 436C6561  2745	SETMIL:DB "Clear MIL now?[NO ]~",0Dh,00h
     14B4 72204D49
     14B8 4C206E6F
     14BC 773F5B4E
     14C0 4F205D7E
     14C4 0D00
     14C6 30313031  2746	DTCPID:DB "0101",0Dh,00h	;for SBLOCK  check no of DTC
     14CA 0D00
     14CC 30330D00  2747	DTCREAD:DB "03",0Dh,00h	;for SBLOCK  read DTC
     14D0 20202020  2748	DISPDTC:DB "         next DTC[~]",0Dh,00h
     14D4 20202020
     14D8 206E6578
     14DC 74204454
     14E0 435B7E5D
     14E4 0D00
     14E6 30340D00  2749	CLRMIL:DB "04",0Dh,00h    ;for SBLOCK  clear MIL status
     14EA 20202020  2750	TOGGLE:DB "     Press to set[~]",0Dh,00h
     14EE 20507265
     14F2 73732074
     14F6 6F207365
     14FA 745B7E5D
     14FE 0D00
                    2751	
     1500 5B534554  2752	LIMITMSG: DB "[SET LIMITTED VALUE]",0Dh,00h
     1504 204C494D
     1508 49545445
     150C 44205641
     1510 4C55455D
     1514 0D00
     1516 53657474  2753	LIMITFIN: DB "Setting complete!...",0Dh,00h
     151A 696E6720
     151E 636F6D70
     1522 6C657465
     1526 212E2E2E
     152A 0D00
     152C 5B205550  2754	UGFIRM1: DB "[ UPGRADE FIRMWARE ]",0Dh,00h
     1530 47524144
     1534 45204649
     1538 524D5741
     153C 5245205D
     1540 0D00
     1542 57616974  2755	UGFIRM2: DB "Waiting connection.",0Dh,00h
     1546 696E6720
     154A 636F6E6E
     154E 65637469
     1552 6F6E2E0D
     1556 00
     1557 4E6F7720  2756	UGFIRM3: DB "Now Upgrading...    ",0Dh,00h
     155B 55706772
     155F 6164696E
     1563 672E2E2E
     1567 20202020
     156B 0D00

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  50
xmeter16.asm                                    

                    2757	
     156D 30313044  2758	SPDPID:DB "010D",0Dh,00h    ;for SBLOCK fuel consumption calculate
     1571 0D00
     1573 30313130  2759	MAFPID:DB "0110",0Dh,00h
     1577 0D00
     1579 32323136  2760	TFTPID:DB "221674",0Dh,00h  ;Transmission Fluid Temperature PID 
     157D 37340D00
                    2761	
     1581 00001E15  2762	CGM:DB 00h,00h,1Eh,15h,15h,15h,15h,00h,0Dh,00h	
     1585 15151500
     1589 0D00
                    2763	;CGD:DB 00h,00h,1Eh,11h,11h,11h,1Eh,00h,0Dh,00h	
     158B 000E010E  2764	CG3:DB 00h,0Eh,01h,0Eh,01h,03h,1Eh,00h,0Dh,00h
     158F 01031E00
     1593 0D00
     1595 00000106  2765	CGUL:DB 00h,00h,01h,06h,08h,0Ch,1Bh,10h,0Dh,00h
     1599 080C1B10
     159D 0D00
     159F 00001F00  2766	CGUM:DB 00h,00h,1Fh,00h,00h,00h,11h,0Ah,0Dh,00h
     15A3 0000110A
     15A7 0D00
     15A9 0000100C  2767	CGUR:DB 00h,00h,10h,0Ch,02h,06h,1Bh,01h,0Dh,00h
     15AD 02061B01
     15B1 0D00
     15B3 1010080E  2768	CGLL:DB 10h,10h,08h,0Eh,03h,00h,00h,00h,0Dh,00h
     15B7 03000000
     15BB 0D00
     15BD 04040000  2769	CGLM:DB 04h,04h,00h,00h,11h,1Fh,00h,00h,0Dh,00h
     15C1 111F0000
     15C5 0D00
     15C7 0101020E  2770	CGLR:DB 01h,01h,02h,0Eh,18h,00h,00h,00h,0Dh,00h
     15CB 18000000
     15CF 0D00
                    2771	;CGX:DB 11h,0Ah,04h,04h,04h,04h,0Ah,11h,0Dh,00h
     15D1 111B0E04  2772	CGX:DB 11h,1Bh,0Eh,04h,04h,0Eh,1Bh,11h,0Dh,00h
     15D5 040E1B11
     15D9 0D00
     15DB 43414C20  2773	PID04: DB "CAL Engine Load ---%",0Dh,16
     15DF 456E6769
     15E3 6E65204C
     15E7 6F616420
     15EB 2D2D2D25
     15EF 0D10
     15F1 436F6F6C  2774	PID05: DB "Coolant Temp: --- ",0DFh,"c",0Dh,14
     15F5 616E7420
     15F9 54656D70
     15FD 3A202D2D
     1601 2D20DF63
     1605 0D0E
     1607 532D5420  2775	PID06: DB "S-T Fuel Trim1 --- %",0Dh,15
     160B 4675656C
     160F 20547269
     1613 6D31202D
     1617 2D2D2025
     161B 0D0F
     161D 4C2D5420  2776	PID07: DB "L-T Fuel Trim1 --- %",0Dh,15
     1621 4675656C
     1625 20547269
     1629 6D31202D

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  51
xmeter16.asm                                    

     162D 2D2D2025
     1631 0D0F
                    2777	
     1633 4675656C  2778	PID0A: DB "Fuel Pressure ---kPa",0Dh,14
     1637 20507265
     163B 73737572
     163F 65202D2D
     1643 2D6B5061
     1647 0D0E
     1649 4D414E20  2779	PID0B: DB "MAN Air Press ---kPa",0Dh,14
     164D 41697220
     1651 50726573
     1655 73202D2D
     1659 2D6B5061
     165D 0D0E
     165F 454E4720  2780	PID0C: DB "ENG Speed: ---- RPM ",0Dh,11
     1663 53706565
     1667 643A202D
     166B 2D2D2D20
     166F 52504D20
     1673 0D0B
     1675 56454820  2781	PID0D: DB "VEH Speed: --- km/h ",0Dh,11
     1679 53706565
     167D 643A202D
     1681 2D2D206B
     1685 6D2F6820
     1689 0D0B
     168B 49474E20  2782	PID0E: DB "IGN ADV Timing: ---",0DFh,0Dh,16
     168F 41445620
     1693 54696D69
     1697 6E673A20
     169B 2D2D2DDF
     169F 0D10
     16A1 496E7461  2783	PID0F: DB "Intake Air Temp --",0DFh,"c",0Dh,15
     16A5 6B652041
     16A9 69722054
     16AD 656D7020
     16B1 2D2DDF63
     16B5 0D0F
     16B7 41697220  2784	PID10: DB "Air Flow ---.- g/sec",0Dh,9
     16BB 466C6F77
     16BF 202D2D2D
     16C3 2E2D2067
     16C7 2F736563
     16CB 0D09
     16CD 5468726F  2785	PID11: DB "Throttle Pos: --- %  ",0Dh,14
     16D1 74746C65
     16D5 20506F73
     16D9 3A202D2D
     16DD 2D202520
     16E1 200D0E
     16E4 46726F6E  2786	PID14: DB "Front HO2S Volt -.--",0Dh,16
     16E8 7420484F
     16EC 32532056
     16F0 6F6C7420
     16F4 2D2E2D2D
     16F8 0D10
     16FA 52656172  2787	PID15: DB "Rear  HO2S Volt -.--",0Dh,16
     16FE 2020484F

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  52
xmeter16.asm                                    

     1702 32532056
     1706 6F6C7420
     170A 2D2E2D2D
     170E 0D10
                    2788	
     1710 5261696C  2789	PID23: DB "Rail Press ---.- MPa",0Dh,11 ;((A*256)+B) /100
     1714 20507265
     1718 7373202D
     171C 2D2D2E2D
     1720 204D5061
     1724 0D0B
     1726 436F6D6D  2790	PID2C: DB "Commanded EGR: --- %",0Dh,15
     172A 616E6465
     172E 64204547
     1732 523A202D
     1736 2D2D2025
     173A 0D0F
     173C 45475220  2791	PID2D:DB "EGR Error: --- %    ",0Dh,11
     1740 4572726F
     1744 723A202D
     1748 2D2D2025
     174C 20202020
     1750 0D0B
     1752 434D4420  2792	PID2E:DB "CMD Evap Purge --- %",0Dh,15
     1756 45766170
     175A 20507572
     175E 6765202D
     1762 2D2D2025
     1766 0D0F
     1768 4675656C  2793	PID2F: DB "Fuel Level: --- %   ",0Dh,12
     176C 204C6576
     1770 656C3A20
     1774 2D2D2D20
     1778 25202020
     177C 0D0C
                    2794	
     177E 4261726F  2795	PID33: DB "Baro Pressure ---kPa",0Dh,14
     1782 20507265
     1786 73737572
     178A 65202D2D
     178E 2D6B5061
     1792 0D0E
                    2796	
     1794 43415420  2797	PID3C: DB "CAT 1 Temp: ---.- ",0DFh,"c",0Dh,12
     1798 31205465
     179C 6D703A20
     17A0 2D2D2D2E
     17A4 2D20DF63
     17A8 0D0C
     17AA 43415420  2798	PID3D: DB "CAT 2 Temp: ---.- ",0DFh,"c",0Dh,12
     17AE 32205465
     17B2 6D703A20
     17B6 2D2D2D2E
     17BA 2D20DF63
     17BE 0D0C
                    2799	
     17C0 50434D20  2800	PID42: DB "PCM Voltage: --.-- V",0Dh,13
     17C4 566F6C74
     17C8 6167653A

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  53
xmeter16.asm                                    

     17CC 202D2D2E
     17D0 2D2D2056
     17D4 0D0D
     17D6 41425320  2801	PID43: DB "ABS Engine Load ---%",0Dh,16
     17DA 456E6769
     17DE 6E65204C
     17E2 6F616420
     17E6 2D2D2D25
     17EA 0D10
     17EC 434D4420  2802	PID44: DB "CMD EQV Ratio: -.--   ",0Dh,15
     17F0 45515620
     17F4 52617469
     17F8 6F3A202D
     17FC 2E2D2D20
     1800 20200D0F
     1804 52454C20  2803	PID45: DB "REL Throt Pos: --- %",0Dh,15
     1808 5468726F
     180C 7420506F
     1810 733A202D
     1814 2D2D2025
     1818 0D0F
     181A 414D4220  2804	PID46: DB "AMB Air Temp: --- ",0DFh,"c",0Dh,14
     181E 41697220
     1822 54656D70
     1826 3A202D2D
     182A 2D20DF63
     182E 0D0E
                    2805	
     1830 5472616E  2806	TFT: DB "Trans Temp: ---.- ",0DFh,"c",0Dh,12
     1834 73205465
     1838 6D703A20
     183C 2D2D2D2E
     1840 2D20DF63
     1844 0D0C
                    2807	
     1846 20202020  2808	NODATA:DB "                    ",0Dh,00
     184A 20202020
     184E 20202020
     1852 20202020
     1856 20202020
     185A 0D00
     185C 2D2D2D20  2809	SPDMAF: DB "--- km/h|AF --.- g/s",0Dh,00h
     1860 6B6D2F68
     1864 7C414620
     1868 2D2D2E2D
     186C 20672F73
     1870 0D00
     1872 43757272  2810	INSTFC: DB "Current F/C --.-km/L",0Dh,00h
     1876 656E7420
     187A 462F4320
     187E 2D2D2E2D
     1882 6B6D2F4C
     1886 0D00
     1888 41766572  2811	AVRFC: DB "Average F/C --.-km/L",0Dh,00h
     188C 61676520
     1890 462F4320
     1894 2D2D2E2D
     1898 6B6D2F4C
     189C 0D00

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page  54
xmeter16.asm                                    

     189E 45455052  2812	RDERR: DB "EEPROM Reading Error",0Dh,00h
     18A2 4F4D2052
     18A6 65616469
     18AA 6E672045
     18AE 72726F72
     18B2 0D00
     18B4 45455052  2813	WRERR: DB "EEPROM Writing Error",0Dh,00h
     18B8 4F4D2057
     18BC 72697469
     18C0 6E672045
     18C4 72726F72
     18C8 0D00
     18CA 456E6769  2814	PDOWN1: DB "Engine is turned off",0Dh,00h
     18CE 6E652069
     18D2 73207475
     18D6 726E6564
     18DA 206F6666
     18DE 0D00
     18E0 53776974  2815	PDOWN2: DB "Switch to SLEEP mode",0Dh,00h
     18E4 63682074
     18E8 6F20534C
     18EC 45455020
     18F0 6D6F6465
     18F4 0D00
                    2816	
     0000=          2817	END
1 error
8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   1
xmeter16.asm                                    

           add16 = 11B8           airflow = 0B92              atof = 1025             atof2 = 1015              atoh = 100A  
      autoblstat = 0019         autosleep = 0567           average = 08AC             avrfc = 1888           avrmode = 080F  
              b1 = 000D                b2 = 000E         backlight = 10BE        backlight2 = 10C6           beepoff = 045E  
      beepstatus = 0442                bl = 00A3             bloff = 03F4          blstatus = 03D6             btnbl = 00B3  
           btndn = 00B5           btnmenu = 00B2             btnup = 00B4            buffer = 0020            buzzer = 00A4  
       calculate = 096F           cattemp = 0BD3              cdel = 1283               cg3 = 158B              cgll = 15B3  
            cglm = 15BD              cglr = 15C7               cgm = 1581              cgul = 1595              cgum = 159F  
            cgur = 15A9               cgx = 15D1            check4 = 06EF          checking = 0154             chigh = 1273  
          chkcan = 1310          clearmil = 0786              clow = 127B            clrmil = 14E6            cmdeqv = 0C55  
          config = 0010           connect = 0200           consump = 07E9          consump0 = 0375          consump2 = 0815  
        consump3 = 093C           del100m = 1067          del100m1 = 1069          del100m2 = 106D          del100m3 = 106B  
         del500m = 1056          del500m1 = 1058          del500m2 = 105C          del500m3 = 105A             del5m = 1051  
          del5m1 = 0380            del5m2 = 0384            del5m3 = 0382           del5sec = 1002             dels1 = 109C  
         dispdtc = 14D0             div_1 = 1167          div_loop = 114A               dtc = 146E          dtc1read = 06FE  
         dtcintp = 0703            dtcpid = 14C6           dtcread = 14CC           econfig = 0000           ecuvolt = 0C21  
          eeperr = 0014            eepscl = 00A6            eepsda = 00A5             eepwp = 00A7                en = 00A2  
        engspeed = 0B1A             epid1 = 0001             epid2 = 0002            fcexit = 0926             fckey = 0902  
          fcmode = 0917         fcnonzero = 08E9             fcptr = 0015            fczero = 08E7          formula1 = 0A33  
        formula2 = 0A75          formula3 = 0AA4          fueltrim = 0ADC           getb1b2 = 0F49             goset = 03B2  
        ho2svolt = 0C87              htoa = 1019              htod = 1078             htod1 = 107F             htod2 = 108D  
         igntime = 0B5C            instfc = 1872          instmode = 08D5           intpdtc = 1290               ipr = 1210  
            ipr9 = 124C             iprdb = 1256            iprdb1 = 125A            iprdb2 = 126F               ipw = 11C4  
            ipw9 = 11E9             ipwrb = 11F3            ipwrb1 = 11F7            ipwrb2 = 120C           lcd_cls = 0001  
        lcd_home = 0002     lcd_setcgaddr = 0040     lcd_setddaddr = 0080       lcd_setfunc = 0020       lcd_setmode = 0004  
  lcd_setvisible = 0008         lcd_shift = 0010           lcddata = 0080             leddn = 00B7             ledup = 00B6  
         length1 = 02FB           length2 = 0343            light1 = 10CB           light11 = 10FC            light2 = 1107  
         light22 = 1138         limitchk1 = 0016         limitchk2 = 0017          limitfin = 1516          limitmsg = 1500  
       limitread = 00E5             line1 = 0CBB            line12 = 0DC1             line2 = 0DC7            line22 = 0ECD  
         loadeep = 020B         lowlimit1 = 10FF         lowlimit2 = 113B               maf = 0855            mafpid = 1573  
            main = 026A             main2 = 02B2             main3 = 0289             menu1 = 137E            menu11 = 1394  
          menu12 = 13AA            menu13 = 13BF            menu14 = 13D5            menu15 = 13EB            menu16 = 1401  
          menu17 = 1416             menu2 = 1442             meter = 025F           milison = 06BE            miloff = 1484  
           milon = 149A         milstatus = 0794              miso = 0096            mode22 = 0F74              mosi = 0095  
         no_data = 0FE3            nodata = 1846            notclr = 07B0            pdown1 = 18CA            pdown2 = 18E0  
           pid04 = 15DB             pid05 = 15F1             pid06 = 1607             pid07 = 161D             pid0a = 1633  
           pid0b = 1649             pid0c = 165F             pid0d = 1675             pid0e = 168B             pid0f = 16A1  
            pid1 = 0008             pid10 = 16B7             pid11 = 16CD             pid14 = 16E4             pid15 = 16FA  
          pid1ok = 04BD              pid2 = 0009             pid23 = 1710             pid2c = 1726             pid2d = 173C  
           pid2e = 1752             pid2f = 1768            pid2ok = 04FA             pid33 = 177E             pid3c = 1794  
           pid3d = 17AA             pid42 = 17C0             pid43 = 17D6             pid44 = 17EC             pid45 = 1804  
           pid46 = 181A            pidoff = 053E         pidstatus = 0522           pidturn = 000A          pidturn2 = 032D  
             pos = 0B76             posft = 0AFF           pwrdown = 0F9D            rblock = 1034           rblock1 = 1036  
         rblock2 = 103D             rbyte = 1049             rderr = 189E          read8bit = 00E9           readerr = 0239  
         receive = 02DD           release = 142C               res = 0000              res1 = 0002         resultlen = 000F  
              rs = 00A1                rw = 00A0            sblock = 1029           sblock1 = 102E             sbyte = 1041  
             sck = 0097            select = 03A7          serinit1 = 1316          serinit2 = 131C          serinit3 = 1322  
        serinit4 = 1328          serinit5 = 1330             serws = 1338           setbeep = 046D             setbl = 0405  
          setmil = 14B0         setmiloff = 07BF            setpid = 054D           setpid1 = 049D           setpid2 = 04DA  
        setsleep = 05B3          setsound = 0421             setup = 0377            setup0 = 02DB          setuppid = 0487  
         showdtc = 067C         skipnull1 = 0733         skipnull2 = 0732           skippid = 093F          sleepcnt = 0018  
        sleepoff = 05A4       sleepstatus = 0588        sound_beep = 1098       sound_beep1 = 109E        sound_trig = 10A9  
     sound_trig0 = 10B1       sound_trig1 = 10B5            spdmaf = 185C            spdpid = 156D           splexit = 07D9  
         splfunc = 062E             temp1 = 0011             temp2 = 0012             temp3 = 0013               tft = 1830  
          tftpid = 1579            title1 = 133E            title2 = 1353            title3 = 1368            toggle = 14EA  
          trycan = 01B2           trycan1 = 01CC           trycan2 = 01D8           trycan3 = 01E3         turnonchk = 0FEA  
          udiv16 = 1143           ugfirm1 = 152C           ugfirm2 = 1542           ugfirm3 = 1557            umul16 = 1179  
         upgrade = 010E           vehinfo = 1458            vehspd = 0830           version = 05CD           wdreset = 1289  
          wdtrst = 00A6           wraddl1 = 000B           wraddl2 = 000C            wrchar = 0F3A             wrcmd = 0F2B  
           wrerr = 18B4          writeerr = 060C             wrscr = 0F01            wrscr1 = 0F03            wrscr2 = 0F10  

8051 Cross-Assembler (1.3)   (C) 1987, 1989 Binary Technology                                                              Page   2
xmeter16.asm                                    

          wrscr3 = 0F15             wrstr = 0ED3            wrstr1 = 0ED5            wrstr2 = 0EE2            wrstr3 = 0EEB  
