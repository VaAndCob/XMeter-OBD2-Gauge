xmeter18                                                                                                                PAGE 1
196F 2D2D2D206B          1     ;Program X-Meter Version 1.0.8
     6D2F687C41
     46202D2D2E
     2D20672F73
     0D00
****ERROR:Labelwasalreadydefined:`spdmaf'
                         2     ;MCU    =   AT89S52
                         3     ;X-TAL  =   22.118 MHz
                         4     ;Ver 1.01 Date  25/11/2006 {turn off all warning lamp when switch to sleep mode}}
                         5     ;Ver 1.02 Date  10/12/2006 {auto sleep and auto activate}
                         6     ;Ver 1.03 Date  31/12/2006 {turn off all warning lamp when leave meter mode/DTC additional message/C
                         7     ;Ver 1.04 Date  22/04/2007 {No. of DTC bug fixed, Read DTCs,HO2S voltage display bug fixed}
                         8     ;Ver 1.05 Date 05/01/2013 {PID23 Fuel Rail Pressure Added, Auto Backlight added}
                         9     ;Ver 1.06 Date 23/05/2015 {Mode 22 PID 1E1C Transmission Fluid Temp}
                        10     ;Ver 1.07 Date 22/02/2016 {Transmission Fluid Temp bug fixed}
                        11     ;Ver 1.08 Date 25/11/2022 {Transmission Fluid Temp bug fixed + add more pid}
                        12     ;==============================================
                        13     ;Pin Configuration
  0080                  14     LCDDATA EQU     P0              ;LCD data Line
****ERROR:Tryingtooverwriteconstant:lcddata
                        15     ;Port1
  0095                  16     MOSI    BIT     P1.5            ;ISP Data Out
****ERROR:Tryingtooverwriteconstant:mosi
  0096                  17     MISO    BIT     P1.6            ;ISP Data In
****ERROR:Tryingtooverwriteconstant:miso
  0097                  18     SCK     BIT     P1.7            ;ISP Clock
****ERROR:Tryingtooverwriteconstant:sck
                        19     ;Port 2
  00A0                  20     RW      BIT     P2.0            ;LCD 0 = Read  1 = write
****ERROR:Tryingtooverwriteconstant:rw
  00A1                  21     RS      BIT     P2.1            ;LCD 0 = Instruction 1 = Data
****ERROR:Tryingtooverwriteconstant:rs
  00A2                  22     EN      BIT     P2.2            ;LCD clock High to Low
****ERROR:Tryingtooverwriteconstant:en
  00A3                  23     BL      BIT     P2.3            ;LCD Back Light 0 = On, 1 = OFF
****ERROR:Tryingtooverwriteconstant:bl
  00A4                  24     BUZZER  BIT     P2.4            ;Buzzer Bit 0= On, 1 = OFF
****ERROR:Tryingtooverwriteconstant:buzzer
  00A5                  25     EEPSDA  BIT     P2.5            ;EEprom Data Line
****ERROR:Tryingtooverwriteconstant:eepsda
  00A6                  26     EEPSCL  BIT     P2.6            ;EEprom Clock Line
****ERROR:Tryingtooverwriteconstant:eepscl
  00A7                  27     EEPWP   BIT     P2.7            ;EEprom write Protect 0 = Disable, 1= Write Protect
****ERROR:Tryingtooverwriteconstant:eepwp
                        28     ;now use bit P2.7 as Auto backlight input with LDR circuit
                        29     ;Port3   P3.0 & P3.1 Reserved as Serial Port
  00B2                  30     BTNMENU BIT     P3.2            ;Menu button
****ERROR:Tryingtooverwriteconstant:btnmenu
  00B3                  31     BTNBL   BIT     P3.3            ;Backlight toggle switch
****ERROR:Tryingtooverwriteconstant:btnbl
  00B4                  32     BTNUP   BIT     P3.4            ;UP button
****ERROR:Tryingtooverwriteconstant:btnup
  00B5                  33     BTNDN   BIT     P3.5            ;Down button
****ERROR:Tryingtooverwriteconstant:btndn
  00B6                  34     LEDUP   BIT     P3.6            ;Upper Warning  LED 0 = On, 1 = OFF
****ERROR:Tryingtooverwriteconstant:ledup
  00B7                  35     LEDDN   BIT     P3.7            ;Lower  Warning  LED 0 = On, 1 = OFF
****ERROR:Tryingtooverwriteconstant:leddn
                        36     ;Port1   Reserved as extentsion & ISP
                        37     ;Internal Ram
  0008                  38     PID1    EQU     08h             ;PID1 mode
****ERROR:Tryingtooverwriteconstant:pid1
  0009                  39     PID2    EQU     09h             ;PID2 mode
****ERROR:Tryingtooverwriteconstant:pid2
  000A                  40     PIDTURN EQU     0Ah             ;check which PID will be sent to ELM
****ERROR:Tryingtooverwriteconstant:pidturn
  000B                  41     WRADDL1 EQU     0Bh             ;LCD write address for calculated value line1
****ERROR:Tryingtooverwriteconstant:wraddl1
  000C                  42     WRADDL2 EQU     0Ch             ;LCD write address for calculated value line2
****ERROR:Tryingtooverwriteconstant:wraddl2
  000D                  43     B1      EQU     0Dh             ;address for Byte1
****ERROR:Tryingtooverwriteconstant:b1
  000E                  44     B2      EQU     0Eh             ;address for Byte2
****ERROR:Tryingtooverwriteconstant:b2
  000F                  45     RESULTLEN       EQU     0Fh     ;keep length of result
****ERROR:Tryingtooverwriteconstant:resultlen
  0010                  46     CONFIG  EQU     10h             ;current config
****ERROR:Tryingtooverwriteconstant:config
                        47     ;bit3 = PID warning light (0-off,1-on) ,bit 2 = F/C mode(0=inst/1=avr) , bit1 =beep(0-off,1-on), bit0
                        48     ;bit4 = Auto sleep mode (0-off,1-on)
  0011                  49     TEMP1   EQU     11h             ;general ram use
****ERROR:Tryingtooverwriteconstant:temp1
  0012                  50     TEMP2   EQU     12h             ;general ram use
****ERROR:Tryingtooverwriteconstant:temp2
  0013                  51     TEMP3   EQU     13h             ;general ram use
****ERROR:Tryingtooverwriteconstant:temp3
  0014                  52     EEPERR  EQU     14h             ;EEPROM I2C Error
****ERROR:Tryingtooverwriteconstant:eeperr
  0015                  53     FCPTR   EQU     15h             ;IRAM pointer for F/C 80h-FFh data logging
****ERROR:Tryingtooverwriteconstant:fcptr
  0016                  54     LIMITCHK1       EQU     16h     ;address for keep limit PID load from eeprom
****ERROR:Tryingtooverwriteconstant:limitchk1
  0017                  55     LIMITCHK2       EQU     17h     ;address for keep limit PID load from eeprom
****ERROR:Tryingtooverwriteconstant:limitchk2
  0018                  56     SLEEPCNT        EQU     18h     ;sleep mode counter
****ERROR:Tryingtooverwriteconstant:sleepcnt
  0019                  57     AUTOBLSTAT      EQU     19h     ;Hold Autobacklight status for checking
****ERROR:Tryingtooverwriteconstant:autoblstat
  0020                  58     BUFFER  EQU     20h             ;Message Buffer
****ERROR:Tryingtooverwriteconstant:buffer
                        59     ;Stack Pointer at 60h up to 7Fh
                        60     ;Special Function Register
  00A6                  61     WDTRST  EQU     0A6h            ;SFR address for Watchdog Timer Register
****ERROR:Tryingtooverwriteconstant:wdtrst
                        62     ;EEPROM address assignment
  0000                  63     ECONFIG EQU     00h             ;Configuration same as CONFIG
****ERROR:Tryingtooverwriteconstant:econfig
  0001                  64     EPID1   EQU     01h
****ERROR:Tryingtooverwriteconstant:epid1
  0002                  65     EPID2   EQU     02h
****ERROR:Tryingtooverwriteconstant:epid2
                        66     ;04h-4Fh  Reserved for Warning Lamp in each PID no.
                        67
                        68     ;PID04 CAL Engine Load ---%'    [90 = 0E5h]
                        69     ;PID05 Coolant Temp: --- '      [97 = 089h]
                        70     ;PID06 S-T Fuel Trim1 --- %'    [+/- 10 = 08Eh]
                        71     ;PID07 L-T Fuel Trim1 --- %'    [+/- 10 = 08Eh]
                        72     ;PID0A Fuel Pressure ---kPa'    [ 250 = FAh]lowerlimit*
                        73     ;PID0B MAN Air Press ---kPa'    [101 = 65h]
                        74     ;PID0C ENG Speed: ---- RPM ' [6500 = 66h]
                        75     ;PID0D VEH Speed: --- km/h '    [160 = A0h]
                        76     ;PID0E IGN ADV Timing: ---'     [+/- 27.5 = FFh]
                        77     ;PID0F Intake Air Temp --'      [90c = 82h]
                        78     ;PID10 Air Flow ---.- g/sec'    [50.0g/s = 14h]
                        79     ;PID11 Throttle Pos: --- %  '   [80%  = CCh]
                        80     ;PID14 Front HO2S Volt -.--'    [0.21 V= 2Ah] lowerlimit*
                        81     ;PID15 Rear  HO2S Volt -.--'    [0.21 V= 2Ah] lowerlimit*
                        82     ;PID23 Rail Pressure ---MPa'      ((A*256)+B) /100
                        83     ;PID2C Commanded EGR: --- %' [100% = FFh]
                        84     ;PID2D EGR Error: --- %    '    [100% = FFh]
                        85     ;PID2E CMD Evap Purge --- %'   [100% = FFh]
                        86     ;PID2F Fuel Level: --- %   '    [5%     =  0Ch] lower limit*
                        87     ;PID33 Baro Pressure ---kPa'    [102 = 66h]
                        88     ;PID3C CAT 1 Temp: ---.- '      [700c = 1Bh]
                        89     ;PID3D CAT 2 Temp: ---.- '      [700c = 1Bh]
                        90     ;PID42:PCM Voltage: --.-- V'    [11.0 = 2Bh] lowerlimit*
                        91     ;PID43 ABS Engine Load ---%'    [90 = 0E5h]
                        92     ;PID44 CMD EQV Ratio: -.--   '  [not sure = FFh]
                        93     ;PID45 REL Throt Pos: --- %'    [90 = 0E5h]
                        94     ;PID46 AMB Air Temp: --- '      [40 = 50h]
                        95     ;PID5C ENG Oil Temp: --- '  []
                        96     ;TFT: DB 'Trans Temp: ---.- ' [100 = 64h]
                        97
                        98     ;*******************************************
                        99     ;LCD Commands Write parameter
                       100     ;MOV A = parameter then CALL LCD_CMD_WR
  0001                 101     LCD_CLS EQU     01
****ERROR:Tryingtooverwriteconstant:lcd_cls
  0002                 102     LCD_HOME        EQU     02
****ERROR:Tryingtooverwriteconstant:lcd_home
  0004                 103     LCD_SETMODE     EQU     04      ;+I/D  S
****ERROR:Tryingtooverwriteconstant:lcd_setmode
                       104     ;I/D  = 0 Cursor&DDRAM  Decrement  , I/D = 1 Cursor&DDRAM Increment
                       105     ;S   = 0   Cursor Move as I/D, S =1  insert charactor
  0008                 106     LCD_SETVISIBLE  EQU     08      ;+ D C B
****ERROR:Tryingtooverwriteconstant:lcd_setvisible
                       107     ;D = 0 Off display ,D = 1 On display
                       108     ;C = 0 Off Cur sor , C = 1 On cursor
                       109     ;B = 0 Blink Off    ,  B = 1 Blink On
  0010                 110     LCD_SHIFT       EQU     16      ; + S/C  R/L  x  x
****ERROR:Tryingtooverwriteconstant:lcd_shift
                       111     ;S/C = 0 move cursor as R/L  1 position
                       112     ;S/C = 1 move charactor as R/L 1 column on every line
                       113     ;R/L = 0 Left direction, R/L = 1 Right direction
  0020                 114     LCD_SETFUNC     EQU     32      ; + DL  N  F  x  x
****ERROR:Tryingtooverwriteconstant:lcd_setfunc
                       115     ;DL = 0  4 bit mode , DL = 1  8 bit mode
                       116     ;N = 0  1/8 Duty   ,N = 1 1/16 duty
                       117     ;F = 0   5x7 dot,   F = 1  5x10 dot
  0040                 118     LCD_SETCGADDR   EQU     64      ; + address  upto 16 data
****ERROR:Tryingtooverwriteconstant:lcd_setcgaddr
  0080                 119     LCD_SETDDADDR   EQU     128     ; + address
****ERROR:Tryingtooverwriteconstant:lcd_setddaddr
                       120     ;Program Start Address  ================
                       121     ORG     0000h
                       122     ;*****RESET START***************************
                       123     RES:
                       124             MOV     R0, #7FH        ;POWER UP CLEAR 61-7FH
****ERROR:Labelwasalreadydefined:`res'
                       125     RES1:
                       126             MOV     @R0, #0
****ERROR:Labelwasalreadydefined:`res1'
                       127             DEC     R0
                       128             CJNE    R0, #00H, RES1  ;Clear IRAM Adress 00h-7Fh = 0
                       129             MOV     B, #0           ;CLEAR SYSTEM FLAG
                       130             MOV     SP, #80h        ;SET STACK point to IRAM (not duplicate)
                       131     ;Serial Port initialize
                       132             MOV     PCON, #80H      ;1000000
                       133             MOV     TMOD, #22H      ;TIMER1 MODE2
                       134             MOV     TH1, #0FDH      ;38400 bps
                       135             MOV     SCON, #52H      ;SERIAL 8 BIT UART MODE
                       136             SETB    TR1             ;TIMER1 ON
                       137             CLR     ES              ;no interrupt
                       138     ;Default  Internal RAM if EEPROM Error
                       139             MOV     PID1, #04h      ;default PID1
                       140             MOV     PID2, #11h      ;default PID2
                       141             MOV     PIDTURN, #01h   ;set to PID1 current msg
                       142             MOV     CONFIG, #00000110b      ;beep on & backlight off , Instant F/C,Warning Lamp ON,auto s
                       143             MOV     FCPTR, #79h     ;F/C pointer point to 79h
                       144             MOV     SLEEPCNT, #24h  ;Reset Sleep mode counter
                       145     ;Initial Port
                       146             CLR     P2
****ERROR:Invalidsetofoperands:clrP2
                       147             SETB    P3
****ERROR:Invalidsetofoperands:setbP3
                       148     ;MOV    P2,#00010000b   ;clear port 2 for LCD  except buzzer to OFF
                       149     ;MOV    P3,#0FFh                ;Extend Port
                       150     ;SETB   EEPWP           ;EEPROM Write Protect enable (unused now)
                       151             CLR     BL              ;turn BL on
                       152     ;addition here
                       153     ;===========================
                       154     ;Load CGRAM
                       155             MOV     A, #LCD_SETCGADDR+0     ;set CDRAM address
                       156             CALL    WRCMD
                       157             MOV     DPTR, #CGUL
                       158             CALL    WRSTR           ;write 3 char in CGRAM  00
                       159             MOV     DPTR, #CGUM
                       160             CALL    WRSTR           ;write 3 char in CGRAM  01
                       161             MOV     DPTR, #CGUR
                       162             CALL    WRSTR           ;write 3 char in CGRAM  02
                       163             MOV     DPTR, #CGLL
                       164             CALL    WRSTR           ;write 3 char in CGRAM  03
                       165             MOV     DPTR, #CGLM
                       166             CALL    WRSTR           ;write 3 char in CGRAM  04
                       167             MOV     DPTR, #CGLR
                       168             CALL    WRSTR           ;write 3 char in CGRAM  05h
                       169             MOV     DPTR, #CGDegC   ;Load degree c symbol
                       170             CALL    WRSTR           ;write degree c symbol in CGRAM  06h
                       171             MOV     DPTR, #CGDegF   ;Load degree f symbol
                       172             CALL    WRSTR           ;write degree f symbol in CGRAM 07h
                       173
                       174     ;add more here
                       175     ;==================================
                       176     ;LCD Initialize
                       177             MOV     A, #LCD_CLS
                       178             CALL    WRCMD
                       179             CALL    DEL100m
                       180             MOV     A, #LCD_SETFUNC+11000b
                       181             CALL    WRCMD
                       182             MOV     A, #LCD_SETVISIBLE+100b ; display on + nocursor + noblink
                       183             CALL    WRCMD
                       184             MOV     A, #LCD_SHIFT+0000b
                       185             CALL    WRCMD
                       186             MOV     A, #LCD_SETMODE+11b     ;Left scroll
                       187             CALL    WRCMD
                       188     ;==============================
                       189     ;LCD display title
                       190             MOV     A, #LCD_SETDDADDR+00    ;Line 1   OBDII X-METER V1
                       191             CALL    WRCMD
                       192             MOV     DPTR, #TITLE1   ;OBDII X-METER V1
                       193             CALL    WRSCR
                       194             MOV     A, #LCD_SETDDADDR+40h   ;Line2
                       195             CALL    WRCMD
                       196             MOV     DPTR, #TITLE2   ;---------------------------
                       197             CALL    WRSCR
                       198     ;------------
                       199             MOV     A, #LCD_SETMODE+10b     ;Normal Right Scroll
                       200             CALL    WRCMD
                       201     ;======= Set Limitted Value Mode
                       202             JB      BTNMENU, UPGRADE        ;by pass Limitted Value
                       203             CALL    SOUND_BEEP
                       204             MOV     A, #LCD_CLS
                       205             CALL    WRCMD
                       206             CALL    DEL100m
                       207             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       208             CALL    WRCMD
                       209             MOV     DPTR, #LIMITMSG ;Set limit message
                       210             CALL    WRSTR
                       211             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       212             CALL    WRCMD
                       213             MOV     DPTR, #UGFIRM2  ;Waiting connection.
                       214             CALL    WRSTR
                       215             MOV     A, #LCD_SETVISIBLE+101b ; display on + nocursor + blinking
                       216             CALL    WRCMD
                       217             CLR     MISO            ;set PIN checking to tell UPDATER xmeter is ready
                       218             CLR     SCK             ;set Low SCK for updater detect (X-Meter check Updater Start)
                       219             JB      BTNBL, $+6      ;toggle back light
                       220             CALL    BACKLIGHT
                       221             JNB     SCK, $-6        ;if SCK is set hi else back to Updater
                       222             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       223             CALL    WRCMD
                       224             MOV     DPTR, #UGFIRM3  ;Now Loading...
                       225             CALL    WRSTR
                       226     ;add eeprom writing code  here
                       227             MOV     R0, #01h        ;start writing address (00h is reserved as CONFIG)
                       228     LIMITREAD:
                       229             MOV     A, #00h
****ERROR:Labelwasalreadydefined:`limitread'
                       230             MOV     R7, #08h
                       231     READ8BIT:
                       232             JNB     SCK, $          ;Wait CLK Hi
****ERROR:Labelwasalreadydefined:`read8bit'
                       233     ;read data 1 bit
                       234             MOV     C, MOSI
                       235             RLC     A
                       236             SETB    MISO            ;tell Updater that 1 bit read
                       237             JB      SCK, $          ;CLK Low end 1byte
                       238             CLR     MISO
                       239             DJNZ    R7, READ8BIT
                       240     ;MOV    R0,address
                       241             MOV     R1, A
                       242             CALL    IPW             ;write EEPROM 1 byte
                       243             INC     R0              ;next EEPROM address
                       244             CJNE    R0, #080h, LIMITREAD    ;If address = 128 then exit
                       245             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       246             CALL    WRCMD
                       247             MOV     DPTR, #LIMITFIN ;Setting complete...
                       248             CALL    WRSTR
                       249             CALL    SOUND_BEEP      ;finish
                       250     ;======= Firmware Upgrade Mode
                       251     UPGRADE:
                       252             JB      BTNUP, CHECKING ;by pass firmware upgrade
****ERROR:Labelwasalreadydefined:`upgrade'
                       253             JB      BTNDN, CHECKING
                       254             CALL    SOUND_BEEP
                       255             MOV     A, #LCD_CLS
                       256             CALL    WRCMD
                       257             CALL    DEL100m
                       258             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       259             CALL    WRCMD
                       260             MOV     DPTR, #UGFIRM1  ;Upgrade Fimrware
                       261             CALL    WRSTR
                       262             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       263             CALL    WRCMD
                       264             MOV     DPTR, #UGFIRM2  ;Waiting connection.
                       265             CALL    WRSTR
                       266             MOV     A, #LCD_SETVISIBLE+101b ; display on + nocursor + blinking
                       267             CALL    WRCMD
                       268             CLR     MISO            ;set PIN checking for Upgrade firmwrae MISO (Updater Check X-Meter)
                       269             CLR     SCK             ;set Low SCK for updater detect (X-Meter check Updater Start)
                       270             JB      BTNBL, $+6      ;toggle back light
                       271             CALL    BACKLIGHT
                       272             JNB     SCK, $-6        ;if SCK is set hi else back to Updater
                       273             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       274             CALL    WRCMD
                       275             MOV     DPTR, #UGFIRM3  ;Now Loading...
                       276             CALL    WRSTR
                       277             JMP     $               ;Loop forever tl finish Upgrade
                       278     ;Checking system
                       279     CHECKING:
                       280             CALL    DEL500m
****ERROR:Labelwasalreadydefined:`checking'
                       281             CALL    DEL500m
                       282             CALL    DEL500m
                       283             CALL    DEL500m
                       284             CALL    DEL500m
                       285             CALL    DEL500m
                       286             CLR     LEDUP           ;turn off LED
                       287             CLR     LEDDN
                       288             MOV     A, #LCD_CLS     ;clear screen once
                       289             CALL    WRCMD
                       290             CALL    DEL100m
                       291     ;****************Check illegal firmware modified
                       292             CALL    SOUND_TRIG
                       293             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       294             CALL    WRCMD
                       295             MOV     DPTR, #TITLE3   ;by Jerry@Thaimazda3  check illegal copy
                       296             CALL    WRSTR
                       297             MOV     A, #LCD_SETVISIBLE+101b ; display on + nocursor + blinking
                       298             CALL    WRCMD
                       299     ;===============================
                       300     ;ELM327 Initialize message
                       301             MOV     DPTR, #SERINIT1
                       302             CALL    SBLOCK
                       303             CALL    DEL100m
                       304             MOV     DPTR, #SERINIT2
                       305             CALL    SBLOCK
                       306             CALL    DEL100m
                       307             MOV     DPTR, #SERINIT3
                       308             CALL    SBLOCK
                       309             CALL    DEL100m
                       310             MOV     DPTR, #SERINIT4
                       311             CALL    SBLOCK
                       312             CALL    DEL100m
                       313             MOV     DPTR, #SERINIT5
                       314             CALL    SBLOCK
                       315             CALL    DEL100m
                       316
                       317     ;========= Check CAN connection =====================
                       318     TRYCAN:                         ;OK and UNABLE TO CONNECT
                       319             CLR     RI              ;clear SBUF interrupt
****ERROR:Labelwasalreadydefined:`trycan'
                       320             MOV     A, #LCD_SETDDADDR+40h   ;Line2
                       321             CALL    WRCMD
                       322             MOV     DPTR, #NODATA   ;clear LCD line2
                       323             CALL    WRSTR
                       324             MOV     A, #LCD_SETDDADDR+40h   ;Line2
                       325             CALL    WRCMD
                       326             MOV     DPTR, #CHKCAN   ;send 0100 to ELM327
                       327             CALL    SBLOCK
                       328             MOV     A, #3Eh         ;send '>' first
                       329     TRYCAN1:
                       330             CALL    WRCHAR          ;write > to LCD & data receive by RBYTE
****ERROR:Labelwasalreadydefined:`trycan1'
                       331             CALL    RBYTE           ;Receive 'SEARCHING....'
                       332             CJNE    A, #34h, TRYCAN2        ;If A = '4' then connection OK
                       333             JMP     CONNECT
                       334     TRYCAN2:
                       335             CJNE    A, #0Dh, TRYCAN1        ;if A = CR wait 2 second  and try again
****ERROR:Labelwasalreadydefined:`trycan2'
                       336     ;add some thing here
                       337             MOV     A, #LCD_SETDDADDR+41h   ;set address to line2+1
                       338             CALL    WRCMD
                       339             JMP     $+6             ;jump CALL RBYTE
                       340     TRYCAN3:
                       341             CALL    WRCHAR
****ERROR:Labelwasalreadydefined:`trycan3'
                       342             CALL    RBYTE
                       343             CJNE    A, #0Dh, TRYCAN3        ;If A = 'CR ' then delay & retry again
                       344             CALL    DEL500m
                       345             CALL    DEL500m
                       346             CALL    DEL500m
                       347             CALL    DEL500m
                       348             CALL    DEL500m
                       349             CALL    DEL500m
                       350             JMP     TRYCAN          ;request again
                       351     CONNECT:
                       352     ;loop to check > feed back
                       353             CALL    RBYTE
****ERROR:Labelwasalreadydefined:`connect'
                       354             CJNE    A, #3Eh, $-3    ;ELM connected OK
                       355             MOV     A, #LCD_SETVISIBLE+100b ; display on + nocursor + noblink
                       356             CALL    WRCMD
                       357     ;==============Load setting from EEPROM=====================
                       358     LOADEEP:
                       359             MOV     R0, #ECONFIG
****ERROR:Labelwasalreadydefined:`loadeep'
                       360             CALL    IPR             ;read Back light & beep  status Result in R1
                       361             JB      EEPERR, READERR ;EEPROM error skip loading
                       362             MOV     CONFIG, R1
****ERROR:Expectedbitaddress:ACC.0
                       363             MOV     A, CONFIG       ;check backlight
                       364             MOV     AUTOBLSTAT, ACC.0       ;keep auto back light status
                       365     ;JB     ACC.0,$+5       ;back light on then skip
                       366     ;SETB   BL              ;turn off
                       367
                       368             MOV     R0, #EPID1      ;Read PID1 from eeprom
                       369             CALL    IPR
                       370             MOV     PID1, R1
                       371
                       372             MOV     R0, #EPID2      ;Read PID2 from eeprom
                       373             CALL    IPR
                       374             MOV     PID2, R1
                       375
                       376             MOV     R0, PID1        ;load limit pid from eeprom
                       377             CALL    IPR             ;Result in R1
                       378             MOV     LIMITCHK1, R1   ;keep in LIMITCHK1
                       379             MOV     R0, PID2        ;load limit pid from eeprom
                       380             CALL    IPR             ;Result in R1
                       381             MOV     LIMITCHK2, R1   ;keep in LIMITCHK2
                       382
                       383     ;etc add here
                       384             JMP     METER           ;Skip to METER (no error)
                       385     READERR:
                       386             MOV     A, CONFIG
****ERROR:Labelwasalreadydefined:`readerr'
                       387             CLR     ACC.4
                       388             MOV     CONFIG, A       ;turn off Warning Light mode
                       389             MOV     A, #LCD_SETDDADDR+40h   ;set address to line2
                       390             CALL    WRCMD
                       391             MOV     DPTR, #RDERR    ;Show EEprom error message
                       392             CALL    WRSTR
                       393             CALL    SOUND_BEEP
                       394             CALL    DEL500m
                       395             CALL    DEL500m
                       396             CALL    DEL500m
                       397             CALL    DEL500m
                       398             CALL    DEL500m
                       399             CALL    DEL500m
                       400     ;===========================================================
                       401     METER:
                       402             CALL    LINE1           ;first line PID display
****ERROR:Labelwasalreadydefined:`meter'
                       403             CALL    LINE2           ;second line PID display
                       404     ;send AT command
                       405             MOV     A, #0Dh
                       406             CALL    SBYTE           ;send CR to receive > and start receive data
                       407     ;*************** MAIN LOOP **********************************
                       408     MAIN:                           ;Main Loop
                       409     ;***** check PID mode and send command to ELM and show string to LCD
                       410             MOV     A, AUTOBLSTAT
****ERROR:Labelwasalreadydefined:`main'
                       411             JNB     ACC.0, $+12     ;Auto BLoff thenskip
                       412             JB      EEPWP, $+7      ;if LDR hi then jump
                       413             CLR     BL              ;turn on backlight
                       414             SJMP    $+4
                       415             SETB    BL              ;turn off backlight
                       416     ;---------------------------------------------
                       417             JB      BTNBL, $+11     ;toggle back light
                       418             CALL    BACKLIGHT
                       419             MOV     A, #0Dh
                       420             CALL    SBYTE           ;send CR to receive > and start receive data
                       421
                       422             JNB     BTNMENU, SETUP0 ;enter setup mode
                       423             JB      RI, RECEIVE     ;read back data from ELM
                       424     ;***** PID mode change button check**********
                       425     MAIN3:
                       426             JB      BTNUP, MAIN2    ;next mode Line1
****ERROR:Labelwasalreadydefined:`main3'
                       427             CALL    SOUND_TRIG
                       428             INC     PID1            ;add pid1+1
                       429             MOV     A, PID1
                       430             CALL    SKIPPID         ;skip unused PID mode
                       431             MOV     PID1, A         ;Return skipped PID mode
                       432
                       433             MOV     R0, PID1        ;load limit pid from eeprom
                       434             CALL    IPR             ;Result in R1
                       435             MOV     LIMITCHK1, R1   ;keep in LIMITCHK1
                       436
                       437             CALL    LINE1
                       438             CALL    DEL100m         ;keyboard delay
                       439             CALL    DEL100m         ;keyboard delay
                       440             CALL    DEL100m         ;keyboard delay
                       441     ;addition
                       442             MOV     A, #0Dh         ;send CR again
                       443             CALL    SBYTE
                       444             JMP     MAIN
                       445     ;------------
                       446     MAIN2:
                       447             JB      BTNDN, MAIN     ;next mode Line2
****ERROR:Labelwasalreadydefined:`main2'
                       448             CALL    SOUND_TRIG
                       449             INC     PID2            ;add pid1+1
                       450             MOV     A, PID2
                       451             CALL    SKIPPID         ;skip unused PID mode
                       452             MOV     PID2, A         ;Return skipped PID mode
                       453
                       454             MOV     R0, PID2        ;load limit pid from eeprom
                       455             CALL    IPR             ;Result in R1
                       456             MOV     LIMITCHK2, R1   ;keep in LIMITCHK2
                       457
                       458             CALL    LINE2           ;Update LCD
                       459             CALL    DEL100m         ;keyboard delay
                       460             CALL    DEL100m         ;keyboard delay
                       461             CALL    DEL100m         ;keyboard delay
                       462     ;adddition
                       463             MOV     A, #0Dh
                       464             CALL    SBYTE
                       465             JMP     MAIN
                       466     SETUP0:
                       467             AJMP    SETUP
****ERROR:Labelwasalreadydefined:`setup0'
                       468     ;=========END MAIN LOOP=================
                       469     RECEIVE:
                       470             CALL    RBLOCK
****ERROR:Labelwasalreadydefined:`receive'
                       471             MOV     A, PIDTURN
                       472             CJNE    A, #01h, PIDTURN2       ;if PIDTURN<> 1 then goto PIDTURN2
                       473     ;LCD LINE1**********************************
                       474     ;CALL   LINE1           ;Display PID mode in LINE1
                       475             CALL    GETB1B2         ;Translate ASCII in buffer to Hex Data and keep in B1,B2
                       476             MOV     R2, PID1        ;keep PID1 mode in R2 for CALCULATE
                       477             CALL    CALCULATE       ;Determine PID mode / calculate /translate to ASCII / keep in BUFFER/
                       478             CALL    LIGHT1          ;check warning lamp
                       479     ;------Write Result to LCD lin1
                       480             MOV     A, #LCD_SETDDADDR       ;set address in LCD to write result in LINE1
                       481             ADD     A, WRADDL1      ;add write address
                       482             CALL    WRCMD
                       483             MOV     R1, RESULTLEN   ;R1 = Length of result to display
                       484             MOV     R0, #BUFFER     ;R0 point to buffer
                       485     LENGTH1:
                       486             MOV     A, @R0          ;load char in A
****ERROR:Labelwasalreadydefined:`length1'
                       487             CALL    WRCHAR
                       488             INC     R0
                       489             DJNZ    R1, LENGTH1     ;loop til end of length
                       490     ;check PID2 mode & send AT cmd to ELM
                       491             MOV     PIDTURN, #02h   ;set  PIDTURN = 2
                       492     ;check MODE22 to send 221E1C
                       493             MOV     A, PID2
                       494             CJNE    A, #22h, MODE011        ;check if PID is 22h then send 221E1C for TFT
                       495             CALL    SEND221E1C      ;send sub routine
                       496             AJMP    MAIN3           ;
                       497     MODE011:
                       498             MOV     A, #30h
****ERROR:Labelwasalreadydefined:`mode011'
                       499             CALL    SBYTE           ;send char0
                       500             MOV     A, #31h
                       501             CALL    SBYTE           ;send char1
                       502             MOV     A, PID2         ;keep pid2 in temp
                       503             SWAP    A
                       504             ANL     A, #0Fh
                       505             MOV     R1, A
                       506             CALL    HTOA
                       507             CALL    SBYTE           ;send higt byte
                       508             MOV     A, PID2         ;keep pid2 in temp
                       509             ANL     A, #0Fh
                       510             MOV     R1, A
                       511             CALL    HTOA
                       512             CALL    SBYTE           ;send low byte
                       513             MOV     A, #0Dh
                       514             CALL    SBYTE           ;send CR
                       515             AJMP    MAIN3
                       516     ;LINE2********************************************
                       517     PIDTURN2:
                       518     ;CALL   LINE2           ;Display PID mode in LINE2
                       519             CALL    GETB1B2         ;Translate ASCII in buffer to Hex Data and keep in B1,B2
****ERROR:Labelwasalreadydefined:`pidturn2'
                       520             MOV     R2, PID2        ;keep PID2 mode in R2 for CALCULATE
                       521             CALL    CALCULATE       ;Determine PID mode / calculate /translate to ASCII / keep in BUFFER/
                       522             CALL    LIGHT2          ;check warning lamp
                       523     ;-------Write Result to LCD lin2
                       524             MOV     A, #LCD_SETDDADDR+40h   ;set address in LCD to write result in LINE2
                       525             ADD     A, WRADDL2
                       526             CALL    WRCMD
                       527             MOV     R1, RESULTLEN   ;R1 = Length of result to display
                       528             MOV     R0, #BUFFER     ;R0 point to buffer
                       529     LENGTH2:
                       530             MOV     A, @R0          ;load char in A
****ERROR:Labelwasalreadydefined:`length2'
                       531             CALL    WRCHAR
                       532             INC     R0
                       533             DJNZ    R1, LENGTH2
                       534     ;check PID2 mode & send AT cmd to ELM
                       535             MOV     PIDTURN, #01h   ;set PIDTURN = 1
                       536     ;check MODE22 to send 221E1C
                       537             MOV     A, PID1
                       538             CJNE    A, #22h, MODE012        ;check if PID is 22h then send 221E1C for TFT
                       539             CALL    SEND221E1C      ;send sub routine
                       540             AJMP    MAIN3           ;
                       541     MODE012:
                       542             MOV     A, #30h
****ERROR:Labelwasalreadydefined:`mode012'
                       543             CALL    SBYTE           ;send char0
                       544             MOV     A, #31h
                       545             CALL    SBYTE           ;send char1
                       546             MOV     A, PID1         ;keep pid1 in temp
                       547             SWAP    A
                       548             ANL     A, #0Fh
                       549             MOV     R1, A
                       550             CALL    HTOA
                       551             CALL    SBYTE           ;send higt byte
                       552             MOV     A, PID1         ;keep pid1 in temp
                       553             ANL     A, #0Fh
                       554             MOV     R1, A
                       555             CALL    HTOA
                       556             CALL    SBYTE           ;send low byte
                       557             MOV     A, #0Dh
                       558             CALL    SBYTE           ;send CR
                       559             AJMP    MAIN3
                       560     ;********************END of Program*****************************
                       561     CONSUMP0:
                       562             AJMP    CONSUMP
****ERROR:Labelwasalreadydefined:`consump0'
                       563
                       564     SETUP:                          ; test setup menu
                       565             CLR     LEDUP           ;turn off LED
****ERROR:Labelwasalreadydefined:`setup'
                       566             CLR     LEDDN
                       567             CALL    SOUND_BEEP
                       568             MOV     R4, #0Ah
                       569     DEL5m1:
                       570             MOV     R5, #064h
****ERROR:Labelwasalreadydefined:`del5m1'
                       571     DEL5m3:
                       572             MOV     R7, #03h
****ERROR:Labelwasalreadydefined:`del5m3'
                       573     DEL5m2:
                       574             MOV     R6, #098h
****ERROR:Labelwasalreadydefined:`del5m2'
                       575             JB      BTNMENU, CONSUMP0       ;goto fuel consumption mode
                       576             DJNZ    R6, $-3
                       577             DJNZ    R7, DEL5m2
                       578             DJNZ    R5, DEL5m3
                       579             DJNZ    R4, DEL5m1      ;end delay loop
                       580
                       581             MOV     A, #LCD_SETDDADDR+00    ;Line 1
                       582             CALL    WRCMD
                       583             MOV     DPTR, #MENU1
                       584             CALL    WRSTR
                       585             MOV     A, #LCD_SETDDADDR+40h   ;Line2
                       586             CALL    WRCMD
                       587             MOV     DPTR, #MENU2
                       588             CALL    WRSTR
                       589     ;select mode here
                       590     ;**************************
                       591     SELECT:
                       592             JB      BTNBL, $+6      ;toggle backlight
****ERROR:Labelwasalreadydefined:`select'
                       593             CALL    BACKLIGHT
                       594             JB      BTNDN, GOSET    ;if press down button goto Special function
                       595             AJMP    SPLFUNC
                       596     GOSET:
                       597             JB      BTNUP, SELECT
****ERROR:Labelwasalreadydefined:`goset'
                       598     ;Enter setup menu
                       599     ;1) set up Auto Backlight
                       600             CALL    SOUND_TRIG
                       601             MOV     A, #LCD_CLS
                       602             CALL    WRCMD
                       603             CALL    DEL100m
                       604             MOV     A, #LCD_SETDDADDR+00    ;Line 1
                       605             CALL    WRCMD
                       606             MOV     DPTR, #MENU11   ;set up back light
                       607             CALL    WRSTR
                       608             MOV     A, #LCD_SETDDADDR+40h   ;Line 1
                       609             CALL    WRCMD
                       610             MOV     DPTR, #TOGGLE   ;TOGGLE Here
                       611             CALL    WRSTR
                       612     BLSTATUS:
                       613             MOV     A, #LCD_SETDDADDR+40h   ;Line 1 set address to write ON or OFF
****ERROR:Labelwasalreadydefined:`blstatus'
                       614             CALL    WRCMD
                       615             MOV     A, CONFIG       ;read current status bit0
                       616             JNB     ACC.0, BLOFF    ;if ACC.0 = 0 then goto BLOFF
                       617             MOV     A, #4Fh         ;O char
                       618             CALL    WRCHAR
                       619             MOV     A, #4Eh         ;N char
                       620             CALL    WRCHAR
                       621             MOV     A, #20h         ;space char
                       622             CALL    WRCHAR
                       623             CLR     BL              ;turn on
                       624             JMP     SETBL           ;jump to set backlight
                       625     BLOFF:
                       626             MOV     A, #4Fh         ;O char
****ERROR:Labelwasalreadydefined:`bloff'
                       627             CALL    WRCHAR
                       628             MOV     A, #46h         ;F char
                       629             CALL    WRCHAR
                       630             MOV     A, #46h         ;F char
                       631             CALL    WRCHAR
                       632             SETB    BL              ;turn off
                       633     SETBL:
                       634             CALL    DEL500m         ;keyboard delay
****ERROR:Labelwasalreadydefined:`setbl'
                       635             JB      BTNBL, $+6      ;toggle backlight
                       636             CALL    BACKLIGHT
                       637             JNB     BTNUP, SETSOUND ;press to skip to set sound
                       638             JB      BTNDN, $-9
                       639             CALL    SOUND_TRIG
                       640             MOV     A, CONFIG
                       641             CPL     ACC.0           ;toggle value
                       642             MOV     CONFIG, A
                       643             MOV     AUTOBLSTAT, A
                       644             JMP     BLSTATUS        ;refresh status
                       645     ;-------------------------------------------
                       646     ;2. SET BEEP SOUND
                       647     SETSOUND:
                       648             CALL    SOUND_TRIG
****ERROR:Labelwasalreadydefined:`setsound'
                       649             MOV     A, #LCD_CLS
                       650             CALL    WRCMD
                       651             CALL    DEL100m
                       652             MOV     A, #LCD_SETDDADDR+00    ;Line 1
                       653             CALL    WRCMD
                       654             MOV     DPTR, #MENU12   ;set BEEP on/OFF
                       655             CALL    WRSTR
                       656             MOV     A, #LCD_SETDDADDR+40h   ;Line 1
                       657             CALL    WRCMD
                       658             MOV     DPTR, #TOGGLE   ;TOGGLE Here
                       659             CALL    WRSTR
                       660     BEEPSTATUS:
                       661             MOV     A, #LCD_SETDDADDR+40h   ;Line 1 set address to write ON or OFF
****ERROR:Labelwasalreadydefined:`beepstatus'
                       662             CALL    WRCMD
                       663             MOV     A, CONFIG       ;check beep on/off status bit 1
                       664             JNB     ACC.1, BEEPOFF  ;goto beep off
                       665             MOV     A, #4Fh         ;O char
                       666             CALL    WRCHAR
                       667             MOV     A, #4Eh         ;N char
                       668             CALL    WRCHAR
                       669             MOV     A, #20h         ;space char
                       670             CALL    WRCHAR
                       671             JMP     SETBEEP         ;jump to set beep
                       672     BEEPOFF:
                       673             MOV     A, #4Fh         ;O char
****ERROR:Labelwasalreadydefined:`beepoff'
                       674             CALL    WRCHAR
                       675             MOV     A, #46h         ;F char
                       676             CALL    WRCHAR
                       677             MOV     A, #46h         ;F char
                       678             CALL    WRCHAR
                       679     SETBEEP:
                       680             CALL    DEL500m         ;keyboard delay
****ERROR:Labelwasalreadydefined:`setbeep'
                       681             JB      BTNBL, $+6      ;toggle backlight
                       682             CALL    BACKLIGHT
                       683             JNB     BTNUP, SETUPPID ;skip to setup pid1&2
                       684             JB      BTNDN, $-9
                       685             CALL    SOUND_TRIG
                       686             MOV     A, CONFIG
                       687             CPL     ACC.1           ;toggle value
                       688             MOV     CONFIG, A
                       689             JMP     BEEPSTATUS      ;refresh status
                       690     ;--------------
                       691     ;3. SET startup PID1
                       692     SETUPPID:
                       693             CALL    SOUND_TRIG
****ERROR:Labelwasalreadydefined:`setuppid'
                       694             MOV     A, #LCD_CLS
                       695             CALL    WRCMD
                       696             CALL    DEL100m
                       697             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       698             CALL    WRCMD
                       699             MOV     DPTR, #MENU13   ;PID1
                       700             CALL    WRSTR
                       701     SETPID1:
                       702             CALL    LINE1           ;write current PID to line1
****ERROR:Labelwasalreadydefined:`setpid1'
                       703             CALL    DEL500m         ;keyboard delay
                       704             JB      BTNBL, $+6      ;toggle backlight
                       705             CALL    BACKLIGHT
                       706             JNB     BTNUP, PID1OK   ;
                       707             JB      BTNDN, $-9      ;Wait BTN down press
                       708             CALL    SOUND_TRIG
                       709             INC     PID1            ;add pid1+1
                       710             MOV     A, PID1
                       711             CALL    SKIPPID         ;skip unused PID mode
                       712             MOV     PID1, A         ;Return skipped PID mode
                       713             JMP     SETPID1
                       714     PID1OK:                         ;select OK then write to eeprom
                       715             MOV     R0, #EPID1      ;save in eeprom
****ERROR:Labelwasalreadydefined:`pid1ok'
                       716             MOV     R1, PID1
                       717             CALL    IPW
                       718     ;4. SET statup PID2
                       719             CALL    SOUND_TRIG
                       720             MOV     A, #LCD_CLS
                       721             CALL    WRCMD
                       722             CALL    DEL100m
                       723             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       724             CALL    WRCMD
                       725             MOV     DPTR, #MENU14   ;PID2
                       726             CALL    WRSTR
                       727     SETPID2:
                       728             CALL    LINE2           ;write current PID to line1
****ERROR:Labelwasalreadydefined:`setpid2'
                       729             CALL    DEL500m         ;keyboard delay
                       730             JB      BTNBL, $+6      ;toggle backlight
                       731             CALL    BACKLIGHT
                       732             JNB     BTNUP, PID2OK
                       733             JB      BTNDN, $-9      ;Wait BTN down press
                       734             CALL    SOUND_TRIG
                       735             INC     PID2            ;add pid2+1
                       736             MOV     A, PID2
                       737             CALL    SKIPPID         ;skip unused PID mode
                       738             MOV     PID2, A         ;Return skipped PID mode
                       739             JMP     SETPID2
                       740     PID2OK:                         ;select OK then write to eeprom
                       741             MOV     R0, #EPID2      ;save eeprom
****ERROR:Labelwasalreadydefined:`pid2ok'
                       742             MOV     R1, PID2
                       743             CALL    IPW
                       744     ;5 Set Lightup Value for Each PID
                       745             CALL    SOUND_TRIG
                       746             MOV     A, #LCD_CLS
                       747             CALL    WRCMD
                       748             CALL    DEL100m
                       749             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       750             CALL    WRCMD
                       751             MOV     DPTR, #MENU15   ;Warning Vaule
                       752             CALL    WRSTR
                       753             MOV     A, #LCD_SETDDADDR+40h   ;Line 1
                       754             CALL    WRCMD
                       755             MOV     DPTR, #TOGGLE   ;TOGGLE Here
                       756             CALL    WRSTR
                       757     PIDSTATUS:
                       758             MOV     A, #LCD_SETDDADDR+40h   ;Line 1 set address to write ON or OFF
****ERROR:Labelwasalreadydefined:`pidstatus'
                       759             CALL    WRCMD
                       760             MOV     A, CONFIG       ;check beep on/off status bit 1
                       761             JNB     ACC.3, PIDOFF   ;goto PID off
                       762             MOV     A, #4Fh         ;O char
                       763             CALL    WRCHAR
                       764             MOV     A, #4Eh         ;N char
                       765             CALL    WRCHAR
                       766             MOV     A, #20h         ;space char
                       767             CALL    WRCHAR
                       768             JMP     SETPID          ;jump to set PID
                       769     PIDOFF:
                       770             MOV     A, #4Fh         ;O char
****ERROR:Labelwasalreadydefined:`pidoff'
                       771             CALL    WRCHAR
                       772             MOV     A, #46h         ;F char
                       773             CALL    WRCHAR
                       774             MOV     A, #46h         ;F char
                       775             CALL    WRCHAR
                       776     SETPID:
                       777             CALL    DEL500m         ;keyboard delay
****ERROR:Labelwasalreadydefined:`setpid'
                       778             JB      BTNBL, $+6      ;toggle backlight
                       779             CALL    BACKLIGHT
                       780             JNB     BTNUP, AUTOSLEEP        ;skip to set autosleep
                       781             JB      BTNDN, $-9
                       782             CALL    SOUND_TRIG
                       783             MOV     A, CONFIG
                       784             CPL     ACC.3           ;toggle value
                       785             MOV     CONFIG, A
                       786             JMP     PIDSTATUS       ;refresh status
                       787     ;--------------
                       788     ;6. Set Auto Sleep Mode
                       789     AUTOSLEEP:
                       790             CALL    SOUND_TRIG
****ERROR:Labelwasalreadydefined:`autosleep'
                       791             MOV     A, #LCD_CLS
                       792             CALL    WRCMD
                       793             CALL    DEL100m
                       794             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       795             CALL    WRCMD
                       796             MOV     DPTR, #MENU16   ;Warning Vaule
                       797             CALL    WRSTR
                       798             MOV     A, #LCD_SETDDADDR+40h   ;Line 1
                       799             CALL    WRCMD
                       800             MOV     DPTR, #TOGGLE   ;TOGGLE Here
                       801             CALL    WRSTR
                       802     SLEEPSTATUS:
                       803             MOV     A, #LCD_SETDDADDR+40h   ;Line 1 set address to write ON or OFF
****ERROR:Labelwasalreadydefined:`sleepstatus'
                       804             CALL    WRCMD
                       805             MOV     A, CONFIG       ;check beep on/off status bit 1
                       806             JNB     ACC.4, SLEEPOFF ;goto PID off
                       807             MOV     A, #4Fh         ;O char
                       808             CALL    WRCHAR
                       809             MOV     A, #4Eh         ;N char
                       810             CALL    WRCHAR
                       811             MOV     A, #20h         ;space char
                       812             CALL    WRCHAR
                       813             JMP     SETSLEEP        ;jump to set sleep
                       814     SLEEPOFF:
                       815             MOV     A, #4Fh         ;O char
****ERROR:Labelwasalreadydefined:`sleepoff'
                       816             CALL    WRCHAR
                       817             MOV     A, #46h         ;F char
                       818             CALL    WRCHAR
                       819             MOV     A, #46h         ;F char
                       820             CALL    WRCHAR
                       821     SETSLEEP:
                       822             CALL    DEL500m         ;keyboard delay
****ERROR:Labelwasalreadydefined:`setsleep'
                       823             JB      BTNBL, $+6      ;toggle backlight
                       824             CALL    BACKLIGHT
                       825             JNB     BTNUP, VERSION  ;skip to firmware Version
                       826             JB      BTNDN, $-9
                       827             CALL    SOUND_TRIG
                       828             MOV     A, CONFIG
                       829             CPL     ACC.4           ;toggle value
                       830             MOV     CONFIG, A
                       831             JMP     SLEEPSTATUS     ;refresh status
                       832     ;--------------
                       833     ;7  Firmware Version
                       834     VERSION:
                       835             CALL    SOUND_TRIG
****ERROR:Labelwasalreadydefined:`version'
                       836             MOV     A, #LCD_CLS
                       837             CALL    WRCMD
                       838             CALL    DEL100m
                       839             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                       840             CALL    WRCMD
                       841             MOV     DPTR, #MENU17   ;Upgrade Fimrware
                       842             CALL    WRSTR
                       843             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                       844             CALL    WRCMD
                       845             MOV     DPTR, #RELEASE  ;Release Date
                       846             CALL    WRSTR
                       847             CALL    DEL500m         ;keyboard delay
                       848             JB      BTNBL, $+6      ;toggle backlight
                       849             CALL    BACKLIGHT
                       850             JB      BTNUP, $-6      ;Repeat til press to exit
                       851             CALL    SOUND_TRIG
                       852             CALL    DEL500m         ;keyboard delay
                       853     ;write setting in EEPROM
                       854             MOV     R1, CONFIG      ;Save CONFIG setting before getting out
                       855             MOV     R0, #ECONFIG    ;set eeprom address
                       856             CALL    IPW             ;Write setting to eeprom
                       857             JB      EEPERR, WRITEERR        ;no error exit setup
                       858             AJMP    METER           ;goback to main loop
                       859     WRITEERR:                       ;eepromp writing error
                       860             MOV     A, #LCD_SETDDADDR+40h   ;set address to line2
****ERROR:Labelwasalreadydefined:`writeerr'
                       861             CALL    WRCMD
                       862             MOV     DPTR, #WRERR    ;Show EEprom error message
                       863             CALL    WRSTR
                       864             CALL    SOUND_BEEP
                       865             CALL    DEL500m
                       866             CALL    DEL500m
                       867             CALL    DEL500m
                       868             CALL    DEL500m
                       869             CALL    DEL500m
                       870             CALL    DEL500m
                       871             AJMP    METER           ;goback to main loop
                       872     ;********************************************************
                       873     ;Special Function Menu
                       874     SPLFUNC:
                       875     ;VIN
                       876             CALL    SOUND_TRIG
****ERROR:Labelwasalreadydefined:`splfunc'
                       877             MOV     A, #LCD_CLS
                       878             CALL    WRCMD
                       879             CALL    DEL100m
                       880             MOV     A, #LCD_SETDDADDR+00    ;Line 1
                       881             CALL    WRCMD
                       882             MOV     DPTR, #VEHINFO  ;show vehicle information no.
                       883             CALL    WRSTR
                       884     ;additional code here ????
                       885             CALL    DEL500m         ;keyboard delay
                       886             JB      BTNBL, $+6      ;toggle backlight
                       887             CALL    BACKLIGHT
                       888             JB      BTNUP, $-6
                       889     ;--------------------------------
                       890     ;NO of DTC
                       891             CALL    SOUND_TRIG
                       892             MOV     A, #LCD_CLS
                       893             CALL    WRCMD
                       894             CALL    DEL100m
                       895             MOV     A, #LCD_SETDDADDR+00    ;Line 1
                       896             CALL    WRCMD
                       897             MOV     DPTR, #DTC      ;no. of DTC
                       898             CALL    WRSTR
                       899             CLR     RI              ;clear RI
                       900             MOV     DPTR, #DTCPID
                       901             CALL    SBLOCK          ;send 0101
                       902             CALL    RBLOCK          ;receive result from ELM
                       903             CALL    GETB1B2         ;get Byte1 Byte2
                       904             MOV     A, B1
                       905             JZ      SHOWDTC         ;IF B1=0 then goto SHOWDTC else next
                       906             SUBB    A, #80h         ;A - 80h = DTC no.
                       907             MOV     B1, A           ;keep no. DTC in B1
                       908     SHOWDTC:
                       909             MOV     DPTR, #0000h
****ERROR:Labelwasalreadydefined:`showdtc'
                       910             MOV     DPL, B1
                       911             CALL    HTOD            ;Result in R3
                       912             MOV     A, #LCD_SETDDADDR+17    ;set cursor position
                       913             CALL    WRCMD
                       914             MOV     A, R3
                       915             SWAP    A               ;get High nibble
                       916             ANL     A, #0Fh
                       917             ADD     A, #30h
                       918             CALL    WRCHAR          ;write 1st digit
                       919             MOV     A, R3
                       920             ANL     A, #0Fh
                       921             ADD     A, #30h
                       922             CALL    WRCHAR          ;write 2nd digit
                       923             MOV     A, #LCD_SETDDADDR+40h   ;set to Line2
                       924             CALL    WRCMD
                       925     ;check DTC no. = 0 or not
                       926             MOV     A, B1           ;Read NO OF DTC
                       927             JNZ     MILISON         ;if MIL off jump MILISON
                       928             MOV     DPTR, #MILOFF
                       929             CALL    WRSTR
                       930             CALL    DEL500m         ;check keyboard delay
                       931             JB      BTNBL, $+6      ;toggle backlight
                       932             CALL    BACKLIGHT
                       933             JB      BTNUP, $-6
                       934             CALL    SOUND_TRIG
                       935     ;----------------------
                       936             CALL    DEL500m         ;keyboard delay
                       937             AJMP    METER           ;back to PID mode
                       938     ;----------------------
                       939     MILISON:                        ;MIL is on next show DTCs
                       940             SETB    LEDUP           ;turn on LED UP
****ERROR:Labelwasalreadydefined:`milison'
                       941             MOV     DPTR, #MILON    ;show message 'Press to read DTC ->'
                       942             CALL    WRSTR
                       943             CALL    SOUND_BEEP      ;BEEP warning
                       944             CALL    DEL500m         ;check keyboard delay
                       945             JB      BTNBL, $+6      ;toggle backlight
                       946             CALL    BACKLIGHT
                       947             JB      BTNDN, $-6
                       948             CALL    SOUND_TRIG
                       949             MOV     A, #LCD_SETDDADDR+40h   ;set to Line2
                       950             CALL    WRCMD
                       951             MOV     DPTR, #DISPDTC
                       952             CALL    WRSTR
                       953     ;Read Diagnosis troube code and show here
                       954             MOV     DPTR, #DTCREAD  ;send 03 to read all DTC
                       955             CALL    SBLOCK
                       956             CALL    RBLOCK          ;Receive DTC in buffer
                       957             MOV     @R0, A          ;Keep '>' in buffer
                       958     ;------------------- DTC interpreter start here ------------------------
                       959     ;DTC Header checking 43 first
                       960             MOV     R0, #19h        ;R0 point to buffer
                       961     CHECK4:
                       962             INC     R0
****ERROR:Labelwasalreadydefined:`check4'
                       963             CJNE    @R0, #34h, CHECK4       ;check 43 (check only 4)
                       964             INC     R0
                       965             CJNE    @R0, #33h, CHECK4
                       966             MOV     A, R0           ;found 43
                       967             ADD     A, #04h         ;skip no of DTC byte
                       968             MOV     R0, A           ;R0 point to the first byte of DTC
                       969             MOV     TEMP3, #00h     ;Counter DTC
                       970
                       971     DTC1READ:
                       972             MOV     A, #LCD_SETDDADDR+40h   ;set to Line2
****ERROR:Labelwasalreadydefined:`dtc1read'
                       973             CALL    WRCMD
                       974
                       975     DTCINTP:
                       976             INC     R0
****ERROR:Labelwasalreadydefined:`dtcintp'
                       977             CJNE    @R0, #3Eh, $+6  ;check '>' if not interpret code now
                       978             JMP     CLEARMIL        ;exit to CLEAR MIL
                       979             INC     R0
                       980             CJNE    @R0, #3Eh, $+6  ;check '>' if not interpret code now
                       981             JMP     CLEARMIL        ;exit to CLEAR MIL
                       982             DEC     R0
                       983             CJNE    @R0, #20h, $+5  ;check 'SP'
                       984             JMP     DTCINTP
                       985             CJNE    @R0, #0Dh, $+5  ;check 'CR'
                       986             JMP     DTCINTP
                       987             CJNE    @R0, #3Ah, $+5  ;check ':'
                       988             JMP     DTCINTP
                       989             INC     R0              ;skip to check next byte
                       990             CJNE    @R0, #3Ah, $+5  ;check ':' next byte
                       991             JMP     DTCINTP
                       992             DEC     R0              ;IF not  1: back last byte
                       993     ;check #00 value to exit from read DTC
                       994             CJNE    @R0, #30h, SKIPNULL1
                       995             INC     R0
                       996             CJNE    @R0, #30h, SKIPNULL2
                       997             JMP     CLEARMIL        ;IF read data is 00 then skip to clear MIL
                       998     SKIPNULL2:
                       999             DEC     R0
****ERROR:Labelwasalreadydefined:`skipnull2'
                      1000     SKIPNULL1:
                      1001     ;1 DTC code read checking for CR
                      1002     ;display to LCD  write number first
                      1003             MOV     TEMP1, R0       ;keep R0
****ERROR:Labelwasalreadydefined:`skipnull1'
                      1004             MOV     DPTR, #0000h
                      1005             INC     TEMP3
                      1006             MOV     DPL, TEMP3
                      1007             CALL    HTOD            ;convert counter to dec output R3
                      1008             MOV     A, R3
                      1009             ANL     A, #11110000b
                      1010             SWAP    A
                      1011             CALL    HTOA
                      1012             CALL    WRCHAR          ;write 1st digit
                      1013             MOV     A, R3
                      1014             ANL     A, #00001111b
                      1015             CALL    HTOA
                      1016             CALL    WRCHAR
                      1017             MOV     A, #2Dh         ; '-' sign
                      1018             CALL    WRCHAR
                      1019             MOV     R0, TEMP1       ;return R0
                      1020     ;interpret now
                      1021             CALL    INTPDTC         ;inteprte troube code ,save result PX in buffer
                      1022             MOV     A, R1           ;show DTC 1st digit
                      1023             CALL    WRCHAR
                      1024             MOV     A, R2           ;show DTC 2nd digit
                      1025             CALL    WRCHAR
                      1026     ;PX read now read remaining 3 byte code
                      1027             INC     R0              ;point to next byte
                      1028             MOV     A, @R0
                      1029             CALL    WRCHAR          ;show DTC 3rd digit
                      1030             INC     R0              ;skip space
                      1031             INC     R0
                      1032             MOV     A, @R0
                      1033             CALL    WRCHAR          ;show DTC 4th digit
                      1034             INC     R0
                      1035             MOV     A, @R0
                      1036             CALL    WRCHAR          ;show DTC 5th digit
                      1037     ;read next line here
                      1038             CALL    DEL500m         ;check keyboard delay
                      1039             JB      BTNBL, $+6      ;toggle backlight
                      1040             CALL    BACKLIGHT
                      1041             JB      BTNDN, $-6
                      1042             CALL    SOUND_TRIG
                      1043             JMP     DTC1READ        ;Jump back to read next couple byte
                      1044     ;change end code from CR to 00
                      1045     CLEARMIL:
                      1046     ;No more DTC Clear MIL status or not
                      1047             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
****ERROR:Labelwasalreadydefined:`clearmil'
                      1048             CALL    WRCMD
                      1049             MOV     DPTR, #SETMIL   ;Clear MIL  |  [NO ]->
                      1050             CALL    WRSTR
                      1051             MOV     TEMP3, #00      ;TEMP3= 00  -> not clear ,TEMP3=1 -> clear MIL
                      1052     MILSTATUS:
                      1053             MOV     A, #LCD_SETDDADDR+4Fh   ;Line 2 set address to write YES or NO
****ERROR:Labelwasalreadydefined:`milstatus'
                      1054             CALL    WRCMD
                      1055             MOV     A, TEMP3
                      1056             JNB     ACC.0, NOTCLR   ;no MIL clear
                      1057             MOV     A, #59h         ;Y char
                      1058             CALL    WRCHAR
                      1059             MOV     A, #45h         ;E char
                      1060             CALL    WRCHAR
                      1061             MOV     A, #53h         ;S char
                      1062             CALL    WRCHAR
                      1063             JMP     SETMILOFF       ;jump to set MIL off
                      1064     NOTCLR:
                      1065             MOV     A, #4Eh         ;N char
****ERROR:Labelwasalreadydefined:`notclr'
                      1066             CALL    WRCHAR
                      1067             MOV     A, #4Fh         ;O char
                      1068             CALL    WRCHAR
                      1069             MOV     A, #20h         ;Space
                      1070             CALL    WRCHAR
                      1071     SETMILOFF:
                      1072             CALL    DEL500m         ;keyboard delay
****ERROR:Labelwasalreadydefined:`setmiloff'
                      1073             JB      BTNBL, $+6      ;toggle backlight
                      1074             CALL    BACKLIGHT
                      1075             JNB     BTNUP, SPLEXIT  ;skip to exit special function
                      1076             JB      BTNDN, $-9
                      1077             CALL    SOUND_TRIG
                      1078             MOV     A, TEMP3
                      1079             CPL     ACC.0           ;toggle value
                      1080             MOV     TEMP3, A
                      1081             JMP     MILSTATUS       ;refresh status
                      1082     SPLEXIT:
                      1083             MOV     A, TEMP3
****ERROR:Labelwasalreadydefined:`splexit'
                      1084             JNB     ACC.0, $+9      ;NO then skip CLR MIL
                      1085     ;send CLRMIL  0400 Message Here
                      1086             MOV     DPTR, #CLRMIL
                      1087             CALL    SBLOCK
                      1088             CALL    DEL500m         ;keyboard delay
                      1089             AJMP    METER           ;back to PID mode
                      1090     ;----------------------
                      1091     ;***********END CONFIG******************
                      1092     CONSUMP:
                      1093             MOV     A, #LCD_CLS
****ERROR:Labelwasalreadydefined:`consump'
                      1094             CALL    WRCMD
                      1095             CALL    DEL100m
                      1096             MOV     A, #LCD_SETDDADDR+00    ;Line 1
                      1097             CALL    WRCMD
                      1098             MOV     DPTR, #SPDMAF
                      1099             CALL    WRSTR
                      1100             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                      1101             CALL    WRCMD
                      1102             MOV     A, CONFIG       ;check default FC mode
                      1103             JB      ACC.2, AVRMODE  ;goto average mode
                      1104     ;Instant mode
                      1105             MOV     DPTR, #INSTFC
                      1106             CALL    WRSTR
                      1107             JMP     CONSUMP2
                      1108     AVRMODE:
                      1109             MOV     DPTR, #AVRFC
****ERROR:Labelwasalreadydefined:`avrmode'
                      1110             CALL    WRSTR
                      1111
                      1112     CONSUMP2:                       ;calculate loop
                      1113     ;---Get Vehicle Speed
                      1114             MOV     DPTR, #SPDPID
****ERROR:Labelwasalreadydefined:`consump2'
                      1115             CALL    SBLOCK          ;send 010D to ELM
                      1116             CALL    RBLOCK
                      1117             CALL    GETB1B2
                      1118             MOV     TEMP1, B1       ;keep speed in temp1
                      1119             CALL    FORMULA3        ;calculate speed result in BUFFER
                      1120             MOV     A, #LCD_SETDDADDR+0     ;set cursot line1
                      1121             CALL    WRCMD
                      1122             MOV     R1, RESULTLEN
                      1123             MOV     R0, #BUFFER     ;point to buffer
                      1124     VEHSPD:
                      1125             MOV     A, @R0          ;load char in A
****ERROR:Labelwasalreadydefined:`vehspd'
                      1126             CALL    WRCHAR
                      1127             INC     R0
                      1128             DJNZ    R1, VEHSPD      ;loop til end of length
                      1129     ;---Get Manifold Air Flow
                      1130             MOV     DPTR, #MAFPID
                      1131             CALL    SBLOCK          ;send 010D to ELM
                      1132             CALL    RBLOCK
                      1133             CALL    GETB1B2
                      1134             MOV     TEMP2, B1       ;keep airflow in temp2
                      1135             MOV     TEMP3, B2       ;keep airflow in temp3
                      1136             CALL    AIRFLOW         ;calculate airflow result in buffer
                      1137             MOV     A, #LCD_SETDDADDR+11    ;set cursor line1
                      1138             CALL    WRCMD
                      1139             MOV     R1, RESULTLEN
                      1140             MOV     R0, #BUFFER     ;point to buffer
                      1141     MAF:
                      1142             MOV     A, @R0          ;load char in A
****ERROR:Labelwasalreadydefined:`maf'
                      1143             CALL    WRCHAR
                      1144             INC     R0
                      1145             DJNZ    R1, MAF         ;loop til end of length
                      1146     ;calculate fuel consumption & display on Line 2
                      1147     ;FC = (speed x 1Dhx0Ah)/ (Airflow /0Ah)  [100%]
                      1148             MOV     R1, TEMP2       ;Airflow /0Ah
                      1149             MOV     R0, TEMP3
                      1150             MOV     R3, #00h
                      1151             MOV     R2, #0Ah
                      1152             CALL    UDIV16          ;result in R1,R0
                      1153             MOV     TEMP2, R1
                      1154             MOV     TEMP3, R0
                      1155
                      1156             MOV     R1, #00h
                      1157             MOV     R0, TEMP1       ;Speed x 1Dhx0Ah = Speedx 122h
                      1158             MOV     R3, #01h
                      1159     ;FC = (speed x 1Ch,x0Ah)/(Airflow/0Ah)   [ 5% compensation]
                      1160             MOV     R2, #13h
                      1161     ;MOV    R2,#22h         ;100%
                      1162             CALL    UMUL16          ;result in R3,R2,R1,R0 (use only R1 R0)
                      1163             MOV     R3, TEMP2       ;prepare divider
                      1164             MOV     R2, TEMP3
                      1165
                      1166             CALL    UDIV16          ;result in R1,R0
                      1167     ;end FC calculate
                      1168             MOV     DPH, R1         ;keep result in DPTR
                      1169             MOV     DPL, R0
                      1170     ;check F/C mode
                      1171             MOV     A, CONFIG
                      1172             JNB     ACC.2, INSTMODE ;skip to INSTANT mode
                      1173
                      1174     ;keep logging data in iram 80h-FFh
                      1175             INC     FCPTR
                      1176             MOV     R0, FCPTR       ;#80h
                      1177             MOV     @R0, DPH
                      1178             INC     R0              ;#81h
                      1179             MOV     @R0, DPL
                      1180             MOV     FCPTR, R0       ;#81h
                      1181
                      1182             MOV     A, FCPTR        ;check end of data at 0FFh or not
                      1183             CJNE    A, #0FFh, FCKEY ;not end of data jump to FCKEY
                      1184     ;Start average here
                      1185             MOV     R0, #080h       ;R0 point to 81h
                      1186             MOV     R1, #081h       ;R1 point to 83h
                      1187             MOV     DPH, @R0        ;first data HI byte in DPH
                      1188             MOV     DPL, @R1        ;first data LOW byte in DPL
                      1189             MOV     R0, #082h       ;R0 point to 82h
                      1190             MOV     A, @R0
                      1191             MOV     R3, A           ;2 nd data High Nibble  in R3
                      1192             INC     R0
                      1193             MOV     A, @R0
                      1194             MOV     R2, A           ;2nd data Low Nibble  in R2
                      1195             MOV     R1, DPH         ;1st data in R1,R0
                      1196             MOV     R0, DPL         ;;1st data in R1,R0
                      1197             MOV     TEMP1, #083h    ;data index
                      1198     AVERAGE:                        ;average every 64 data logging then divide by 64 at final
                      1199             CALL    ADD16           ;16bit add              result in R1,R0
****ERROR:Labelwasalreadydefined:`average'
                      1200             MOV     DPH, R1         ;keep sum result in DPTR
                      1201             MOV     DPL, R0
                      1202             INC     TEMP1           ;84h
                      1203             MOV     R0, TEMP1
                      1204             MOV     A, @R0          ;Load Next data digit1 84h
                      1205             MOV     R3, A
                      1206             INC     R0
                      1207             MOV     A, @R0          ;Load Next data digit2 85h
                      1208             MOV     R2, A
                      1209             MOV     TEMP1, R0       ;TEMP1 = 85h
                      1210             MOV     R1, DPH         ;1st data in R1,R0 load result back
                      1211             MOV     R0, DPL         ;;1st data in R1,R0
                      1212             MOV     A, TEMP1
                      1213             CJNE    A, #0FFh, AVERAGE       ;not end of data average again
                      1214             MOV     R3, #00h
                      1215             MOV     R2, #64
                      1216             CALL    UDIV16          ;Divide by 64 Result in R1,R0
                      1217             MOV     DPH, R1
                      1218             MOV     DPL, R0         ;Prepare data for HTOD
                      1219             MOV     FCPTR, #7Fh     ;reset pointer
                      1220     INSTMODE:
                      1221             CALL    HTOD            ;convert result to DEC
****ERROR:Labelwasalreadydefined:`instmode'
                      1222             MOV     A, #LCD_SETDDADDR+76    ;set cursot line1
                      1223             CALL    WRCMD
                      1224             MOV     A, R2
                      1225             ANL     A, #0Fh
                      1226             JZ      FCZERO
                      1227             ADD     A, #30h         ;change to ascii
                      1228             JMP     FCNONZERO
                      1229     FCZERO:
                      1230             MOV     A, #17h         ;space
****ERROR:Labelwasalreadydefined:`fczero'
                      1231     FCNONZERO:
                      1232             CALL    WRCHAR          ;write 1 st digit
****ERROR:Labelwasalreadydefined:`fcnonzero'
                      1233             MOV     A, R3
                      1234             SWAP    A
                      1235             ANL     A, #0Fh
                      1236             ADD     A, #30h
                      1237             CALL    WRCHAR          ;write 2nd digit
                      1238             MOV     A, #2Eh
                      1239             CALL    WRCHAR          ;write full stop
                      1240             MOV     A, R3
                      1241             ANL     A, #0Fh
                      1242             ADD     A, #30h
                      1243             CALL    WRCHAR          ;write 3nd digit
                      1244     ;end calculation fuel consumption and check button press
                      1245     FCKEY:
                      1246             JB      BTNBL, $+6      ;toggle back light
****ERROR:Labelwasalreadydefined:`fckey'
                      1247             CALL    BACKLIGHT
                      1248             JB      BTNUP, FCMODE
                      1249             CALL    SOUND_TRIG
                      1250             MOV     A, CONFIG       ;Instant mode
                      1251             CLR     ACC.2
                      1252             MOV     CONFIG, A
                      1253             LJMP    CONSUMP         ;restart FC
                      1254     FCMODE:
                      1255             JB      BTNDN, FCEXIT
****ERROR:Labelwasalreadydefined:`fcmode'
                      1256             CALL    SOUND_TRIG
                      1257             MOV     A, CONFIG
                      1258             SETB    ACC.2           ;Average mode;
                      1259             MOV     CONFIG, A
                      1260             LJMP    CONSUMP         ;Restart FC
                      1261     FCEXIT:
                      1262             JB      BTNMENU, CONSUMP3       ;jump back to calculte consump
****ERROR:Labelwasalreadydefined:`fcexit'
                      1263             CALL    SOUND_TRIG
                      1264             MOV     R0, #ECONFIG    ;set eeprom address
                      1265             MOV     R1, CONFIG      ;save last mode in EEPROM
                      1266             CALL    IPW             ;Write setting to eeprom
                      1267             CALL    DEL500m
                      1268             CALL    DEL500m         ;key delay
                      1269             LJMP    METER           ;Exit
                      1270     CONSUMP3:
                      1271             LJMP    CONSUMP2
****ERROR:Labelwasalreadydefined:`consump3'
                      1272     ;============SUB ROUTINE=======================
                      1273     ;SKIP PID  IN A(PID mode) OUT  A and PID
                      1274     SKIPPID:
                      1275             CJNE    A, #08h, $+6
****ERROR:Labelwasalreadydefined:`skippid'
                      1276             MOV     A, #0Ah
                      1277             RET
                      1278             CJNE    A, #12h, $+6
                      1279             MOV     A, #14h
                      1280             RET
                      1281             CJNE    A, #16h, $+6
                      1282             MOV     A, #22h
                      1283             RET
                      1284             CJNE    A, #24h, $+6
                      1285             MOV     A, #2Ch
                      1286             RET
                      1287             CJNE    A, #30h, $+6
                      1288             MOV     A, #33h
                      1289             RET
                      1290             CJNE    A, #34h, $+6
                      1291             MOV     A, #3Ch
                      1292             RET
                      1293             CJNE    A, #3Eh, $+6
                      1294             MOV     A, #42h
                      1295             RET
                      1296             CJNE    A, #47h, $+5
                      1297             MOV     A, #04h
                      1298             RET
                      1299     ;*********************************
                      1300     ;IN   B1,B2 ,R2
                      1301     ;OUT   BUFFER,RESULTLEN
                      1302     CALCULATE:                      ;Determine PID mode / calculate /translate to ASCII / keep in BUFFER/
                      1303
                      1304             CJNE    R2, #04h, $+7   ;CAL Engine Load
****ERROR:Labelwasalreadydefined:`calculate'
                      1305             CALL    FORMULA1
                      1306             RET
                      1307             CJNE    R2, #05h, $+7   ;Coolant Temp
                      1308             CALL    FORMULA2
                      1309             RET
                      1310             CJNE    R2, #06h, $+7   ;Short Term Fuel TRim B1
                      1311             CALL    FUELTRIM
                      1312             RET
                      1313             CJNE    R2, #07h, $+7   ;Long Term Fuel Trim B1
                      1314             CALL    FUELTRIM
                      1315             RET
                      1316             CJNE    R2, #0Ah, $+7   ;Fuel Pressure
                      1317             CALL    FORMULA3
                      1318             RET
                      1319             CJNE    R2, #0Bh, $+7   ;MAN air Press
                      1320             CALL    FORMULA3
                      1321             RET
                      1322             CJNE    R2, #0Ch, $+7   ;ENG Speed
                      1323             CALL    ENGSPEED
                      1324             RET
                      1325             CJNE    R2, #0Dh, $+7   ;VEH Speed
                      1326             CALL    FORMULA3
                      1327             RET
                      1328             CJNE    R2, #0Eh, $+7   ;IGN ADV Timing
                      1329             CALL    IGNTIME
                      1330             RET
                      1331             CJNE    R2, #0Fh, $+7   ;Intake Air Temp
                      1332             CALL    FORMULA2
                      1333             RET
                      1334             CJNE    R2, #10h, $+7   ;Air Flow
                      1335             CALL    AIRFLOW
                      1336             RET
                      1337             CJNE    R2, #11h, $+7   ;Throttle Pos
                      1338             CALL    FORMULA1
                      1339             RET
                      1340             CJNE    R2, #14h, $+7   ;HO2S 1 voltage
                      1341             CALL    HO2SVOLT
                      1342             RET
                      1343             CJNE    R2, #15h, $+7   ;HO2S 2 voltage
                      1344             CALL    HO2SVOLT
                      1345             RET
                      1346             CJNE    R2, #22h, $+7   ;Transmission Fluid Temp
                      1347             CALL    CALTFT
                      1348             RET
                      1349             CJNE    R2, #23h, $+7   ;Fuel Rail Pressure
                      1350             CALL    AIRFLOW         ;Same Formula as Air Flow
                      1351             RET
                      1352             CJNE    R2, #2Ch, $+7   ;Command EGR
                      1353             CALL    FORMULA1
                      1354             RET
                      1355             CJNE    R2, #2Dh, $+7   ;EGR error
                      1356             CALL    FORMULA1
                      1357             RET
                      1358             CJNE    R2, #2Eh, $+7   ;Command Evap Purge
                      1359             CALL    FORMULA1
                      1360             RET
                      1361             CJNE    R2, #2Fh, $+7   ;Fuel Level
                      1362             CALL    FORMULA1
                      1363             RET
                      1364             CJNE    R2, #33h, $+7   ;Baro Press
                      1365             CALL    FORMULA3
                      1366             RET
                      1367             CJNE    R2, #3Ch, $+7   ;CAT 1 Temp
                      1368             CALL    CATTEMP
                      1369             RET
                      1370             CJNE    R2, #3Dh, $+7   ;CAT 2 Temp
                      1371             CALL    CATTEMP
                      1372             RET
                      1373             CJNE    R2, #42h, $+7   ;ECU Volt
                      1374             CALL    ECUVOLT
                      1375             RET
                      1376             CJNE    R2, #43h, $+7   ;ABS ENgine load
                      1377             CALL    FORMULA1
                      1378             RET
                      1379             CJNE    R2, #44h, $+7   ;CMD EQV RAtio
                      1380             CALL    CMDEQV
                      1381             RET
                      1382             CJNE    R2, #45h, $+7   ;REL Throt Pos
                      1383             CALL    FORMULA1
                      1384             RET
                      1385             CJNE    R2, #46h, $+6   ;AMB Air Temp
                      1386             CALL    FORMULA2
                      1387             RET
                      1388             CJNE    R2, #5Ch, $+6   ;AMB Air Temp
                      1389             CALL    FORMULA2
                      1390             RET
                      1391     ;***********************************
                      1392     ;--SUB Formula Caculation---------------------------------------
                      1393     ;IN   B1,B2
                      1394     ;OUT BUFFER, RESULTLEN
                      1395     FORMULA1:                       ;Percentage calculate B1/255 x 100
                      1396             MOV     A, B1
****ERROR:Labelwasalreadydefined:`formula1'
                      1397             MOV     B, #100
                      1398             MUL     AB              ;result in BA
                      1399             MOV     DPTR, #0000h    ;DPTR=0
                      1400             MOV     DPL, A          ;DPL=A
                      1401             CALL    HTOD            ;Result fraction A keep in R2,R3  take only R2 low nibble
                      1402             MOV     A, R2           ;keep carry in A
                      1403             MOV     DPTR, #0000h
                      1404             MOV     DPL, B          ;take byte1
                      1405             ADD     A, B            ;add byte1 with carry
                      1406             MOV     DPTR, #000h     ;final result for HTOD
                      1407             MOV     DPL, A
                      1408             CALL    HTOD            ;Result in R2,R2
                      1409
                      1410             MOV     A, R2
                      1411             ANL     A, #0Fh
                      1412             MOV     R4, A           ;keep
                      1413             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1414             ADD     A, #30h         ;convert dec to ASCII
                      1415             MOV     BUFFER, A       ;digit1
                      1416             JMP     $+6
                      1417             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1418             MOV     A, R3
                      1419             SWAP    A
                      1420             ANL     A, #0Fh
                      1421             ADD     A, #30h         ;convert dec to ASCII
                      1422             MOV     BUFFER+1, A     ;digit2
                      1423             MOV     A, R3
                      1424             ANL     A, #0Fh
                      1425             ADD     A, #30h         ;convert dec to ASCII
                      1426             MOV     BUFFER+2, A     ;digit1
                      1427             MOV     RESULTLEN, #03
                      1428             RET
                      1429     ;------------------
                      1430     FORMULA2:                       ;Temperature B1-40
                      1431             MOV     DPTR, #0000h
****ERROR:Labelwasalreadydefined:`formula2'
                      1432             MOV     A, B1
                      1433             CLR     C
                      1434             SUBB    A, #40
                      1435             MOV     DPL, A
                      1436             CALL    HTOD
                      1437             MOV     A, R2
                      1438             ANL     A, #0Fh
                      1439             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1440             ADD     A, #30h         ;convert dec to ASCII
                      1441             MOV     BUFFER, A       ;digit1
                      1442             JMP     $+6
                      1443             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1444             MOV     A, R3
                      1445             SWAP    A
                      1446             ANL     A, #0Fh
                      1447             ADD     A, #30h         ;convert dec to ASCII
                      1448             MOV     BUFFER+1, A     ;digit2
                      1449             MOV     A, R3
                      1450             ANL     A, #0Fh
                      1451             ADD     A, #30h         ;convert dec to ASCII
                      1452             MOV     BUFFER+2, A     ;digit1
                      1453             MOV     RESULTLEN, #03
                      1454             RET
                      1455     ;------------------
                      1456     FORMULA3:                       ;direct byte
                      1457             MOV     DPTR, #0000h
****ERROR:Labelwasalreadydefined:`formula3'
                      1458             MOV     DPL, B1
                      1459             CALL    HTOD            ;convert hex to Decimal (R1,R2,R3)
                      1460             MOV     A, R2
                      1461             ANL     A, #0Fh
                      1462             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17
                      1463             ADD     A, #30h         ;convert dec to ASCII
                      1464             MOV     BUFFER, A       ;digit1
                      1465             JMP     $+6
                      1466             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1467             MOV     A, R3
                      1468             SWAP    A
                      1469             ANL     A, #0Fh
                      1470             MOV     R7, BUFFER      ;check space or not
                      1471             CJNE    R7, #17h, $+5
                      1472             JZ      $+9             ;If 1digit =0 and 2 digit = 0 then jump
                      1473             ADD     A, #30h         ;convert dec to ASCII
                      1474             MOV     BUFFER+1, A     ;digit2
                      1475             JMP     $+6
                      1476             MOV     BUFFER+1, #17h  ;Result is 0 then put SPACE
                      1477             MOV     A, R3
                      1478             ANL     A, #0Fh
                      1479             ADD     A, #30h         ;convert dec to ASCII
                      1480             MOV     BUFFER+2, A     ;digit1
                      1481             MOV     RESULTLEN, #03
                      1482             RET
                      1483     ;--------------------
                      1484     FUELTRIM:                       ;( B1x64h)/80h - 64h
                      1485             MOV     A, B1
****ERROR:Labelwasalreadydefined:`fueltrim'
                      1486             MOV     B, #64h
                      1487             MUL     AB              ;Result in B,A
                      1488             MOV     R1, B
                      1489             MOV     R0, A
                      1490             MOV     R3, #00
                      1491             MOV     R2, #80h
                      1492             CALL    UDIV16          ;Result in R1,R0
                      1493             CLR     C               ;clear carry flag
                      1494             MOV     A, R0
                      1495             SUBB    A, #64h         ;Result in ACC
                      1496     ;Sign checking
                      1497             JC      $+9             ; OV set then negative sign
                      1498             MOV     BUFFER, #2Bh    ;+sign
                      1499             JMP     POSFT
                      1500             MOV     BUFFER, #2Dh    ;-Sign
                      1501             MOV     R4, A
                      1502             MOV     A, #64h
                      1503             SUBB    A, R4           ;64h - A
                      1504     POSFT:
                      1505             MOV     DPTR, #0000h
****ERROR:Labelwasalreadydefined:`posft'
                      1506             MOV     DPL, A
                      1507             CALL    HTOD            ;convert hex to Decimal (R1,R2,R3)
                      1508             MOV     A, R3
                      1509             SWAP    A
                      1510             ANL     A, #0Fh
                      1511             ADD     A, #30h         ;convert dec to ASCII
                      1512             MOV     BUFFER+1, A     ;digit2
                      1513             MOV     A, R3
                      1514             ANL     A, #0Fh
                      1515             ADD     A, #30h         ;convert dec to ASCII
                      1516             MOV     BUFFER+2, A     ;digit1
                      1517             MOV     RESULTLEN, #03
                      1518             RET
                      1519     ;--------------------
                      1520     ENGSPEED:                       ;[(B1x256) + B2] / 4
                      1521             MOV     A, B1
****ERROR:Labelwasalreadydefined:`engspeed'
                      1522             MOV     B, #04h
                      1523             DIV     AB              ;B1/4  fraction in B
                      1524             MOV     DPH, A          ;keep A in DPH
                      1525             MOV     A, #40h
                      1526             MUL     AB              ;A = B x #40h   Result in BA
                      1527             MOV     R4, A           ;keep result in R4
                      1528             MOV     A, B2
                      1529             MOV     B, #04h
                      1530             DIV     AB
                      1531             ADD     A, R4           ;B2/4 + R4
                      1532             MOV     DPL, A          ;keep A in DPL
                      1533             CALL    HTOD            ;Result  in R2,R3 then convert to ASCII
                      1534             MOV     A, R2           ;digit1
                      1535             SWAP    A
                      1536             ANL     A, #0Fh
                      1537             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1538             ADD     A, #30h         ;convert dec to ASCII
                      1539             MOV     BUFFER, A       ;digit1
                      1540             JMP     $+6
                      1541             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1542             MOV     A, R2           ;digit2
                      1543             ANL     A, #0Fh
                      1544             ADD     A, #30h         ;convert dec to ASCII
                      1545             MOV     BUFFER+1, A     ;digit2
                      1546             MOV     A, R3           ;digit3
                      1547             SWAP    A
                      1548             ANL     A, #0Fh
                      1549             ADD     A, #30h         ;convert dec to ASCII
                      1550             MOV     BUFFER+2, A     ;digit3
                      1551             MOV     A, R3           ;digit4
                      1552             ANL     A, #0Fh
                      1553             ADD     A, #30h         ;convert dec to ASCII
                      1554             MOV     BUFFER+3, A     ;digit4
                      1555             MOV     RESULTLEN, #04
                      1556             RET
                      1557     ;-------------------
                      1558     IGNTIME:                        ;(B1 / 2) -64h
                      1559             MOV     A, B1
****ERROR:Labelwasalreadydefined:`igntime'
                      1560             MOV     B, #02h
                      1561             DIV     AB
                      1562             CLR     C
                      1563             SUBB    A, #64
                      1564     ;Sign checking
                      1565             JC      $+9             ; OV set then negative sign
                      1566             MOV     BUFFER, #2Bh    ;+sign
                      1567             JMP     POS
                      1568             MOV     BUFFER, #2Dh    ;-Sign
                      1569             MOV     R4, A
                      1570             MOV     A, #0FFh
                      1571             SUBB    A, R4
                      1572             ADD     A, #02h         ;correction
                      1573
                      1574     POS:
                      1575             MOV     DPTR, #0000h
****ERROR:Labelwasalreadydefined:`pos'
                      1576             MOV     DPL, A
                      1577             MOV     R4, A           ;keep A in R4
                      1578             CALL    HTOD            ;convert hex to Decimal (R1,R2,R3)
                      1579             MOV     A, R3
                      1580             SWAP    A
                      1581             ANL     A, #0Fh
                      1582             ADD     A, #30h         ;convert dec to ASCII
                      1583             MOV     BUFFER+1, A     ;digit2
                      1584             MOV     A, R3
                      1585             ANL     A, #0Fh
                      1586             ADD     A, #30h         ;convert dec to ASCII
                      1587             MOV     BUFFER+2, A     ;digit1
                      1588             MOV     RESULTLEN, #03
                      1589             RET
                      1590     ;-------------------------
                      1591     AIRFLOW:                        ;[(B1x256)+B2]/100
                      1592             MOV     DPH, B1
****ERROR:Labelwasalreadydefined:`airflow'
                      1593             MOV     DPL, B2         ;keep A in DPL
                      1594             CALL    HTOD            ;Result  in R2,R3 then convert to ASCII
                      1595             MOV     A, R1           ;digit1
                      1596             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1597             ADD     A, #30h         ;convert dec to ASCII
                      1598             MOV     BUFFER, A       ;digit1
                      1599             JMP     $+6
                      1600             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1601
                      1602             MOV     A, R2           ;digit2
                      1603             SWAP    A
                      1604             ANL     A, #0Fh
                      1605             MOV     R7, BUFFER      ;check 1digit is zero or not
                      1606             CJNE    R7, #17h, $+5   ;if BUFFER <> space then jump to ADD  A,#20h
                      1607             JZ      $+9
                      1608             ADD     A, #30h         ;convert dec to ASCII
                      1609             MOV     BUFFER+1, A
                      1610             JMP     $+6
                      1611             MOV     BUFFER+1, #17h  ;Result is 0 then put SPACE
                      1612             MOV     A, R2           ;digit4
                      1613             ANL     A, #0Fh
                      1614             ADD     A, #30h         ;convert dec to ASCII
                      1615             MOV     BUFFER+2, A     ;digit2
                      1616             MOV     A, R3           ;digit5
                      1617             SWAP    A
                      1618             ANL     A, #0Fh
                      1619             ADD     A, #30h         ;convert dec to ASCII
                      1620             MOV     BUFFER+4, A     ;digit3
                      1621             MOV     BUFFER+3, #2Eh  ;full stop
                      1622             MOV     RESULTLEN, #05
                      1623             RET
                      1624     ;-------------------------
                      1625     CATTEMP:                        ;[(B1x256)+B2]/10 - 40
                      1626             MOV     DPH, B1
****ERROR:Labelwasalreadydefined:`cattemp'
                      1627             MOV     DPL, B2
                      1628             CALL    HTOD            ;Result  in R2,R3 then convert to ASCII
                      1629     ;change R2 to Hex, then -4 and change back to dec
                      1630             MOV     A, R2
                      1631             MOV     B, #10h
                      1632             DIV     AB
                      1633             MOV     R2, B
                      1634             MOV     B, #0Ah
                      1635             MUL     AB
                      1636             ADD     A, R2           ; now return hex
                      1637             SUBB    A, #04h         ; as equation
                      1638
                      1639             MOV     B, #0Ah
                      1640             DIV     AB
                      1641             MOV     R2, B
                      1642             MOV     B, #10h
                      1643             MUL     AB
                      1644             ADD     A, R2           ; now return DEC
                      1645
                      1646             SWAP    A               ; digit1
                      1647             ANL     A, #0Fh
                      1648             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1649             ADD     A, #30h         ;convert dec to ASCII
                      1650             MOV     BUFFER, A       ;digit1
                      1651             JMP     $+6
                      1652             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1653             MOV     A, R2           ;digit2
                      1654             ANL     A, #0Fh
                      1655             ADD     A, #30h         ;convert dec to ASCII
                      1656             MOV     BUFFER+1, A     ;digit2
                      1657             MOV     A, R3           ;digit3
                      1658             SWAP    A
                      1659             ANL     A, #0Fh
                      1660             ADD     A, #30h         ;convert dec to ASCII
                      1661             MOV     BUFFER+2, A     ;digit3
                      1662             MOV     A, R3           ;digit4
                      1663             ANL     A, #0Fh
                      1664             ADD     A, #30h         ;convert dec to ASCII
                      1665             MOV     BUFFER+4, A     ;digit4
                      1666             MOV     BUFFER+3, #2Eh  ;full stop
                      1667             MOV     RESULTLEN, #05
                      1668             RET
                      1669     ;-------------------------
                      1670     ECUVOLT:                        ;[(B1x256)+B2]/1000
                      1671             MOV     DPH, B1
****ERROR:Labelwasalreadydefined:`ecuvolt'
                      1672             MOV     DPL, B2         ;keep A in DPL
                      1673             CALL    HTOD            ;Result  in R2,R3 then convert to ASCII
                      1674             MOV     A, R1           ;digit1
                      1675             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1676             ADD     A, #30h         ;convert dec to ASCII
                      1677             MOV     BUFFER, A       ;digit1
                      1678             JMP     $+6
                      1679             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1680             MOV     A, R2           ;digit2
                      1681             SWAP    A
                      1682             ANL     A, #0Fh
                      1683             ADD     A, #30h         ;convert dec to ASCII
                      1684             MOV     BUFFER+1, A     ;digit2
                      1685             MOV     A, R2           ;digit4
                      1686             ANL     A, #0Fh
                      1687             ADD     A, #30h         ;convert dec to ASCII
                      1688             MOV     BUFFER+3, A     ;digit2
                      1689             MOV     A, R3           ;digit5
                      1690             SWAP    A
                      1691             ANL     A, #0Fh
                      1692             ADD     A, #30h         ;convert dec to ASCII
                      1693             MOV     BUFFER+4, A     ;digit3
                      1694             MOV     BUFFER+2, #2Eh  ;full stop
                      1695             MOV     RESULTLEN, #05
                      1696             RET
                      1697     CMDEQV:                         ;calculate commanded equivalent ratio (B1x256 + B2) / 32768
                      1698             MOV     A, B1
****ERROR:Labelwasalreadydefined:`cmdeqv'
                      1699             MOV     B, #64h
                      1700             MUL     AB              ;B1x100  Result in BA
                      1701             MOV     R1, B
                      1702             MOV     R0, A
                      1703             MOV     R3, #00h
                      1704             MOV     R2, #80h
                      1705             CALL    UDIV16          ; {B1x100 /128} Result in R1,R0
                      1706             MOV     DPH, R1
                      1707             MOV     DPL, R0
                      1708             CALL    HTOD            ;convert to decimal resultin R1,R2,R3
                      1709             MOV     A, R2
                      1710             ADD     A, #30h
                      1711             MOV     BUFFER, A       ;1st digit
                      1712             MOV     BUFFER+1, #2Eh  ;full stop
                      1713             MOV     A, R3
                      1714             SWAP    A
                      1715             ANL     A, #0Fh
                      1716             ADD     A, #30h
                      1717             MOV     BUFFER+2, A     ;2nd digit
                      1718             MOV     A, R3
                      1719             ANL     A, #0Fh
                      1720             ADD     A, #30h
                      1721             MOV     BUFFER+3, A     ;3rd digit
                      1722             MOV     RESULTLEN, #04
                      1723             RET
                      1724     HO2SVOLT:                       ;Volt = B1/200
                      1725             MOV     A, B1
****ERROR:Labelwasalreadydefined:`ho2svolt'
                      1726             MOV     B, #100
                      1727             MUL     AB              ;result in BA
                      1728             MOV     R1, B
                      1729             MOV     R0, A
                      1730             MOV     R3, #00h
                      1731             MOV     R2, #0C8h
                      1732             CALL    UDIV16          ; {B1B2 / #0C8h} Result in R1,R0
                      1733             MOV     DPH, R1
                      1734             MOV     DPL, R0
                      1735             CALL    HTOD            ;convert to decimal resultin R1,R2,R3
                      1736             MOV     A, R2
                      1737             ANL     A, #0Fh
                      1738             ADD     A, #30h         ;convert dec to ASCII
                      1739             MOV     BUFFER, A       ;digit1
                      1740             MOV     BUFFER+1, #2Eh  ;full stop
                      1741             MOV     A, R3
                      1742             SWAP    A
                      1743             ANL     A, #0Fh
                      1744             ADD     A, #30h         ;convert dec to ASCII
                      1745             MOV     BUFFER+2, A     ;digit2
                      1746             MOV     A, R3
                      1747             ANL     A, #0Fh
                      1748             ADD     A, #30h         ;convert dec to ASCII
                      1749             MOV     BUFFER+3, A     ;digit3
                      1750             MOV     RESULTLEN, #04
                      1751             RET
                      1752     ;——————————————————
                      1753     CALTFT:                         ;[((B1x256)+B2]/8 - 32)/1.8]   deg C
                      1754             ;convert to simple equation  ((B1x256)+B2 - 256)x10 /144
                      1755             MOV     A, B1
****ERROR:Labelwasalreadydefined:`caltft'
                      1756             SUBB    A, #01h         ; (B1B2 - 100h)
                      1757             MOV     R1, A
                      1758             MOV     R0, B2
                      1759             MOV     R3, #0h
                      1760     ;MOV    R2,#0Ah ;10
                      1761             MOV     R2, #64h        ;100
                      1762             CALL    UMUL16          ;result in R3,R2,R1,R0  32 bit result keep R3 for calculate later
                      1763             MOV     B1, R2          ;keep R2
                      1764             MOV     R3, #00h
                      1765             MOV     R2, #90h        ;144
                      1766             CALL    UDIV16          ;result in R1,R0
                      1767             MOV     TEMP1, R1
                      1768             MOV     TEMP2, R0
                      1769
                      1770             MOV     A, B1
                      1771             SWAP    A
                      1772             MOV     R1, A
                      1773             MOV     R0, #00h
                      1774             MOV     R3, #00h
                      1775             MOV     R2, #09h
                      1776             CALL    UDIV16          ;result in R1,R0
                      1777             MOV     R3, TEMP1
                      1778             MOV     R2, TEMP2
                      1779             CALL    ADD16           ;R1R0+R3R2  result in R1,R0
                      1780
                      1781             MOV     DPH, R1
                      1782             MOV     DPL, R0
                      1783             CALL    HTOD            ;Result  in R2,R3 then convert to ASCII
                      1784
                      1785             MOV     A, R2
                      1786             SWAP    A               ; digit1
                      1787             ANL     A, #0Fh
                      1788             JZ      $+9             ;IF A = 0 then skip to BUFFER = #17h
                      1789             ADD     A, #30h         ;convert dec to ASCII
                      1790             MOV     BUFFER, A       ;digit1
                      1791             JMP     $+6
                      1792             MOV     BUFFER, #17h    ;Result is 0 then put SPACE
                      1793             MOV     A, R2           ;digit2
                      1794             ANL     A, #0Fh
                      1795             ADD     A, #30h         ;convert dec to ASCII
                      1796             MOV     BUFFER+1, A     ;digit2
                      1797             MOV     A, R3           ;digit3
                      1798             SWAP    A
                      1799             ANL     A, #0Fh
                      1800             ADD     A, #30h         ;convert dec to ASCII
                      1801             MOV     BUFFER+2, A     ;digit3
                      1802             MOV     A, R3           ;digit4
                      1803             ANL     A, #0Fh
                      1804             ADD     A, #30h         ;convert dec to ASCII
                      1805             MOV     BUFFER+4, A     ;digit4
                      1806             MOV     BUFFER+3, #2Eh  ;full stop
                      1807             MOV     RESULTLEN, #05
                      1808             RET
                      1809     ;-------------------------
                      1810
                      1811     ;**********************************
                      1812     ;------------- SUB  PID mode select Line1-----------------------
                      1813     LINE1:
                      1814             MOV     A, #LCD_SETDDADDR+0h    ;Line1
****ERROR:Labelwasalreadydefined:`line1'
                      1815             CALL    WRCMD
                      1816
                      1817             MOV     A, PID1
                      1818             CJNE    A, #04h, $+9
                      1819             MOV     DPTR, #PID04
                      1820             JMP     LINE12
                      1821             CJNE    A, #05h, $+9
                      1822             MOV     DPTR, #PID05
                      1823             JMP     LINE12
                      1824             CJNE    A, #06h, $+9
                      1825             MOV     DPTR, #PID06
                      1826             JMP     LINE12
                      1827             CJNE    A, #07h, $+9
                      1828             MOV     DPTR, #PID07
                      1829             JMP     LINE12
                      1830             CJNE    A, #0Ah, $+9
                      1831             MOV     DPTR, #PID0A
                      1832             JMP     LINE12
                      1833             CJNE    A, #0Bh, $+9
                      1834             MOV     DPTR, #PID0B
                      1835             JMP     LINE12
                      1836             CJNE    A, #0Ch, $+9
                      1837             MOV     DPTR, #PID0C
                      1838             JMP     LINE12
                      1839             CJNE    A, #0Dh, $+9
                      1840             MOV     DPTR, #PID0D
                      1841             JMP     LINE12
                      1842             CJNE    A, #0Eh, $+9
                      1843             MOV     DPTR, #PID0E
                      1844             JMP     LINE12
                      1845             CJNE    A, #0Fh, $+9
                      1846             MOV     DPTR, #PID0F
                      1847             JMP     LINE12
                      1848             CJNE    A, #10h, $+9
                      1849             MOV     DPTR, #PID10
                      1850             JMP     LINE12
                      1851             CJNE    A, #11h, $+9
                      1852             MOV     DPTR, #PID11
                      1853             JMP     LINE12
                      1854             CJNE    A, #14h, $+9
                      1855             MOV     DPTR, #PID14
                      1856             JMP     LINE12
                      1857             CJNE    A, #15h, $+9
                      1858             MOV     DPTR, #PID15
                      1859             JMP     LINE12
                      1860             CJNE    A, #22h, $+9
                      1861             MOV     DPTR, #TFT
                      1862             JMP     LINE12
                      1863             CJNE    A, #23h, $+9
                      1864             MOV     DPTR, #PID23
                      1865             JMP     LINE12
                      1866             CJNE    A, #2Ch, $+9
                      1867             MOV     DPTR, #PID2C
                      1868             JMP     LINE12
                      1869             CJNE    A, #2Dh, $+9
                      1870             MOV     DPTR, #PID2D
                      1871             JMP     LINE12
                      1872             CJNE    A, #2Eh, $+9
                      1873             MOV     DPTR, #PID2E
                      1874             JMP     LINE12
                      1875             CJNE    A, #2Fh, $+9
                      1876             MOV     DPTR, #PID2F
                      1877             JMP     LINE12
                      1878             CJNE    A, #33h, $+9
                      1879             MOV     DPTR, #PID33
                      1880             JMP     LINE12
                      1881             CJNE    A, #3Ch, $+9
                      1882             MOV     DPTR, #PID3C
                      1883             JMP     LINE12
                      1884             CJNE    A, #3Dh, $+9
                      1885             MOV     DPTR, #PID3D
                      1886             JMP     LINE12
                      1887             CJNE    A, #42h, $+9
                      1888             MOV     DPTR, #PID42
                      1889             JMP     LINE12
                      1890             CJNE    A, #43h, $+9
                      1891             MOV     DPTR, #PID43
                      1892             JMP     LINE12
                      1893             CJNE    A, #44h, $+9
                      1894             MOV     DPTR, #PID44
                      1895             JMP     LINE12
                      1896             CJNE    A, #45h, $+9
                      1897             MOV     DPTR, #PID45
                      1898             JMP     LINE12
                      1899             CJNE    A, #46h, $+9
                      1900             MOV     DPTR, #PID46
                      1901             JMP     LINE12
                      1902             CJNE    A, #5Ch, $+9
                      1903             MOV     DPTR, #PID5C
                      1904             JMP     LINE12
                      1905             MOV     DPTR, #NODATA
                      1906     LINE12:
                      1907             CALL    WRSTR           ;write to LCD 1 Line
****ERROR:Labelwasalreadydefined:`line12'
                      1908             MOV     WRADDL1, R1     ;keep write address from R1
                      1909             RET
                      1910     ;*************************************
                      1911     ;---SUB  PID mode select Line2
                      1912     LINE2:
                      1913             MOV     A, #LCD_SETDDADDR+40h   ;Line2
****ERROR:Labelwasalreadydefined:`line2'
                      1914             CALL    WRCMD
                      1915
                      1916             MOV     A, PID2
                      1917             CJNE    A, #04h, $+9
                      1918             MOV     DPTR, #PID04
                      1919             JMP     LINE22
                      1920             CJNE    A, #05h, $+9
                      1921             MOV     DPTR, #PID05
                      1922             JMP     LINE22
                      1923             CJNE    A, #06h, $+9
                      1924             MOV     DPTR, #PID06
                      1925             JMP     LINE22
                      1926             CJNE    A, #07h, $+9
                      1927             MOV     DPTR, #PID07
                      1928             JMP     LINE22
                      1929             CJNE    A, #0Ah, $+9
                      1930             MOV     DPTR, #PID0A
                      1931             JMP     LINE22
                      1932             CJNE    A, #0Bh, $+9
                      1933             MOV     DPTR, #PID0B
                      1934             JMP     LINE22
                      1935             CJNE    A, #0Ch, $+9
                      1936             MOV     DPTR, #PID0C
                      1937             JMP     LINE22
                      1938             CJNE    A, #0Dh, $+9
                      1939             MOV     DPTR, #PID0D
                      1940             JMP     LINE22
                      1941             CJNE    A, #0Eh, $+9
                      1942             MOV     DPTR, #PID0E
                      1943             JMP     LINE22
                      1944             CJNE    A, #0Fh, $+9
                      1945             MOV     DPTR, #PID0F
                      1946             JMP     LINE22
                      1947             CJNE    A, #10h, $+9
                      1948             MOV     DPTR, #PID10
                      1949             JMP     LINE22
                      1950             CJNE    A, #11h, $+9
                      1951             MOV     DPTR, #PID11
                      1952             JMP     LINE22
                      1953             CJNE    A, #14h, $+9
                      1954             MOV     DPTR, #PID14
                      1955             JMP     LINE22
                      1956             CJNE    A, #15h, $+9
                      1957             MOV     DPTR, #PID15
                      1958             JMP     LINE22
                      1959             CJNE    A, #22h, $+9
                      1960             MOV     DPTR, #TFT
                      1961             JMP     LINE22
                      1962             CJNE    A, #23h, $+9
                      1963             MOV     DPTR, #PID23
                      1964             JMP     LINE22
                      1965             CJNE    A, #2Ch, $+9
                      1966             MOV     DPTR, #PID2C
                      1967             JMP     LINE22
                      1968             CJNE    A, #2Dh, $+9
                      1969             MOV     DPTR, #PID2D
                      1970             JMP     LINE22
                      1971             CJNE    A, #2Eh, $+9
                      1972             MOV     DPTR, #PID2E
                      1973             JMP     LINE22
                      1974             CJNE    A, #2Fh, $+9
                      1975             MOV     DPTR, #PID2F
                      1976             JMP     LINE22
                      1977             CJNE    A, #33h, $+9
                      1978             MOV     DPTR, #PID33
                      1979             JMP     LINE22
                      1980             CJNE    A, #3Ch, $+9
                      1981             MOV     DPTR, #PID3C
                      1982             JMP     LINE22
                      1983             CJNE    A, #3Dh, $+9
                      1984             MOV     DPTR, #PID3D
                      1985             JMP     LINE22
                      1986             CJNE    A, #42h, $+9
                      1987             MOV     DPTR, #PID42
                      1988             JMP     LINE22
                      1989             CJNE    A, #43h, $+9
                      1990             MOV     DPTR, #PID43
                      1991             JMP     LINE22
                      1992             CJNE    A, #44h, $+9
                      1993             MOV     DPTR, #PID44
                      1994             JMP     LINE22
                      1995             CJNE    A, #45h, $+9
                      1996             MOV     DPTR, #PID45
                      1997             JMP     LINE22
                      1998             CJNE    A, #46h, $+9
                      1999             MOV     DPTR, #PID46
                      2000             JMP     LINE22
                      2001             CJNE    A, #5Ch, $+9
                      2002             MOV     DPTR, #PID5C
                      2003             JMP     LINE12
                      2004             MOV     DPTR, #NODATA
                      2005     LINE22:
                      2006             CALL    WRSTR           ;Write to LCD Line2
****ERROR:Labelwasalreadydefined:`line22'
                      2007             MOV     WRADDL2, R1     ;keep write address from R1
                      2008             RET
                      2009     ;-----------------------
                      2010     ;Write string line to LCD & read WRADDR sub routine (INPUT   MOV DPTR,#xxxxx)
                      2011     ;Uses R0 for pointer R1 for WRADDR
                      2012     WRSTR:
                      2013             MOV     R0, #BUFFER
****ERROR:Labelwasalreadydefined:`wrstr'
                      2014     WRSTR1:                         ;Load string to buffer
                      2015             CLR     A
****ERROR:Labelwasalreadydefined:`wrstr1'
                      2016             MOVC    A, @A+DPTR      ;read from table
                      2017             MOV     @R0, A
                      2018             CJNE    A, #0Dh, $+6
                      2019             JMP     WRSTR2
                      2020             INC     DPTR
                      2021             INC     R0
                      2022             JMP     WRSTR1
                      2023     WRSTR2:                         ;write buffer to LCD
                      2024             INC     R0
****ERROR:Labelwasalreadydefined:`wrstr2'
                      2025             MOV     @R0, #0Dh
                      2026             INC     DPTR
                      2027             CLR     A
                      2028             MOVC    A, @A+DPTR
                      2029             MOV     R1, A           ; for use to write calculated data to any DDRAM address
                      2030             MOV     R0, #BUFFER     ;point to buffer
                      2031     WRSTR3:
                      2032             MOV     A, @R0          ; A = data in iram
****ERROR:Labelwasalreadydefined:`wrstr3'
                      2033             CJNE    A, #0Dh, $+4
                      2034             RET                     ;return back
                      2035     ;write char to LCD
                      2036             SETB    EN
                      2037             NOP
                      2038             SETB    RS
                      2039             NOP
                      2040             MOV     LCDDATA, A
                      2041             NOP
                      2042             CLR     EN
                      2043             CALL    DEL5m
                      2044     ;-----
                      2045             INC     R0              ;next char
                      2046             JMP     WRSTR3
                      2047     ;********************************
                      2048     ;Write & Scroll string line to LCD sub routine (INPUT   MOV DPTR,#xxxxx)
                      2049     WRSCR:
                      2050             MOV     R0, #BUFFER
****ERROR:Labelwasalreadydefined:`wrscr'
                      2051     WRSCR1:                         ;Load string to buffer
                      2052             CLR     A
****ERROR:Labelwasalreadydefined:`wrscr1'
                      2053             MOVC    A, @A+DPTR      ;read from table
                      2054             MOV     @R0, A
                      2055             CJNE    A, #0Dh, $+6
                      2056             JMP     WRSCR2
                      2057             INC     DPTR
                      2058             INC     R0
                      2059             JMP     WRSCR1
                      2060     WRSCR2:                         ;write buffer to LCD
                      2061             INC     R0
****ERROR:Labelwasalreadydefined:`wrscr2'
                      2062             MOV     @R0, #0Dh
                      2063             MOV     R0, #BUFFER     ;point to buffer
                      2064     WRSCR3:
                      2065             MOV     A, @R0          ; A = data in iram
****ERROR:Labelwasalreadydefined:`wrscr3'
                      2066             CJNE    A, #0Dh, $+4
                      2067             RET
                      2068     ;write char to LCD
                      2069             SETB    EN
                      2070             NOP
                      2071             SETB    RS
                      2072             NOP
                      2073             MOV     LCDDATA, A
                      2074             NOP
                      2075             CLR     EN
                      2076             CALL    DEL100m
                      2077     ;-----
                      2078             INC     R0              ;next char
                      2079             JMP     WRSCR3
                      2080     ;********************************
                      2081     WRCMD:                          ;write command  INPUT ACC
                      2082             SETB    EN
****ERROR:Labelwasalreadydefined:`wrcmd'
                      2083             NOP
                      2084             CLR     RS
                      2085             NOP
                      2086             MOV     LCDDATA, A
                      2087             NOP
                      2088             CLR     EN
                      2089             CALL    DEL100m
                      2090             RET
                      2091     ;********************************
                      2092     WRCHAR:                         ;wite data to LCD  INPUT ACC
                      2093             SETB    EN
****ERROR:Labelwasalreadydefined:`wrchar'
                      2094             NOP
                      2095             SETB    RS
                      2096             NOP
                      2097             MOV     LCDDATA, A
                      2098             NOP
                      2099             CLR     EN
                      2100             CALL    DEL5m
                      2101             RET
                      2102     ;********************************
                      2103     ;get result in buffer and translate to B1,B2
                      2104     ;USE    R0,R1
                      2105     ;IN     BUFFER
                      2106     ;OUT    B1,B2,PID
                      2107     GETB1B2:
                      2108             MOV     A, BUFFER       ;check 41 01 response first
****ERROR:Labelwasalreadydefined:`getb1b2'
                      2109             CJNE    A, #34h, MODE22 ;If A = '4' then next else jump
                      2110             MOV     SLEEPCNT, #24h  ;Reset sleep mode counter
                      2111             MOV     R0, #BUFFER+6   ;point to byte1
                      2112             MOV     A, @R0
                      2113             CALL    ATOH            ;translate 1st byte
                      2114             SWAP    A               ;keep data in B7-B4
                      2115             MOV     B1, A           ;keep B7-B4 in BYTE1
                      2116             INC     R0
                      2117             MOV     A, @R0
                      2118             CALL    ATOH            ;translate 2nd byte
                      2119             MOV     R1, #B1         ;point bo B1
                      2120             XCHD    A, @R1          ;keep B3-B0 in BYTE1
                      2121     ;---Byte 1 Get OK
                      2122             MOV     R0, #BUFFER+9   ;point to byte2
                      2123             MOV     A, @R0
                      2124             CALL    ATOH            ;translate 1st byte
                      2125             SWAP    A               ;keep data in B7-B4
                      2126             MOV     B2, A           ;keep B7-B4 in BYTE1
                      2127             INC     R0
                      2128             MOV     A, @R0
                      2129             CALL    ATOH            ;translate 2nd byte
                      2130             MOV     R1, #B2         ;point bo B1
                      2131             XCHD    A, @R1          ;keep B3-B0 in BYTE1
                      2132             RET
                      2133     ;*********adddition for TFT 221E1C******************
                      2134     ;respond 62 1E 1C B1 B2
                      2135     MODE22:
                      2136             CJNE    A, #36h, PWRDOWN        ;If A = '6' then next else jump
****ERROR:Labelwasalreadydefined:`mode22'
                      2137             MOV     SLEEPCNT, #24h  ;Reset sleep mode counter
                      2138             MOV     R0, #BUFFER+9   ;point to byte1
                      2139             MOV     A, @R0
                      2140             CALL    ATOH            ;translate 1st byte
                      2141             SWAP    A               ;keep data in B7-B4
                      2142             MOV     B1, A           ;keep B7-B4 in BYTE1
                      2143             INC     R0
                      2144             MOV     A, @R0
                      2145             CALL    ATOH            ;translate 2nd byte
                      2146             MOV     R1, #B1         ;point bo B1
                      2147             XCHD    A, @R1          ;keep B3-B0 in BYTE1
                      2148     ;---Byte 1 Get OK
                      2149             MOV     R0, #BUFFER+12  ;point to byte2
                      2150             MOV     A, @R0
                      2151             CALL    ATOH            ;translate 1st byte
                      2152             SWAP    A               ;keep data in B7-B4
                      2153             MOV     B2, A           ;keep B7-B4 in BYTE1
                      2154             INC     R0
                      2155             MOV     A, @R0
                      2156             CALL    ATOH            ;translate 2nd byte
                      2157             MOV     R1, #B2         ;point bo B1
                      2158             XCHD    A, @R1          ;keep B3-B0 in BYTE1
                      2159             RET
                      2160     ;*******************************************
                      2161
                      2162     PWRDOWN:                        ;Error mesasge receive then goto sleep mode
                      2163             DJNZ    SLEEPCNT, NO_DATA
****ERROR:Labelwasalreadydefined:`pwrdown'
                      2164             MOV     A, CONFIG       ;Check Auto sleep On or OFF
                      2165             JNB     ACC.4, NO_DATA  ;If auto sleep mode is off then skip to NODATA
                      2166             CALL    SOUND_BEEP
                      2167             MOV     A, #LCD_CLS
                      2168             CALL    WRCMD
                      2169             CALL    DEL100m
                      2170             MOV     A, #LCD_SETDDADDR+0     ;Line 1
                      2171             CALL    WRCMD
                      2172             MOV     DPTR, #PDOWN1   ;Power Down Mode
                      2173             CALL    WRSTR
                      2174             MOV     A, #LCD_SETDDADDR+40h   ;Line 2
                      2175             CALL    WRCMD
                      2176             MOV     DPTR, #PDOWN2   ;Power Down Mode
                      2177             CALL    WRSTR
                      2178             CALL    DEL500m
                      2179             CALL    SOUND_TRIG
                      2180             CALL    DEL500m
                      2181             CALL    SOUND_TRIG
                      2182             CALL    DEL500m
                      2183             CALL    SOUND_TRIG
                      2184             CALL    DEL500m
                      2185             MOV     A, #LCD_SETVISIBLE+000b ; display off + nocursor + noblink
                      2186             CALL    WRCMD
                      2187             CLR     LEDUP           ;turn off LED
                      2188             CLR     LEDDN
                      2189             SETB    BL              ;Turn off Back light
                      2190     ;MOV    PCON,#02h       ;set PCON.1 the power down...........
                      2191     ;System shut down here
                      2192             JMP     TURNONCHK
                      2193     NO_DATA:
                      2194             MOV     B1, #00h
****ERROR:Labelwasalreadydefined:`no_data'
                      2195             MOV     B2, #00h
                      2196             RET
                      2197     ;check engine turn on again or not
                      2198     TURNONCHK:
                      2199             MOV     DPTR, #CHKCAN
****ERROR:Labelwasalreadydefined:`turnonchk'
                      2200             CALL    SBLOCK
                      2201             CALL    RBYTE           ;Receive 'SEARCHING....'
                      2202             CJNE    A, #34h, $+12   ;If A = '4' then start watch dog to make all reset
                      2203             MOV     DPTR, #SERWS    ;send warm start message
                      2204             CALL    SBLOCK
                      2205             CALL    WDRESET         ;All System Reset Here
                      2206             MOV     TEMP1, #10
                      2207     DEL5SEC:
                      2208             CALL    DEL500m
****ERROR:Labelwasalreadydefined:`del5sec'
                      2209             DJNZ    TEMP1, DEL5SEC
                      2210             JMP     TURNONCHK       ;check turn on key again
                      2211     ;add some thing here
                      2212     ;------------- TFT send 221E1C---------
                      2213     ;IN =A
                      2214     SEND221E1C:
                      2215             MOV     DPTR, #TFTPID
****ERROR:Labelwasalreadydefined:`send221e1c'
                      2216             CALL    SBLOCK
                      2217             RET
                      2218     ;-------------ASCII to HEX-----------------------------
                      2219     ;IN = A,R1
                      2220     ;OUT = A
                      2221     ATOH:                           ;ASCII to Hex Converter
                      2222             MOV     B, #41h
****ERROR:Labelwasalreadydefined:`atoh'
                      2223             DIV     AB
                      2224             CJNE    A, #01h, ATOF2  ;IF A=>B then goto ATOF2
                      2225             MOV     A, @R0          ;data in buffer
                      2226             SUBB    A, #37h
                      2227             RET
                      2228     ATOF2:
                      2229             MOV     A, @R0          ;data in buffer
****ERROR:Labelwasalreadydefined:`atof2'
                      2230             SUBB    A, #2Fh
                      2231             RET
                      2232     ;--------------HexToASCII----------------
                      2233     ;IN = A,R7
                      2234     ;OUT = A
                      2235     HTOA:
                      2236             MOV     R7, A
****ERROR:Labelwasalreadydefined:`htoa'
                      2237             MOV     B, #0Ah         ;Hex value to ASCII Code Sub Routine Use ACC
                      2238             DIV     AB
                      2239             CJNE    A, #01h, ATOF   ;If A=>B then goto ATOF
                      2240             MOV     A, R7
                      2241             ADD     A, #37h         ;Result in A  (for 0 - 9)
                      2242             RET
                      2243     ATOF:
                      2244             MOV     A, R7           ;Return IRAM data to A
****ERROR:Labelwasalreadydefined:`atof'
                      2245             ADD     A, #30h         ;REsult in A  (for  A-F)
                      2246             RET
                      2247     ; ********** SBLOCK SUB **********
                      2248     ; SEND BLOCK
                      2249     ; IN  = DPTR ROM-ADDRESS (END BY 0 OR 0DH)
                      2250     ; OUT = DPTR (NEXT)
                      2251     ; REG = A,DPTR
                      2252     SBLOCK:
                      2253             CLR     A
****ERROR:Labelwasalreadydefined:`sblock'
                      2254             MOVC    A, @A+DPTR
                      2255             JNZ     SBLOCK1
                      2256             RET                     ;EXIT BY 0
                      2257     SBLOCK1:
                      2258             INC     DPTR            ;next char
****ERROR:Labelwasalreadydefined:`sblock1'
                      2259             CALL    SBYTE           ;send char
                      2260             JMP     SBLOCK
                      2261     ;===========RBLOCK=========
                      2262     ; IN  = A
                      2263     ; OUT = BUFFER
                      2264     ; REG = R0,DPTR
                      2265     RBLOCK:
                      2266             MOV     R0, #BUFFER     ;R0 point to buffer memory address
****ERROR:Labelwasalreadydefined:`rblock'
                      2267     RBLOCK1:
                      2268             CALL    RBYTE           ;wait for incoming char
****ERROR:Labelwasalreadydefined:`rblock1'
                      2269             CJNE    A, #3Eh, RBLOCK2        ;If A = '>' then end message
                      2270             RET                     ;EXIT BY '>'
                      2271     RBLOCK2:
                      2272             MOV     @R0, A          ;Save char in buffer
****ERROR:Labelwasalreadydefined:`rblock2'
                      2273             INC     R0              ;point next address
                      2274             JMP     RBLOCK1
                      2275             ; ----------------------------------
                      2276     SBYTE:                          ;Send Data from RS232
                      2277             JNB     TI, $           ;WAIT FOR SEND OK
****ERROR:Labelwasalreadydefined:`sbyte'
                      2278             CLR     TI
                      2279             MOV     SBUF, A
                      2280             RET
                      2281     ;------------------------------------
                      2282     RBYTE:                          ;Receive Data from RS232
                      2283             JNB     RI, $           ;WAIT FOR RECEIVE OK
****ERROR:Labelwasalreadydefined:`rbyte'
                      2284             CLR     RI
                      2285             MOV     A, SBUF
                      2286             RET
                      2287     ;-------- Delay 50 usec-----------------------------------
                      2288     ;USE = R6,R7
                      2289     DEL5m:
                      2290             MOV     R6, #1Fh
****ERROR:Labelwasalreadydefined:`del5m'
                      2291             DJNZ    R6, $
                      2292             RET
                      2293     ;----------delay 0.5 sec-----------------------------
                      2294     ;USE = R4,R5,R6,R7
                      2295     DEL500m:
                      2296             MOV     R4, #0Ah
****ERROR:Labelwasalreadydefined:`del500m'
                      2297     DEL500m1:
                      2298             MOV     R5, #064h
****ERROR:Labelwasalreadydefined:`del500m1'
                      2299     DEL500m3:
                      2300             MOV     R7, #03h
****ERROR:Labelwasalreadydefined:`del500m3'
                      2301     DEL500m2:
                      2302             MOV     R6, #098h
****ERROR:Labelwasalreadydefined:`del500m2'
                      2303             DJNZ    R6, $
                      2304             DJNZ    R7, DEL500m2
                      2305             DJNZ    R5, DEL500m3
                      2306             DJNZ    R4, DEL500m1
                      2307             RET
                      2308     ;----------delay 0.1 sec-----------------------------
                      2309     ;USE = R4,R5,R6,R7
                      2310     DEL100m:
                      2311             MOV     R4, #02h
****ERROR:Labelwasalreadydefined:`del100m'
                      2312     DEL100m1:
                      2313             MOV     R5, #032h
****ERROR:Labelwasalreadydefined:`del100m1'
                      2314     DEL100m3:
                      2315             MOV     R7, #03h
****ERROR:Labelwasalreadydefined:`del100m3'
                      2316     DEL100m2:
                      2317             MOV     R6, #098h
****ERROR:Labelwasalreadydefined:`del100m2'
                      2318             DJNZ    R6, $
                      2319             DJNZ    R7, DEL100m2
                      2320             DJNZ    R5, DEL100m3
                      2321             DJNZ    R4, DEL100m1
                      2322             RET
                      2323     ;---------Hex to Dec------------------
                      2324     ;IN = DPTR              ;FFFF
                      2325     ;OUT = R1,R2,R3         ;R1=6  R2=55 R3=35
                      2326     ;REG = A,R0,R1-R5,DPTR
                      2327     HTOD:
                      2328             MOV     A, #00h
****ERROR:Labelwasalreadydefined:`htod'
                      2329             MOV     R1, A
                      2330             MOV     R2, A
                      2331             MOV     R3, A
                      2332             MOV     R4, #16
                      2333     HTOD1:
                      2334             MOV     A, DPL
****ERROR:Labelwasalreadydefined:`htod1'
                      2335             RLC     A
                      2336             MOV     DPL, A
                      2337             MOV     A, DPH
                      2338             RLC     A
                      2339             MOV     DPH, A
                      2340             MOV     R5, #3
                      2341             MOV     R0, #3
                      2342     HTOD2:
                      2343             MOV     A, @R0
****ERROR:Labelwasalreadydefined:`htod2'
                      2344             ADDC    A, ACC
                      2345             DA      A
                      2346             MOV     @R0, A
                      2347             DEC     R0
                      2348             DJNZ    R5, HTOD2
                      2349             DJNZ    R4, HTOD1
                      2350             RET
                      2351     ;********************************
                      2352     SOUND_BEEP:
                      2353             CLR     BUZZER          ;buzzer on
****ERROR:Labelwasalreadydefined:`sound_beep'
                      2354             MOV     R3, #07h
                      2355     DELS1:
                      2356             MOV     R4, #0FFh
****ERROR:Labelwasalreadydefined:`dels1'
                      2357     SOUND_BEEP1:
                      2358             MOV     R5, #0FFh
****ERROR:Labelwasalreadydefined:`sound_beep1'
                      2359             DJNZ    R5, $
                      2360             DJNZ    R4, SOUND_BEEP1
                      2361             DJNZ    R3, DELS1
                      2362             SETB    BUZZER          ;buzzer off
                      2363             RET
                      2364     ;************************************************
                      2365     SOUND_TRIG:
                      2366             MOV     A, CONFIG
****ERROR:Labelwasalreadydefined:`sound_trig'
                      2367             JB      ACC.1, SOUND_TRIG0      ;If BEEP on Do next
                      2368             CALL    DEL100m         ;delay compensate trig loop
                      2369             RET
                      2370     SOUND_TRIG0:
                      2371             CLR     BUZZER          ;buzzer on
****ERROR:Labelwasalreadydefined:`sound_trig0'
                      2372             MOV     R3, #030h       ;SOUND LOOP
                      2373     SOUND_TRIG1:
                      2374             MOV     R4, #0FFh
****ERROR:Labelwasalreadydefined:`sound_trig1'
                      2375             DJNZ    R4, $
                      2376             DJNZ    R3, SOUND_TRIG1 ;NEXT LOOP
                      2377             SETB    BUZZER          ;buzzer off
                      2378             RET                     ;back to main routine
                      2379     ;**********************************************
                      2380     BACKLIGHT:                      ;toggle back light
                      2381             JB      BL, BACKLIGHT2
****ERROR:Labelwasalreadydefined:`backlight'
                      2382             SETB    BL              ;turn off
                      2383             CALL    DEL500m
                      2384             RET
                      2385     BACKLIGHT2:
                      2386             CLR     BL              ;turn on
****ERROR:Labelwasalreadydefined:`backlight2'
                      2387             CALL    DEL500m
                      2388             RET
                      2389     ;*********************************************
                      2390     LIGHT1:                         ;warning light up  checking compare value by diviation
                      2391             MOV     A, CONFIG       ;check PID warning lamp status on/off
****ERROR:Labelwasalreadydefined:`light1'
                      2392             JNB     ACC.3, LIGHT11  ;off then jump LIGHT11
                      2393     ;INPUT current pid in ACC
                      2394             MOV     A, B1           ;load first byte only
                      2395             MOV     B, LIMITCHK1
                      2396             DIV     AB
                      2397             MOV     R7, A           ;keep result in R7
                      2398             MOV     A, PID1
                      2399             CJNE    A, #0Ah, $+6
                      2400             JMP     LOWLIMIT1
                      2401             CJNE    A, #014h, $+6
                      2402             JMP     LOWLIMIT1
                      2403             CJNE    A, #015h, $+6
                      2404             JMP     LOWLIMIT1
                      2405             CJNE    A, #02Fh, $+6
                      2406             JMP     LOWLIMIT1
                      2407             CJNE    A, #042h, $+6
                      2408             JMP     LOWLIMIT1
                      2409     ;check high limit
                      2410             MOV     A, R7           ;return RESULT
                      2411             JZ      LIGHT11         ;if A>0 then OK  , if A=0 then Over limit-> warning on
                      2412             SETB    LEDUP
                      2413     LIGHT11:
                      2414             CLR     LEDDN           ;off LEDDN
****ERROR:Labelwasalreadydefined:`light11'
                      2415             RET
                      2416     LOWLIMIT1:                      ;check lowlimit
                      2417             MOV     A, R7
****ERROR:Labelwasalreadydefined:`lowlimit1'
                      2418             JNZ     LIGHT11         ;if A = 0 then lower limit -> warning on
                      2419             SETB    LEDUP
                      2420             CLR     LEDDN           ;off LEDDN
                      2421             RET
                      2422     ;*********************************************
                      2423     LIGHT2:                         ;warning light down checking
                      2424             MOV     A, CONFIG       ;check PID warning lamp status on/off
****ERROR:Labelwasalreadydefined:`light2'
                      2425             JNB     ACC.3, LIGHT22  ;off then jump LIGHT22
                      2426     ;INPUT current pid in ACC
                      2427             MOV     A, B1           ;load first byte only
                      2428             MOV     B, LIMITCHK2
                      2429             DIV     AB
                      2430             MOV     R7, A           ;keep result in R7
                      2431             MOV     A, PID2
                      2432             CJNE    A, #0Ah, $+6
                      2433             JMP     LOWLIMIT2
                      2434             CJNE    A, #014h, $+6
                      2435             JMP     LOWLIMIT2
                      2436             CJNE    A, #015h, $+6
                      2437             JMP     LOWLIMIT2
                      2438             CJNE    A, #02Fh, $+6
                      2439             JMP     LOWLIMIT2
                      2440             CJNE    A, #042h, $+6
                      2441             JMP     LOWLIMIT2
                      2442     ;check high limit
                      2443             MOV     A, R7           ;return RESULT
                      2444             JZ      LIGHT22         ;if A>0 then OK  , if A=0 then Over limit-> warning on
                      2445             SETB    LEDDN
                      2446     LIGHT22:
                      2447             CLR     LEDUP           ;off LEDDN
****ERROR:Labelwasalreadydefined:`light22'
                      2448             RET
                      2449     LOWLIMIT2:                      ;check lowlimit
                      2450             MOV     A, R7
****ERROR:Labelwasalreadydefined:`lowlimit2'
                      2451             JNZ     LIGHT22         ;if A = 0 then lower limit -> warning on
                      2452             SETB    LEDDN
                      2453             CLR     LEDUP           ;off LEDDN
                      2454             RET
                      2455     ;*********************************************
                      2456
                      2457     ; subroutine UDIV16
                      2458     ; 16-Bit / 16-Bit to 16-Bit Quotient & Remainder Unsigned Divide
                      2459     ;
                      2460     ; input:    r1, r0 = Dividend X
                      2461     ;           r3, r2 = Divisor Y
                      2462     ;
                      2463     ; output:   r1, r0 = quotient Q of division Q = X / Y
                      2464     ;           r3, r2 = remainder
                      2465     ;
                      2466     ; alters:   acc, B, dpl, dph, r4, r5, r6, r7, flags
                      2467     ;====================================================================
                      2468
                      2469     UDIV16: mov     r7, #0          ; clear partial remainder
****ERROR:Labelwasalreadydefined:`udiv16'
                      2470             mov     r6, #0
                      2471             mov     B, #16          ; set loop count
                      2472
                      2473     div_loop:       clr     C       ; clear carry flag
****ERROR:Labelwasalreadydefined:`div_loop'
                      2474             mov     a, r0           ; shift the highest bit of
                      2475             rlc     a               ; the dividend into...
                      2476             mov     r0, a
                      2477             mov     a, r1
                      2478             rlc     a
                      2479             mov     r1, a
                      2480             mov     a, r6           ; ... the lowest bit of the
                      2481             rlc     a               ; partial remainder
                      2482             mov     r6, a
                      2483             mov     a, r7
                      2484             rlc     a
                      2485             mov     r7, a
                      2486             mov     a, r6           ; trial subtract divisor
                      2487             clr     C               ; from partial remainder
                      2488             subb    a, r2
                      2489             mov     dpl, a
                      2490             mov     a, r7
                      2491             subb    a, r3
                      2492             mov     dph, a
                      2493             cpl     C               ; complement external borrow
                      2494             jnc     div_1           ; update partial remainder if
                      2495             ; borrow
                      2496             mov     r7, dph         ; update partial remainder
                      2497             mov     r6, dpl
                      2498     div_1:  mov     a, r4           ; shift result bit into partial
****ERROR:Labelwasalreadydefined:`div_1'
                      2499             rlc     a               ; quotient
                      2500             mov     r4, a
                      2501             mov     a, r5
                      2502             rlc     a
                      2503             mov     r5, a
                      2504             djnz    B, div_loop
                      2505             mov     a, r5           ; put quotient in r0, and r1
                      2506             mov     r1, a
                      2507             mov     a, r4
                      2508             mov     r0, a
                      2509             mov     a, r7           ; get remainder, saved before the
                      2510             mov     r3, a           ; last subtraction
                      2511             mov     a, r6
                      2512             mov     r2, a
                      2513             ret
                      2514     ;===================================================
                      2515     ; subroutine UMUL16
                      2516     ; 16-Bit x 16-Bit to 32-Bit Product Unsigned Multiply
                      2517     ;
                      2518     ; input:    r1, r0 = multiplicand X
                      2519     ;           r3, r2 = multiplier Y
                      2520     ;
                      2521     ; output:   r3, r2, r1, r0 = product P = X x Y
                      2522     ;
                      2523     ; alters:   acc, C
                      2524     ;====================================================================
                      2525
                      2526     UMUL16: push    B
****ERROR:Labelwasalreadydefined:`umul16'
                      2527             push    dpl
                      2528             mov     a, r0
                      2529             mov     b, r2
                      2530             mul     ab              ; multiply XL x YL
                      2531             push    acc             ; stack result low byte
                      2532             push    b               ; stack result high byte
                      2533             mov     a, r0
                      2534             mov     b, r3
                      2535             mul     ab              ; multiply XL x YH
                      2536             pop     00H
                      2537             add     a, r0
                      2538             mov     r0, a
                      2539             clr     a
                      2540             addc    a, b
                      2541             mov     dpl, a
                      2542             mov     a, r2
                      2543             mov     b, r1
                      2544             mul     ab              ; multiply XH x YL
                      2545             add     a, r0
                      2546             mov     r0, a
                      2547             mov     a, dpl
                      2548             addc    a, b
                      2549             mov     dpl, a
                      2550             clr     a
                      2551             addc    a, #0
                      2552             push    acc             ; save intermediate carry
                      2553             mov     a, r3
                      2554             mov     b, r1
                      2555             mul     ab              ; multiply XH x YH
                      2556             add     a, dpl
                      2557             mov     r2, a
                      2558             pop     acc             ; retrieve carry
                      2559             addc    a, b
                      2560             mov     r3, a
                      2561             mov     r1, 00H
                      2562             pop     00H             ; retrieve result low byte
                      2563             pop     dpl
                      2564             pop     B
                      2565             ret
                      2566     ;====================================================================
                      2567     ; subroutine ADD16
                      2568     ; 16-Bit Signed (2's Complement) Addition
                      2569     ;
                      2570     ; input:     r1, r0 = X
                      2571     ;            r3, r2 = Y
                      2572     ;
                      2573     ; output:    r1, r0 = signed sum S = X + Y
                      2574     ;            Carry C is set if the result (S) is out of range
                      2575     ;
                      2576     ; alters:    acc, C, OV
                      2577     ;====================================================================
                      2578     ADD16:  anl     PSW, #0E7H      ; Register Bank 0
****ERROR:Labelwasalreadydefined:`add16'
                      2579             mov     a, r0           ; load X low byte into acc
                      2580             add     a, r2           ; add Y low byte
                      2581             mov     r0, a           ; put result in Z low byte
                      2582             mov     a, r1           ; load X high byte into acc
                      2583             addc    a, r3           ; add Y high byte with carry
                      2584             mov     r1, a           ; save result in Z high byte
                      2585             mov     C, OV
                      2586             ret
                      2587     ;====================================================================
                      2588     ;EEPROM 24LC01B  Sub Routine
                      2589     ; ********** IPW SUB **********
                      2590     ; 24LC01B WRITE
                      2591     ;IN      R0=  ADDRESS,   R1 = DATA
                      2592     ;OUT     EEPERR  0=OK 1=ERROR
                      2593     ; REG = A,R2
                      2594     IPW:
                      2595     ;CLR    EEPWP           ;disable write protect
                      2596             CALL    CDEL            ;delay
****ERROR:Labelwasalreadydefined:`ipw'
                      2597             SETB    EEPSDA          ;START CONDITION
                      2598             SETB    EEPSCL
                      2599             CLR     EEPSDA
                      2600             CALL    CDEL
                      2601             CLR     EEPSCL
                      2602             SETB    EEPSDA
                      2603             MOV     A, #10100000B   ;Write Control Code  1010AAAW
                      2604             CALL    IPWRB           ;1 Byte Write
                      2605             JB      EEPERR, IPW9
                      2606             MOV     A, R0           ;WORD ADDRESS
                      2607             ANL     A, #01111111B   ;Limit Address to 128 byte only
                      2608             CALL    IPWRB           ;1 Byte Write
                      2609             JB      EEPERR, IPW9
                      2610             MOV     A, R1           ;DATA
                      2611             CALL    IPWRB           ;1 Byte Write
                      2612     IPW9:
                      2613             CLR     EEPSDA          ;STOP CONDITION
****ERROR:Labelwasalreadydefined:`ipw9'
                      2614             SETB    EEPSCL
                      2615             CALL    CDEL
                      2616             SETB    EEPSDA
                      2617     ;SETB   EEPWP           ;ENable write protech
                      2618             RET
                      2619     ; ********** IPWRB SUB **********
                      2620     ; 24LC01B WRITE 1 BYTE
                      2621     ; IN  = A
                      2622     ; OUT = EEPERR  0=OK 1=ERROR
                      2623     ; REG = A,R2
                      2624     IPWRB:
                      2625             CLR     EEPERR          ;Reset Error Byte
****ERROR:Labelwasalreadydefined:`ipwrb'
                      2626             MOV     R2, #8
                      2627     IPWRB1:
                      2628             RLC     A
****ERROR:Labelwasalreadydefined:`ipwrb1'
                      2629             MOV     EEPSDA, C
                      2630             CALL    CHIGH           ;CLOCK
                      2631             CALL    CLOW
                      2632             DJNZ    R2, IPWRB1
                      2633             SETB    EEPSDA          ;ACKNOWLEDGE BIT
                      2634             CALL    CHIGH
                      2635             JNB     EEPSDA, IPWRB2
                      2636             SETB    EEPERR
                      2637     IPWRB2:
                      2638             CALL    CLOW
****ERROR:Labelwasalreadydefined:`ipwrb2'
                      2639             RET
                      2640     ; ********** IPR SUB **********
                      2641     ;24LC01B READ
                      2642     ;IN  = R0  ADDRESS
                      2643     ;OUT = R1  DATA
                      2644     ; EEPERR  0=OK 1=ERROR
                      2645     ; REG = A,R2
                      2646     IPR:
                      2647             SETB    EEPSDA          ;START CONDITION
****ERROR:Labelwasalreadydefined:`ipr'
                      2648             SETB    EEPSCL
                      2649             CLR     EEPSDA
                      2650             CALL    CDEL
                      2651             CLR     EEPSCL
                      2652             MOV     A, #10100000B   ;DEVICE ADDRESS 1010AAAW
                      2653             CALL    IPWRB
                      2654             JB      EEPERR, IPR9
                      2655             MOV     A, R0           ;WORD ADDRESS
                      2656             ANL     A, #01111111B
                      2657             CALL    IPWRB
                      2658             JB      EEPERR, IPR9
                      2659             CLR     EEPSDA          ;STOP CONDITION
                      2660             SETB    EEPSCL
                      2661             CALL    CDEL
                      2662             SETB    EEPSDA
                      2663             SETB    EEPSDA          ;START CONDITION
                      2664             SETB    EEPSCL
                      2665             CLR     EEPSDA
                      2666             CALL    CDEL
                      2667             CLR     EEPSCL
                      2668             MOV     A, #10100001B   ;DEVICE ADDRESS 1010AAAR
                      2669             CALL    IPWRB
                      2670             JB      EEPERR, IPR9
                      2671             CALL    IPRDB           ;Read DATA
                      2672             JB      EEPERR, IPR9
                      2673             MOV     R1, A
                      2674     IPR9:
                      2675             CLR     EEPSDA          ;STOP CONDITION
****ERROR:Labelwasalreadydefined:`ipr9'
                      2676             SETB    EEPSCL
                      2677             CALL    CDEL
                      2678             SETB    EEPSDA
                      2679             RET
                      2680     ; ********** IPRDB SUB **********
                      2681     ; READ BYTE
                      2682     ; OUT = A
                      2683     ; EEPERR  0=OK 1=ERROR
                      2684     ; REG = A,R2
                      2685     IPRDB:
                      2686             CLR     EEPERR          ;reset Error Byte
****ERROR:Labelwasalreadydefined:`iprdb'
                      2687             MOV     R2, #8
                      2688     IPRDB1:
                      2689             CALL    CHIGH
****ERROR:Labelwasalreadydefined:`iprdb1'
                      2690             MOV     C, EEPSDA
                      2691             RLC     A
                      2692             CALL    CLOW
                      2693             DJNZ    R2, IPRDB1
                      2694             SETB    EEPSDA          ;ACKNOWLEDGE BIT (1)
                      2695             CALL    CHIGH
                      2696             JB      EEPSDA, IPRDB2
                      2697             SETB    EEPERR
                      2698     IPRDB2:
                      2699             CALL    CLOW
****ERROR:Labelwasalreadydefined:`iprdb2'
                      2700             RET
                      2701     ;********EEPROM Clock***************
                      2702     CHIGH:
                      2703             SETB    EEPSCL          ;**** SCL HIGH + DELAY ****
****ERROR:Labelwasalreadydefined:`chigh'
                      2704             NOP
                      2705             NOP
                      2706             NOP
                      2707             NOP
                      2708             NOP
                      2709             RET
                      2710
                      2711     CLOW:
                      2712             CLR     EEPSCL          ;**** SCL LOW + DELAY ****
****ERROR:Labelwasalreadydefined:`clow'
                      2713             NOP
                      2714             NOP
                      2715             NOP
                      2716             NOP
                      2717             NOP
                      2718             RET
                      2719
                      2720     CDEL:
                      2721             NOP                     ;**** DELAY ****
****ERROR:Labelwasalreadydefined:`cdel'
                      2722             NOP
                      2723             NOP
                      2724             NOP
                      2725             NOP
                      2726             RET
                      2727     ;================================================
                      2728     WDRESET:                        ;Reset watchdog timer
                      2729             MOV     WDTRST, #01Eh
****ERROR:Labelwasalreadydefined:`wdreset'
                      2730             MOV     WDTRST, #0E1h
                      2731             RET
                      2732     ;------------------------------------------------------------------
                      2733     ;Interprete trouble code
                      2734     ;IN = R0  OUT = R1,R2
                      2735     INTPDTC:
                      2736             CJNE    @R0, #30h, $+8
****ERROR:Labelwasalreadydefined:`intpdtc'
                      2737             MOV     R1, #50h        ;P char
                      2738             MOV     R2, #30h        ;0 char
                      2739             RET
                      2740             CJNE    @R0, #31h, $+8
                      2741             MOV     R1, #50h        ;P char
                      2742             MOV     R2, #31h        ;1 char
                      2743             RET
                      2744             CJNE    @R0, #32h, $+8
                      2745             MOV     R1, #50h        ;P char
                      2746             MOV     R2, #32h        ;2 char
                      2747             RET
                      2748             CJNE    @R0, #33h, $+8
                      2749             MOV     R1, #50h        ;P char
                      2750             MOV     R2, #33h        ;3 char
                      2751             RET
                      2752             CJNE    @R0, #34h, $+8
                      2753             MOV     R1, #43h        ;C char
                      2754             MOV     R2, #30h        ;0 char
                      2755             RET
                      2756             CJNE    @R0, #35h, $+8
                      2757             MOV     R1, #43h        ;C char
                      2758             MOV     R2, #31h        ;1 char
                      2759             RET
                      2760             CJNE    @R0, #36h, $+8
                      2761             MOV     R1, #43h        ;C char
                      2762             MOV     R2, #32h        ;2 char
                      2763             RET
                      2764             CJNE    @R0, #37h, $+8
                      2765             MOV     R1, #43h        ;C char
                      2766             MOV     R2, #33h        ;3 char
                      2767             RET
                      2768             CJNE    @R0, #38h, $+8
                      2769             MOV     R1, #42h        ;B char
                      2770             MOV     R2, #30h        ;0 char
                      2771             RET
                      2772             CJNE    @R0, #39h, $+8
                      2773             MOV     R1, #42h        ;B char
                      2774             MOV     R2, #31h        ;1 char
                      2775             RET
                      2776             CJNE    @R0, #41h, $+8
                      2777             MOV     R1, #42h        ;B char
                      2778             MOV     R2, #32h        ;2 char
                      2779             RET
                      2780             CJNE    @R0, #42h, $+8
                      2781             MOV     R1, #42h        ;B char
                      2782             MOV     R2, #33h        ;3 char
                      2783             RET
                      2784             CJNE    @R0, #43h, $+8
                      2785             MOV     R1, #55h        ;U char
                      2786             MOV     R2, #30h        ;0 char
                      2787             RET
                      2788             CJNE    @R0, #44h, $+8
                      2789             MOV     R1, #55h        ;U char
                      2790             MOV     R2, #31h        ;1 char
                      2791             RET
                      2792             CJNE    @R0, #45h, $+8
                      2793             MOV     R1, #55h        ;U char
                      2794             MOV     R2, #32h        ;2 char
                      2795             RET
                      2796             CJNE    @R0, #46h, $+8
                      2797             MOV     R1, #55h        ;U char
                      2798             MOV     R2, #33h        ;3 char
                      2799             RET
                      2800     ;================================================
                      2801     ;Looking Table
13AB 303130300D       2802     CHKCAN: DB      '0100', 0Dh, 00h        ;PID send to check CAN connection
     00
****ERROR:Labelwasalreadydefined:`chkcan'
13B1 415445300D       2803     SERINIT1:       DB      'ATE0', 0Dh, 00h        ;set Echo off
     00
****ERROR:Labelwasalreadydefined:`serinit1'
13B7 41544C300D       2804     SERINIT2:       DB      'ATL0', 0Dh, 00h        ;set Lind Feed off
     00
****ERROR:Labelwasalreadydefined:`serinit2'
13BD 415448300D       2805     SERINIT3:       DB      'ATH0', 0Dh, 00h        ;set Msg Header  off
     00
****ERROR:Labelwasalreadydefined:`serinit3'
13C3 4154535430       2806     SERINIT4:       DB      'ATST00', 0DH, 00h      ;set wait time = 4 msec
     300D00
****ERROR:Labelwasalreadydefined:`serinit4'
13CB 4154535041       2807     SERINIT5:       DB      'ATSPA6', 0Dh, 00h      ;set Default CAN Bus and auto search
     360D00
****ERROR:Labelwasalreadydefined:`serinit5'
13D3 415457530D       2808     SERWS:  DB      'ATWS', 0Dh, 00h        ;ELM warm start message
     00
****ERROR:Labelwasalreadydefined:`serws'
13D9 0001024F42       2809     TITLE1: DB      00h, 01h, 02h, 'OBDII X-METER V1', 0Dh
     4449492058
     2D4D455445
     522056310D
****ERROR:Labelwasalreadydefined:`title1'
13ED 0304052D2D       2810     TITLE2: DB      03h, 04h, 05h, '----------------', 0Dh
     2D2D2D2D2D
     2D2D2D2D2D
     2D2D2D2D0D
****ERROR:Labelwasalreadydefined:`title2'
1401 4372656174       2811     TITLE3: DB      'Createdby Ratthanin', 06h, 0Dh, 00h
     6564627920
     5261747468
     616E696E06
     0D00
****ERROR:Labelwasalreadydefined:`title3'
                      2812
1417 53656C6563       2813     MENU1:  DB      'SelectSETUP Menu[~]', 0Dh, 00h
     7453455455
     50204D656E
     755B7E5D0D
     00
****ERROR:Labelwasalreadydefined:`menu1'
142C 312E417574       2814     MENU11: DB      '1.Auto Backlight   ', 0Dh, 00h
     6F20426163
     6B6C696768
     742020200D
     00
****ERROR:Labelwasalreadydefined:`menu11'
1441 322E205365       2815     MENU12: DB      '2. Set SPEAKER     ', 0Dh, 00h
     7420535045
     414B455220
     202020200D
     00
****ERROR:Labelwasalreadydefined:`menu12'
1456 332E205365       2816     MENU13: DB      '3. Set start-up PID1', 0Dh, 00h
     7420737461
     72742D7570
     2050494431
     0D00
****ERROR:Labelwasalreadydefined:`menu13'
146C 342E205365       2817     MENU14: DB      '4. Set start-up PID2', 0Dh, 00h
     7420737461
     72742D7570
     2050494432
     0D00
****ERROR:Labelwasalreadydefined:`menu14'
1482 352E205049       2818     MENU15: DB      '5. PID Warning Light', 0Dh, 00h
     4420576172
     6E696E6720
     4C69676874
     0D00
****ERROR:Labelwasalreadydefined:`menu15'
1498 362E204175       2819     MENU16: DB      '6. Auto Sleep Mode.', 0Dh, 00h
     746F20536C
     656570204D
     6F64652E0D
     00
****ERROR:Labelwasalreadydefined:`menu16'
14AD 372E204669       2820     MENU17: DB      '7. Firmware Ver 1.07', 0Dh, 00h
     726D776172
     6520566572
     20312E3037
     0D00
****ERROR:Labelwasalreadydefined:`menu17'
14C3 4E6F763235       2821     RELEASE:        DB      'Nov25, 2022|JavaJacob', 00Dh, 00h
     2C20323032
     327C4A6176
     614A61636F
     620D00
****ERROR:Labelwasalreadydefined:`release'
                      2822
14DA 5370656369       2823     MENU2:  DB      'SpecialFunction [~]', 0Dh, 00h
     616C46756E
     6374696F6E
     205B7E5D0D
     00
****ERROR:Labelwasalreadydefined:`menu2'
14EF 312E566568       2824     VEHINFO:        DB      '1.Veh Info Numbers:', 0Dh, 00h
     20496E666F
     204E756D62
     6572733A0D
     00
****ERROR:Labelwasalreadydefined:`vehinfo'
1504 322E4E6F2E       2825     DTC:    DB      '2.No. of DTCs = -- ', 0Dh, 16
     206F662044
     544373203D
     202D2D200D
     10
****ERROR:Labelwasalreadydefined:`dtc'
1519 4D494C7374       2826     MILOFF: DB      'MILstatus is OFF...', 0Dh, 00h
     6174757320
     6973204F46
     462E2E2E0D
     00
****ERROR:Labelwasalreadydefined:`miloff'
152E 5072657373       2827     MILON:  DB      'Pressto read DTC[~]', 0Dh, 00h
     746F207265
     6164204454
     435B7E5D0D
     00
****ERROR:Labelwasalreadydefined:`milon'
1543 436C656172       2828     SETMIL: DB      'ClearMIL now?[NO ]~', 0Dh, 00h
     4D494C206E
     6F773F5B4E
     4F205D7E0D
     00
****ERROR:Labelwasalreadydefined:`setmil'
1558 303130310D       2829     DTCPID: DB      '0101', 0Dh, 00h        ;for SBLOCK  check no of DTC
     00
****ERROR:Labelwasalreadydefined:`dtcpid'
155E 30330D00         2830     DTCREAD:        DB      '03', 0Dh, 00h  ;for SBLOCK  read DTC
****ERROR:Labelwasalreadydefined:`dtcread'
1562 6E65787420       2831     DISPDTC:        DB      'next DTC[~]', 0Dh, 00h
     4454435B7E
     5D0D00
****ERROR:Labelwasalreadydefined:`dispdtc'
156F 30340D00         2832     CLRMIL: DB      '04', 0Dh, 00h  ;for SBLOCK  clear MIL status
****ERROR:Labelwasalreadydefined:`clrmil'
1573 5072657373       2833     TOGGLE: DB      'Press to set[~]', 0Dh, 00h
     20746F2073
     65745B7E5D
     0D00
****ERROR:Labelwasalreadydefined:`toggle'
                      2834
1584 5B53455420       2835     LIMITMSG:       DB      '[SET LIMITTED VALUE]', 0Dh, 00h
     4C494D4954
     5445442056
     414C55455D
     0D00
****ERROR:Labelwasalreadydefined:`limitmsg'
159A 5365747469       2836     LIMITFIN:       DB      'Setting complete!...', 0Dh, 00h
     6E6720636F
     6D706C6574
     65212E2E2E
     0D00
****ERROR:Labelwasalreadydefined:`limitfin'
15B0 5B20555047       2837     UGFIRM1:        DB      '[ UPGRADE FIRMWARE ]', 0Dh, 00h
     5241444520
     4649524D57
     415245205D
     0D00
****ERROR:Labelwasalreadydefined:`ugfirm1'
15C6 5761697469       2838     UGFIRM2:        DB      'Waiting connection.', 0Dh, 00h
     6E6720636F
     6E6E656374
     696F6E2E0D
     00
****ERROR:Labelwasalreadydefined:`ugfirm2'
15DB 4E6F772055       2839     UGFIRM3:        DB      'Now Upgrading...    ', 0Dh, 00h
     7067726164
     696E672E2E
     2E20202020
     0D00
****ERROR:Labelwasalreadydefined:`ugfirm3'
                      2840
15F1 303130440D       2841     SPDPID: DB      '010D', 0Dh, 00h        ;for SBLOCK fuel consumption calculate
     00
****ERROR:Labelwasalreadydefined:`spdpid'
15F7 303131300D       2842     MAFPID: DB      '0110', 0Dh, 00h
     00
****ERROR:Labelwasalreadydefined:`mafpid'
15FD 3232314531       2843     TFTPID: DB      '221E1C', 0Dh, 00h      ;Transmission Fluid Temperature PID
     430D00
****ERROR:Labelwasalreadydefined:`tftpid'
                      2844
1605 0814080304       2845     CGDegC: DB      08h, 14h, 08h, 03h, 04h, 04h, 04h, 03h, 0Dh, 00h        ;degree C symbol
     0404030D00
****ERROR:Labelwasalreadydefined:`cgdegc'
160F 0814080705       2846     CGDegF: DB      08h, 14h, 08h, 07h, 05h, 06h, 04h, 04h, 0Dh, 00h        ;degree F symbol
     0604040D00
****ERROR:Labelwasalreadydefined:`cgdegf'
1619 0000010608       2847     CGUL:   DB      00h, 00h, 01h, 06h, 08h, 0Ch, 1Bh, 10h, 0Dh, 00h
     0C1B100D00
****ERROR:Labelwasalreadydefined:`cgul'
1623 00001F0000       2848     CGUM:   DB      00h, 00h, 1Fh, 00h, 00h, 00h, 11h, 0Ah, 0Dh, 00h
     00110A0D00
****ERROR:Labelwasalreadydefined:`cgum'
162D 0000100C02       2849     CGUR:   DB      00h, 00h, 10h, 0Ch, 02h, 06h, 1Bh, 01h, 0Dh, 00h
     061B010D00
****ERROR:Labelwasalreadydefined:`cgur'
1637 1010080E03       2850     CGLL:   DB      10h, 10h, 08h, 0Eh, 03h, 00h, 00h, 00h, 0Dh, 00h
     0000000D00
****ERROR:Labelwasalreadydefined:`cgll'
1641 0404000011       2851     CGLM:   DB      04h, 04h, 00h, 00h, 11h, 1Fh, 00h, 00h, 0Dh, 00h
     1F00000D00
****ERROR:Labelwasalreadydefined:`cglm'
164B 0101020E18       2852     CGLR:   DB      01h, 01h, 02h, 0Eh, 18h, 00h, 00h, 00h, 0Dh, 00h
     0000000D00
****ERROR:Labelwasalreadydefined:`cglr'
                      2853
1655 43414C2045       2854     PID04:  DB      'CAL Engine Load ---%', 0Dh, 16
     6E67696E65
     204C6F6164
     202D2D2D25
     0D10
****ERROR:Labelwasalreadydefined:`pid04'
166B 436F6F6C61       2855     PID05:  DB      'Coolant Temp: --- ', 0DFh, 'c', 0Dh, 14
     6E74205465
     6D703A202D
     2D2D20DF63
     0D0E
****ERROR:Labelwasalreadydefined:`pid05'
1681 532D542046       2856     PID06:  DB      'S-T Fuel Trim1 --- %', 0Dh, 15
     75656C2054
     72696D3120
     2D2D2D2025
     0D0F
****ERROR:Labelwasalreadydefined:`pid06'
1697 4C2D542046       2857     PID07:  DB      'L-T Fuel Trim1 --- %', 0Dh, 15
     75656C2054
     72696D3120
     2D2D2D2025
     0D0F
****ERROR:Labelwasalreadydefined:`pid07'
                      2858
16AD 4675656C20       2859     PID0A:  DB      'Fuel Pressure ---kPa', 0Dh, 14
     5072657373
     757265202D
     2D2D6B5061
     0D0E
****ERROR:Labelwasalreadydefined:`pid0a'
16C3 4D414E2041       2860     PID0B:  DB      'MAN Air Press ---kPa', 0Dh, 14
     6972205072
     657373202D
     2D2D6B5061
     0D0E
****ERROR:Labelwasalreadydefined:`pid0b'
16D9 454E472053       2861     PID0C:  DB      'ENG Speed: ---- RPM ', 0Dh, 11
     706565643A
     202D2D2D2D
     2052504D20
     0D0B
****ERROR:Labelwasalreadydefined:`pid0c'
16EF 5645482053       2862     PID0D:  DB      'VEH Speed: --- km/h ', 0Dh, 11
     706565643A
     202D2D2D20
     6B6D2F6820
     0D0B
****ERROR:Labelwasalreadydefined:`pid0d'
1705 49474E2041       2863     PID0E:  DB      'IGN ADV Timing: ---', 0DFh, 0Dh, 16
     4456205469
     6D696E673A
     202D2D2DDF
     0D10
****ERROR:Labelwasalreadydefined:`pid0e'
171B 496E74616B       2864     PID0F:  DB      'Intake Air Temp --', 0DFh, 'c', 0Dh, 15
     6520416972
     2054656D70
     202D2DDF63
     0D0F
****ERROR:Labelwasalreadydefined:`pid0f'
1731 4169722046       2865     PID10:  DB      'Air Flow ---.- g/sec', 0Dh, 9
     6C6F77202D
     2D2D2E2D20
     672F736563
     0D09
****ERROR:Labelwasalreadydefined:`pid10'
1747 5468726F74       2866     PID11:  DB      'Throttle Pos: --- %  ', 0Dh, 14
     746C652050
     6F733A202D
     2D2D202520
     200D0E
****ERROR:Labelwasalreadydefined:`pid11'
175E 46726F6E74       2867     PID14:  DB      'Front HO2S Volt -.--', 0Dh, 16
     20484F3253
     20566F6C74
     202D2E2D2D
     0D10
****ERROR:Labelwasalreadydefined:`pid14'
1774 5265617220       2868     PID15:  DB      'Rear  HO2S Volt -.--', 0Dh, 16
     20484F3253
     20566F6C74
     202D2E2D2D
     0D10
****ERROR:Labelwasalreadydefined:`pid15'
                      2869
178A 5261696C20       2870     PID23:  DB      'Rail Press ---.- MPa', 0Dh, 11 ;((A*256)+B) /100
     5072657373
     202D2D2D2E
     2D204D5061
     0D0B
****ERROR:Labelwasalreadydefined:`pid23'
17A0 436F6D6D61       2871     PID2C:  DB      'Commanded EGR: --- %', 0Dh, 15
     6E64656420
     4547523A20
     2D2D2D2025
     0D0F
****ERROR:Labelwasalreadydefined:`pid2c'
17B6 4547524572       2872     PID2D:  DB      'EGRError: --- %    ', 0Dh, 11
     726F723A20
     2D2D2D2025
     202020200D
     0B
****ERROR:Labelwasalreadydefined:`pid2d'
17CB 434D444576       2873     PID2E:  DB      'CMDEvap Purge --- %', 0Dh, 15
     6170205075
     726765202D
     2D2D20250D
     0F
****ERROR:Labelwasalreadydefined:`pid2e'
17E0 4675656C20       2874     PID2F:  DB      'Fuel Level: --- %   ', 0Dh, 12
     4C6576656C
     3A202D2D2D
     2025202020
     0D0C
****ERROR:Labelwasalreadydefined:`pid2f'
                      2875
17F6 4261726F20       2876     PID33:  DB      'Baro Pressure ---kPa', 0Dh, 14
     5072657373
     757265202D
     2D2D6B5061
     0D0E
****ERROR:Labelwasalreadydefined:`pid33'
                      2877
180C 4341542031       2878     PID3C:  DB      'CAT 1 Temp: ---.- ', 0DFh, 'c', 0Dh, 12
     2054656D70
     3A202D2D2D
     2E2D20DF63
     0D0C
****ERROR:Labelwasalreadydefined:`pid3c'
1822 4341542032       2879     PID3D:  DB      'CAT 2 Temp: ---.- ', 0DFh, 'c', 0Dh, 12
     2054656D70
     3A202D2D2D
     2E2D20DF63
     0D0C
****ERROR:Labelwasalreadydefined:`pid3d'
                      2880
1838 50434D2056       2881     PID42:  DB      'PCM Voltage: --.-- V', 0Dh, 13
     6F6C746167
     653A202D2D
     2E2D2D2056
     0D0D
****ERROR:Labelwasalreadydefined:`pid42'
184E 4142532045       2882     PID43:  DB      'ABS Engine Load ---%', 0Dh, 16
     6E67696E65
     204C6F6164
     202D2D2D25
     0D10
****ERROR:Labelwasalreadydefined:`pid43'
1864 434D442045       2883     PID44:  DB      'CMD EQV Ratio: -.--   ', 0Dh, 15
     5156205261
     74696F3A20
     2D2E2D2D20
     20200D0F
****ERROR:Labelwasalreadydefined:`pid44'
187C 52454C2054       2884     PID45:  DB      'REL Throt Pos: --- %', 0Dh, 15
     68726F7420
     506F733A20
     2D2D2D2025
     0D0F
****ERROR:Labelwasalreadydefined:`pid45'
1892 414D422041       2885     PID46:  DB      'AMB Air Temp: --- ', 0DFh, 'c', 0Dh, 14
     6972205465
     6D703A202D
     2D2D20DF63
     0D0E
****ERROR:Labelwasalreadydefined:`pid46'
18A8 454E47204F       2886     PID5C:  DB      'ENG Oil Temp: --- ', 0DFh, 'c', 0Dh, 14
     696C205465
     6D703A202D
     2D2D20DF63
     0D0E
****ERROR:Labelwasalreadydefined:`pid5c'
                      2887
18BE 5472616E73       2888     TFT:    DB      'Trans Fluid ---.- ', 0DFh, 'c', 0Dh, 12
     20466C7569
     64202D2D2D
     2E2D20DF63
     0D0C
****ERROR:Labelwasalreadydefined:`tft'
                      2889
18D4 0D00             2890     NODATA: DB      '', 0Dh, 00
****ERROR:Labelwasalreadydefined:`nodata'
18EC 4375727265       2891     SPDMAF: DB      '--- km/h|AF --.- g/s', 0Dh, 00h
     6E7420462F
     43202D2D2E
     2D6B6D2F4C
     0D00
****ERROR:Labelwasalreadydefined:`instfc'
1902 4176657261       2892     INSTFC: DB      'Current F/C --.-km/L', 0Dh, 00h
     676520462F
     43202D2D2E
     2D6B6D2F4C
     0D00
****ERROR:Labelwasalreadydefined:`avrfc'
1918 454550524F       2893     AVRFC:  DB      'Average F/C --.-km/L', 0Dh, 00h
     4D20526561
     64696E6720
     4572726F72
     0D00
****ERROR:Labelwasalreadydefined:`rderr'
192E 454550524F       2894     RDERR:  DB      'EEPROM Reading Error', 0Dh, 00h
     4D20577269
     74696E6720
     4572726F72
     0D00
****ERROR:Labelwasalreadydefined:`wrerr'
1944 456E67696E       2895     WRERR:  DB      'EEPROM Writing Error', 0Dh, 00h
     6520697320
     7475726E65
     64206F6666
     0D00
****ERROR:Labelwasalreadydefined:`pdown1'
195A 5377697463       2896     PDOWN1: DB      'Engine is turned off', 0Dh, 00h
     6820746F20
     534C454550
     206D6F6465
     0D00
****ERROR:Labelwasalreadydefined:`pdown2'
                      2897     PDOWN2: DB      'Switch to SLEEP mode', 0Dh, 00h
                      2898
                      2899             END
ASSEMBLY COMPLETE, NO ERRORS FOUND, 307 WARNINGS


ERROR SUMMARY:
Line 1, ERROR:Labelwasalreadydefined:`spdmaf'
Line 15, ERROR:Tryingtooverwriteconstant:lcddata
Line 18, ERROR:Tryingtooverwriteconstant:mosi
Line 20, ERROR:Tryingtooverwriteconstant:miso
Line 22, ERROR:Tryingtooverwriteconstant:sck
Line 25, ERROR:Tryingtooverwriteconstant:rw
Line 27, ERROR:Tryingtooverwriteconstant:rs
Line 29, ERROR:Tryingtooverwriteconstant:en
Line 31, ERROR:Tryingtooverwriteconstant:bl
Line 33, ERROR:Tryingtooverwriteconstant:buzzer
Line 35, ERROR:Tryingtooverwriteconstant:eepsda
Line 37, ERROR:Tryingtooverwriteconstant:eepscl
Line 39, ERROR:Tryingtooverwriteconstant:eepwp
Line 43, ERROR:Tryingtooverwriteconstant:btnmenu
Line 45, ERROR:Tryingtooverwriteconstant:btnbl
Line 47, ERROR:Tryingtooverwriteconstant:btnup
Line 49, ERROR:Tryingtooverwriteconstant:btndn
Line 51, ERROR:Tryingtooverwriteconstant:ledup
Line 53, ERROR:Tryingtooverwriteconstant:leddn
Line 57, ERROR:Tryingtooverwriteconstant:pid1
Line 59, ERROR:Tryingtooverwriteconstant:pid2
Line 61, ERROR:Tryingtooverwriteconstant:pidturn
Line 63, ERROR:Tryingtooverwriteconstant:wraddl1
Line 65, ERROR:Tryingtooverwriteconstant:wraddl2
Line 67, ERROR:Tryingtooverwriteconstant:b1
Line 69, ERROR:Tryingtooverwriteconstant:b2
Line 71, ERROR:Tryingtooverwriteconstant:resultlen
Line 73, ERROR:Tryingtooverwriteconstant:config
Line 77, ERROR:Tryingtooverwriteconstant:temp1
Line 79, ERROR:Tryingtooverwriteconstant:temp2
Line 81, ERROR:Tryingtooverwriteconstant:temp3
Line 83, ERROR:Tryingtooverwriteconstant:eeperr
Line 85, ERROR:Tryingtooverwriteconstant:fcptr
Line 87, ERROR:Tryingtooverwriteconstant:limitchk1
Line 89, ERROR:Tryingtooverwriteconstant:limitchk2
Line 91, ERROR:Tryingtooverwriteconstant:sleepcnt
Line 93, ERROR:Tryingtooverwriteconstant:autoblstat
Line 95, ERROR:Tryingtooverwriteconstant:buffer
Line 99, ERROR:Tryingtooverwriteconstant:wdtrst
Line 102, ERROR:Tryingtooverwriteconstant:econfig
Line 104, ERROR:Tryingtooverwriteconstant:epid1
Line 106, ERROR:Tryingtooverwriteconstant:epid2
Line 143, ERROR:Tryingtooverwriteconstant:lcd_cls
Line 145, ERROR:Tryingtooverwriteconstant:lcd_home
Line 147, ERROR:Tryingtooverwriteconstant:lcd_setmode
Line 151, ERROR:Tryingtooverwriteconstant:lcd_setvisible
Line 156, ERROR:Tryingtooverwriteconstant:lcd_shift
Line 161, ERROR:Tryingtooverwriteconstant:lcd_setfunc
Line 166, ERROR:Tryingtooverwriteconstant:lcd_setcgaddr
Line 168, ERROR:Tryingtooverwriteconstant:lcd_setddaddr
Line 174, ERROR:Labelwasalreadydefined:`res'
Line 177, ERROR:Labelwasalreadydefined:`res1'
Line 198, ERROR:Invalidsetofoperands:clrP2
Line 200, ERROR:Invalidsetofoperands:setbP3
Line 283, ERROR:Labelwasalreadydefined:`limitread'
Line 287, ERROR:Labelwasalreadydefined:`read8bit'
Line 308, ERROR:Labelwasalreadydefined:`upgrade'
Line 337, ERROR:Labelwasalreadydefined:`checking'
Line 377, ERROR:Labelwasalreadydefined:`trycan'
Line 389, ERROR:Labelwasalreadydefined:`trycan1'
Line 395, ERROR:Labelwasalreadydefined:`trycan2'
Line 402, ERROR:Labelwasalreadydefined:`trycan3'
Line 415, ERROR:Labelwasalreadydefined:`connect'
Line 422, ERROR:Labelwasalreadydefined:`loadeep'
Line 426, ERROR:Expectedbitaddress:ACC.0
Line 451, ERROR:Labelwasalreadydefined:`readerr'
Line 468, ERROR:Labelwasalreadydefined:`meter'
Line 477, ERROR:Labelwasalreadydefined:`main'
Line 494, ERROR:Labelwasalreadydefined:`main3'
Line 516, ERROR:Labelwasalreadydefined:`main2'
Line 537, ERROR:Labelwasalreadydefined:`setup0'
Line 541, ERROR:Labelwasalreadydefined:`receive'
Line 558, ERROR:Labelwasalreadydefined:`length1'
Line 571, ERROR:Labelwasalreadydefined:`mode011'
Line 593, ERROR:Labelwasalreadydefined:`pidturn2'
Line 605, ERROR:Labelwasalreadydefined:`length2'
Line 618, ERROR:Labelwasalreadydefined:`mode012'
Line 639, ERROR:Labelwasalreadydefined:`consump0'
Line 643, ERROR:Labelwasalreadydefined:`setup'
Line 649, ERROR:Labelwasalreadydefined:`del5m1'
Line 652, ERROR:Labelwasalreadydefined:`del5m3'
Line 655, ERROR:Labelwasalreadydefined:`del5m2'
Line 674, ERROR:Labelwasalreadydefined:`select'
Line 680, ERROR:Labelwasalreadydefined:`goset'
Line 697, ERROR:Labelwasalreadydefined:`blstatus'
Line 711, ERROR:Labelwasalreadydefined:`bloff'
Line 720, ERROR:Labelwasalreadydefined:`setbl'
Line 735, ERROR:Labelwasalreadydefined:`setsound'
Line 749, ERROR:Labelwasalreadydefined:`beepstatus'
Line 762, ERROR:Labelwasalreadydefined:`beepoff'
Line 770, ERROR:Labelwasalreadydefined:`setbeep'
Line 784, ERROR:Labelwasalreadydefined:`setuppid'
Line 794, ERROR:Labelwasalreadydefined:`setpid1'
Line 808, ERROR:Labelwasalreadydefined:`pid1ok'
Line 822, ERROR:Labelwasalreadydefined:`setpid2'
Line 836, ERROR:Labelwasalreadydefined:`pid2ok'
Line 854, ERROR:Labelwasalreadydefined:`pidstatus'
Line 867, ERROR:Labelwasalreadydefined:`pidoff'
Line 875, ERROR:Labelwasalreadydefined:`setpid'
Line 889, ERROR:Labelwasalreadydefined:`autosleep'
Line 903, ERROR:Labelwasalreadydefined:`sleepstatus'
Line 916, ERROR:Labelwasalreadydefined:`sleepoff'
Line 924, ERROR:Labelwasalreadydefined:`setsleep'
Line 938, ERROR:Labelwasalreadydefined:`version'
Line 964, ERROR:Labelwasalreadydefined:`writeerr'
Line 981, ERROR:Labelwasalreadydefined:`splfunc'
Line 1015, ERROR:Labelwasalreadydefined:`showdtc'
Line 1047, ERROR:Labelwasalreadydefined:`milison'
Line 1070, ERROR:Labelwasalreadydefined:`check4'
Line 1081, ERROR:Labelwasalreadydefined:`dtc1read'
Line 1086, ERROR:Labelwasalreadydefined:`dtcintp'
Line 1110, ERROR:Labelwasalreadydefined:`skipnull2'
Line 1115, ERROR:Labelwasalreadydefined:`skipnull1'
Line 1160, ERROR:Labelwasalreadydefined:`clearmil'
Line 1167, ERROR:Labelwasalreadydefined:`milstatus'
Line 1180, ERROR:Labelwasalreadydefined:`notclr'
Line 1188, ERROR:Labelwasalreadydefined:`setmiloff'
Line 1200, ERROR:Labelwasalreadydefined:`splexit'
Line 1211, ERROR:Labelwasalreadydefined:`consump'
Line 1228, ERROR:Labelwasalreadydefined:`avrmode'
Line 1234, ERROR:Labelwasalreadydefined:`consump2'
Line 1246, ERROR:Labelwasalreadydefined:`vehspd'
Line 1264, ERROR:Labelwasalreadydefined:`maf'
Line 1322, ERROR:Labelwasalreadydefined:`average'
Line 1345, ERROR:Labelwasalreadydefined:`instmode'
Line 1355, ERROR:Labelwasalreadydefined:`fczero'
Line 1358, ERROR:Labelwasalreadydefined:`fcnonzero'
Line 1373, ERROR:Labelwasalreadydefined:`fckey'
Line 1383, ERROR:Labelwasalreadydefined:`fcmode'
Line 1391, ERROR:Labelwasalreadydefined:`fcexit'
Line 1401, ERROR:Labelwasalreadydefined:`consump3'
Line 1406, ERROR:Labelwasalreadydefined:`skippid'
Line 1436, ERROR:Labelwasalreadydefined:`calculate'
Line 1529, ERROR:Labelwasalreadydefined:`formula1'
Line 1565, ERROR:Labelwasalreadydefined:`formula2'
Line 1592, ERROR:Labelwasalreadydefined:`formula3'
Line 1621, ERROR:Labelwasalreadydefined:`fueltrim'
Line 1642, ERROR:Labelwasalreadydefined:`posft'
Line 1659, ERROR:Labelwasalreadydefined:`engspeed'
Line 1698, ERROR:Labelwasalreadydefined:`igntime'
Line 1715, ERROR:Labelwasalreadydefined:`pos'
Line 1733, ERROR:Labelwasalreadydefined:`airflow'
Line 1768, ERROR:Labelwasalreadydefined:`cattemp'
Line 1814, ERROR:Labelwasalreadydefined:`ecuvolt'
Line 1842, ERROR:Labelwasalreadydefined:`cmdeqv'
Line 1870, ERROR:Labelwasalreadydefined:`ho2svolt'
Line 1901, ERROR:Labelwasalreadydefined:`caltft'
Line 1961, ERROR:Labelwasalreadydefined:`line1'
Line 2055, ERROR:Labelwasalreadydefined:`line12'
Line 2062, ERROR:Labelwasalreadydefined:`line2'
Line 2156, ERROR:Labelwasalreadydefined:`line22'
Line 2164, ERROR:Labelwasalreadydefined:`wrstr'
Line 2167, ERROR:Labelwasalreadydefined:`wrstr1'
Line 2177, ERROR:Labelwasalreadydefined:`wrstr2'
Line 2186, ERROR:Labelwasalreadydefined:`wrstr3'
Line 2205, ERROR:Labelwasalreadydefined:`wrscr'
Line 2208, ERROR:Labelwasalreadydefined:`wrscr1'
Line 2218, ERROR:Labelwasalreadydefined:`wrscr2'
Line 2223, ERROR:Labelwasalreadydefined:`wrscr3'
Line 2241, ERROR:Labelwasalreadydefined:`wrcmd'
Line 2253, ERROR:Labelwasalreadydefined:`wrchar'
Line 2269, ERROR:Labelwasalreadydefined:`getb1b2'
Line 2298, ERROR:Labelwasalreadydefined:`mode22'
Line 2326, ERROR:Labelwasalreadydefined:`pwrdown'
Line 2358, ERROR:Labelwasalreadydefined:`no_data'
Line 2364, ERROR:Labelwasalreadydefined:`turnonchk'
Line 2374, ERROR:Labelwasalreadydefined:`del5sec'
Line 2382, ERROR:Labelwasalreadydefined:`send221e1c'
Line 2390, ERROR:Labelwasalreadydefined:`atoh'
Line 2398, ERROR:Labelwasalreadydefined:`atof2'
Line 2406, ERROR:Labelwasalreadydefined:`htoa'
Line 2415, ERROR:Labelwasalreadydefined:`atof'
Line 2425, ERROR:Labelwasalreadydefined:`sblock'
Line 2431, ERROR:Labelwasalreadydefined:`sblock1'
Line 2440, ERROR:Labelwasalreadydefined:`rblock'
Line 2443, ERROR:Labelwasalreadydefined:`rblock1'
Line 2448, ERROR:Labelwasalreadydefined:`rblock2'
Line 2454, ERROR:Labelwasalreadydefined:`sbyte'
Line 2461, ERROR:Labelwasalreadydefined:`rbyte'
Line 2469, ERROR:Labelwasalreadydefined:`del5m'
Line 2476, ERROR:Labelwasalreadydefined:`del500m'
Line 2479, ERROR:Labelwasalreadydefined:`del500m1'
Line 2482, ERROR:Labelwasalreadydefined:`del500m3'
Line 2485, ERROR:Labelwasalreadydefined:`del500m2'
Line 2495, ERROR:Labelwasalreadydefined:`del100m'
Line 2498, ERROR:Labelwasalreadydefined:`del100m1'
Line 2501, ERROR:Labelwasalreadydefined:`del100m3'
Line 2504, ERROR:Labelwasalreadydefined:`del100m2'
Line 2516, ERROR:Labelwasalreadydefined:`htod'
Line 2523, ERROR:Labelwasalreadydefined:`htod1'
Line 2533, ERROR:Labelwasalreadydefined:`htod2'
Line 2544, ERROR:Labelwasalreadydefined:`sound_beep'
Line 2548, ERROR:Labelwasalreadydefined:`dels1'
Line 2551, ERROR:Labelwasalreadydefined:`sound_beep1'
Line 2560, ERROR:Labelwasalreadydefined:`sound_trig'
Line 2566, ERROR:Labelwasalreadydefined:`sound_trig0'
Line 2570, ERROR:Labelwasalreadydefined:`sound_trig1'
Line 2578, ERROR:Labelwasalreadydefined:`backlight'
Line 2584, ERROR:Labelwasalreadydefined:`backlight2'
Line 2590, ERROR:Labelwasalreadydefined:`light1'
Line 2614, ERROR:Labelwasalreadydefined:`light11'
Line 2618, ERROR:Labelwasalreadydefined:`lowlimit1'
Line 2626, ERROR:Labelwasalreadydefined:`light2'
Line 2650, ERROR:Labelwasalreadydefined:`light22'
Line 2654, ERROR:Labelwasalreadydefined:`lowlimit2'
Line 2674, ERROR:Labelwasalreadydefined:`udiv16'
Line 2679, ERROR:Labelwasalreadydefined:`div_loop'
Line 2705, ERROR:Labelwasalreadydefined:`div_1'
Line 2734, ERROR:Labelwasalreadydefined:`umul16'
Line 2787, ERROR:Labelwasalreadydefined:`add16'
Line 2806, ERROR:Labelwasalreadydefined:`ipw'
Line 2824, ERROR:Labelwasalreadydefined:`ipw9'
Line 2837, ERROR:Labelwasalreadydefined:`ipwrb'
Line 2841, ERROR:Labelwasalreadydefined:`ipwrb1'
Line 2852, ERROR:Labelwasalreadydefined:`ipwrb2'
Line 2862, ERROR:Labelwasalreadydefined:`ipr'
Line 2891, ERROR:Labelwasalreadydefined:`ipr9'
Line 2903, ERROR:Labelwasalreadydefined:`iprdb'
Line 2907, ERROR:Labelwasalreadydefined:`iprdb1'
Line 2918, ERROR:Labelwasalreadydefined:`iprdb2'
Line 2923, ERROR:Labelwasalreadydefined:`chigh'
Line 2933, ERROR:Labelwasalreadydefined:`clow'
Line 2943, ERROR:Labelwasalreadydefined:`cdel'
Line 2952, ERROR:Labelwasalreadydefined:`wdreset'
Line 2960, ERROR:Labelwasalreadydefined:`intpdtc'
Line 3027, ERROR:Labelwasalreadydefined:`chkcan'
Line 3029, ERROR:Labelwasalreadydefined:`serinit1'
Line 3031, ERROR:Labelwasalreadydefined:`serinit2'
Line 3033, ERROR:Labelwasalreadydefined:`serinit3'
Line 3035, ERROR:Labelwasalreadydefined:`serinit4'
Line 3037, ERROR:Labelwasalreadydefined:`serinit5'
Line 3039, ERROR:Labelwasalreadydefined:`serws'
Line 3041, ERROR:Labelwasalreadydefined:`title1'
Line 3043, ERROR:Labelwasalreadydefined:`title2'
Line 3045, ERROR:Labelwasalreadydefined:`title3'
Line 3048, ERROR:Labelwasalreadydefined:`menu1'
Line 3050, ERROR:Labelwasalreadydefined:`menu11'
Line 3052, ERROR:Labelwasalreadydefined:`menu12'
Line 3054, ERROR:Labelwasalreadydefined:`menu13'
Line 3056, ERROR:Labelwasalreadydefined:`menu14'
Line 3058, ERROR:Labelwasalreadydefined:`menu15'
Line 3060, ERROR:Labelwasalreadydefined:`menu16'
Line 3062, ERROR:Labelwasalreadydefined:`menu17'
Line 3064, ERROR:Labelwasalreadydefined:`release'
Line 3067, ERROR:Labelwasalreadydefined:`menu2'
Line 3069, ERROR:Labelwasalreadydefined:`vehinfo'
Line 3071, ERROR:Labelwasalreadydefined:`dtc'
Line 3073, ERROR:Labelwasalreadydefined:`miloff'
Line 3075, ERROR:Labelwasalreadydefined:`milon'
Line 3077, ERROR:Labelwasalreadydefined:`setmil'
Line 3079, ERROR:Labelwasalreadydefined:`dtcpid'
Line 3081, ERROR:Labelwasalreadydefined:`dtcread'
Line 3083, ERROR:Labelwasalreadydefined:`dispdtc'
Line 3085, ERROR:Labelwasalreadydefined:`clrmil'
Line 3087, ERROR:Labelwasalreadydefined:`toggle'
Line 3090, ERROR:Labelwasalreadydefined:`limitmsg'
Line 3092, ERROR:Labelwasalreadydefined:`limitfin'
Line 3094, ERROR:Labelwasalreadydefined:`ugfirm1'
Line 3096, ERROR:Labelwasalreadydefined:`ugfirm2'
Line 3098, ERROR:Labelwasalreadydefined:`ugfirm3'
Line 3101, ERROR:Labelwasalreadydefined:`spdpid'
Line 3103, ERROR:Labelwasalreadydefined:`mafpid'
Line 3105, ERROR:Labelwasalreadydefined:`tftpid'
Line 3108, ERROR:Labelwasalreadydefined:`cgdegc'
Line 3110, ERROR:Labelwasalreadydefined:`cgdegf'
Line 3112, ERROR:Labelwasalreadydefined:`cgul'
Line 3114, ERROR:Labelwasalreadydefined:`cgum'
Line 3116, ERROR:Labelwasalreadydefined:`cgur'
Line 3118, ERROR:Labelwasalreadydefined:`cgll'
Line 3120, ERROR:Labelwasalreadydefined:`cglm'
Line 3122, ERROR:Labelwasalreadydefined:`cglr'
Line 3125, ERROR:Labelwasalreadydefined:`pid04'
Line 3127, ERROR:Labelwasalreadydefined:`pid05'
Line 3129, ERROR:Labelwasalreadydefined:`pid06'
Line 3131, ERROR:Labelwasalreadydefined:`pid07'
Line 3134, ERROR:Labelwasalreadydefined:`pid0a'
Line 3136, ERROR:Labelwasalreadydefined:`pid0b'
Line 3138, ERROR:Labelwasalreadydefined:`pid0c'
Line 3140, ERROR:Labelwasalreadydefined:`pid0d'
Line 3142, ERROR:Labelwasalreadydefined:`pid0e'
Line 3144, ERROR:Labelwasalreadydefined:`pid0f'
Line 3146, ERROR:Labelwasalreadydefined:`pid10'
Line 3148, ERROR:Labelwasalreadydefined:`pid11'
Line 3150, ERROR:Labelwasalreadydefined:`pid14'
Line 3152, ERROR:Labelwasalreadydefined:`pid15'
Line 3155, ERROR:Labelwasalreadydefined:`pid23'
Line 3157, ERROR:Labelwasalreadydefined:`pid2c'
Line 3159, ERROR:Labelwasalreadydefined:`pid2d'
Line 3161, ERROR:Labelwasalreadydefined:`pid2e'
Line 3163, ERROR:Labelwasalreadydefined:`pid2f'
Line 3166, ERROR:Labelwasalreadydefined:`pid33'
Line 3169, ERROR:Labelwasalreadydefined:`pid3c'
Line 3171, ERROR:Labelwasalreadydefined:`pid3d'
Line 3174, ERROR:Labelwasalreadydefined:`pid42'
Line 3176, ERROR:Labelwasalreadydefined:`pid43'
Line 3178, ERROR:Labelwasalreadydefined:`pid44'
Line 3180, ERROR:Labelwasalreadydefined:`pid45'
Line 3182, ERROR:Labelwasalreadydefined:`pid46'
Line 3184, ERROR:Labelwasalreadydefined:`pid5c'
Line 3187, ERROR:Labelwasalreadydefined:`tft'
Line 3190, ERROR:Labelwasalreadydefined:`nodata'
Line 3192, ERROR:Labelwasalreadydefined:`instfc'
Line 3194, ERROR:Labelwasalreadydefined:`avrfc'
Line 3196, ERROR:Labelwasalreadydefined:`rderr'
Line 3198, ERROR:Labelwasalreadydefined:`wrerr'
Line 3200, ERROR:Labelwasalreadydefined:`pdown1'
Line 3202, ERROR:Labelwasalreadydefined:`pdown2'

SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADD16. . . . . . . . . . . . . . . .  C  ADDR  125AH
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
AIRFLOW. . . . . . . . . . . . . . .  C  ADDR  0BA8H
ATOF . . . . . . . . . . . . . . . .  C  ADDR  10C2H
ATOF2. . . . . . . . . . . . . . . .  C  ADDR  10B2H
ATOH . . . . . . . . . . . . . . . .  C  ADDR  10A7H
AUTOBLSTAT . . . . . . . . . . . . .  N  NUMB  0019H
AUTOSLEEP. . . . . . . . . . . . . .  C  ADDR  0576H
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
AVERAGE. . . . . . . . . . . . . . .  C  ADDR  08BBH
AVRFC. . . . . . . . . . . . . . . .  C  ADDR  14ECH
AVRMODE. . . . . . . . . . . . . . .  C  ADDR  081EH
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H  NOT USED
B1 . . . . . . . . . . . . . . . . .  N  NUMB  000DH
B2 . . . . . . . . . . . . . . . . .  N  NUMB  000EH
BACKLIGHT. . . . . . . . . . . . . .  C  ADDR  115EH
BACKLIGHT2 . . . . . . . . . . . . .  C  ADDR  1167H
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BEEPOFF. . . . . . . . . . . . . . .  C  ADDR  046DH
BEEPSTATUS . . . . . . . . . . . . .  C  ADDR  0451H
BL . . . . . . . . . . . . . . . . .  B  ADDR  00A3H
BLOFF. . . . . . . . . . . . . . . .  C  ADDR  0403H
BLSTATUS . . . . . . . . . . . . . .  C  ADDR  03E5H
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
BTNBL. . . . . . . . . . . . . . . .  B  ADDR  00B3H
BTNDN. . . . . . . . . . . . . . . .  B  ADDR  00B5H
BTNMENU. . . . . . . . . . . . . . .  B  ADDR  00B2H
BTNUP. . . . . . . . . . . . . . . .  B  ADDR  00B4H
BUFFER . . . . . . . . . . . . . . .  N  NUMB  0020H
BUZZER . . . . . . . . . . . . . . .  B  ADDR  00A4H
CALCULATE. . . . . . . . . . . . . .  C  ADDR  097EH
CALTFT . . . . . . . . . . . . . . .  C  ADDR  0CD1H
CATTEMP. . . . . . . . . . . . . . .  C  ADDR  0BE9H
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CDEL . . . . . . . . . . . . . . . .  C  ADDR  1328H
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CGDEGC . . . . . . . . . . . . . . .  C  ADDR  142DH
CGDEGF . . . . . . . . . . . . . . .  C  ADDR  1437H
CGLL . . . . . . . . . . . . . . . .  C  ADDR  145FH
CGLM . . . . . . . . . . . . . . . .  C  ADDR  1469H
CGLR . . . . . . . . . . . . . . . .  C  ADDR  1473H
CGUL . . . . . . . . . . . . . . . .  C  ADDR  1441H
CGUM . . . . . . . . . . . . . . . .  C  ADDR  144BH
CGUR . . . . . . . . . . . . . . . .  C  ADDR  1455H
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECK4 . . . . . . . . . . . . . . .  C  ADDR  06FEH
CHECKING . . . . . . . . . . . . . .  C  ADDR  0150H
CHIGH. . . . . . . . . . . . . . . .  C  ADDR  1318H
CHKCAN . . . . . . . . . . . . . . .  C  ADDR  13B5H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLEARMIL . . . . . . . . . . . . . .  C  ADDR  0795H
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CLOW . . . . . . . . . . . . . . . .  C  ADDR  1320H
CLRMIL . . . . . . . . . . . . . . .  C  ADDR  140FH
CMDEQV . . . . . . . . . . . . . . .  C  ADDR  0C6BH
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CONFIG . . . . . . . . . . . . . . .  N  NUMB  0010H
CONNECT. . . . . . . . . . . . . . .  C  ADDR  01FBH
CONSUMP. . . . . . . . . . . . . . .  C  ADDR  07F8H
CONSUMP0 . . . . . . . . . . . . . .  C  ADDR  0384H
CONSUMP2 . . . . . . . . . . . . . .  C  ADDR  0824H
CONSUMP3 . . . . . . . . . . . . . .  C  ADDR  094BH
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DEL100M. . . . . . . . . . . . . . .  C  ADDR  1106H
DEL100M1 . . . . . . . . . . . . . .  C  ADDR  1108H
DEL100M2 . . . . . . . . . . . . . .  C  ADDR  110CH
DEL100M3 . . . . . . . . . . . . . .  C  ADDR  110AH
DEL500M. . . . . . . . . . . . . . .  C  ADDR  10F5H
DEL500M1 . . . . . . . . . . . . . .  C  ADDR  10F7H
DEL500M2 . . . . . . . . . . . . . .  C  ADDR  10FBH
DEL500M3 . . . . . . . . . . . . . .  C  ADDR  10F9H
DEL5M. . . . . . . . . . . . . . . .  C  ADDR  10F0H
DEL5M1 . . . . . . . . . . . . . . .  C  ADDR  038FH
DEL5M2 . . . . . . . . . . . . . . .  C  ADDR  0393H
DEL5M3 . . . . . . . . . . . . . . .  C  ADDR  0391H
DEL5SEC. . . . . . . . . . . . . . .  C  ADDR  1097H
DELS1. . . . . . . . . . . . . . . .  C  ADDR  113BH
DISPDTC. . . . . . . . . . . . . . .  C  ADDR  140CH
DIV_1. . . . . . . . . . . . . . . .  C  ADDR  1209H
DIV_LOOP . . . . . . . . . . . . . .  C  ADDR  11ECH
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DTC. . . . . . . . . . . . . . . . .  C  ADDR  13FAH
DTC1READ . . . . . . . . . . . . . .  C  ADDR  070DH
DTCINTP. . . . . . . . . . . . . . .  C  ADDR  0712H
DTCPID . . . . . . . . . . . . . . .  C  ADDR  1406H
DTCREAD. . . . . . . . . . . . . . .  C  ADDR  1409H
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
ECONFIG. . . . . . . . . . . . . . .  N  NUMB  0000H
ECUVOLT. . . . . . . . . . . . . . .  C  ADDR  0C37H
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
EEPERR . . . . . . . . . . . . . . .  N  NUMB  0014H
EEPSCL . . . . . . . . . . . . . . .  B  ADDR  00A6H
EEPSDA . . . . . . . . . . . . . . .  B  ADDR  00A5H
EEPWP. . . . . . . . . . . . . . . .  B  ADDR  00A7H
EN . . . . . . . . . . . . . . . . .  B  ADDR  00A2H
ENGSPEED . . . . . . . . . . . . . .  C  ADDR  0B30H
EPID1. . . . . . . . . . . . . . . .  N  NUMB  0001H
EPID2. . . . . . . . . . . . . . . .  N  NUMB  0002H
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FCEXIT . . . . . . . . . . . . . . .  C  ADDR  0935H
FCKEY. . . . . . . . . . . . . . . .  C  ADDR  0911H
FCMODE . . . . . . . . . . . . . . .  C  ADDR  0926H
FCNONZERO. . . . . . . . . . . . . .  C  ADDR  08F8H
FCPTR. . . . . . . . . . . . . . . .  N  NUMB  0015H
FCZERO . . . . . . . . . . . . . . .  C  ADDR  08F6H
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
FORMULA1 . . . . . . . . . . . . . .  C  ADDR  0A49H
FORMULA2 . . . . . . . . . . . . . .  C  ADDR  0A8BH
FORMULA3 . . . . . . . . . . . . . .  C  ADDR  0ABAH
FUELTRIM . . . . . . . . . . . . . .  C  ADDR  0AF2H
GETB1B2. . . . . . . . . . . . . . .  C  ADDR  0FD8H
GOSET. . . . . . . . . . . . . . . .  C  ADDR  03C1H
HO2SVOLT . . . . . . . . . . . . . .  C  ADDR  0C9DH
HTOA . . . . . . . . . . . . . . . .  C  ADDR  10B6H
HTOD . . . . . . . . . . . . . . . .  C  ADDR  1117H
HTOD1. . . . . . . . . . . . . . . .  C  ADDR  111EH
HTOD2. . . . . . . . . . . . . . . .  C  ADDR  112CH
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
IGNTIME. . . . . . . . . . . . . . .  C  ADDR  0B72H
INSTFC . . . . . . . . . . . . . . .  C  ADDR  14E9H
INSTMODE . . . . . . . . . . . . . .  C  ADDR  08E4H
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
INTPDTC. . . . . . . . . . . . . . .  C  ADDR  1335H
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IPR. . . . . . . . . . . . . . . . .  C  ADDR  12B2H
IPR9 . . . . . . . . . . . . . . . .  C  ADDR  12F1H
IPRDB. . . . . . . . . . . . . . . .  C  ADDR  12FBH
IPRDB1 . . . . . . . . . . . . . . .  C  ADDR  12FFH
IPRDB2 . . . . . . . . . . . . . . .  C  ADDR  1314H
IPW. . . . . . . . . . . . . . . . .  C  ADDR  1266H
IPW9 . . . . . . . . . . . . . . . .  C  ADDR  128BH
IPWRB. . . . . . . . . . . . . . . .  C  ADDR  1295H
IPWRB1 . . . . . . . . . . . . . . .  C  ADDR  1299H
IPWRB2 . . . . . . . . . . . . . . .  C  ADDR  12AEH
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
LCDDATA. . . . . . . . . . . . . . .  N  NUMB  0080H
LCD_CLS. . . . . . . . . . . . . . .  N  NUMB  0001H
LCD_HOME . . . . . . . . . . . . . .  N  NUMB  0002H  NOT USED
LCD_SETCGADDR. . . . . . . . . . . .  N  NUMB  0040H
LCD_SETDDADDR. . . . . . . . . . . .  N  NUMB  0080H
LCD_SETFUNC. . . . . . . . . . . . .  N  NUMB  0020H
LCD_SETMODE. . . . . . . . . . . . .  N  NUMB  0004H
LCD_SETVISIBLE . . . . . . . . . . .  N  NUMB  0008H
LCD_SHIFT. . . . . . . . . . . . . .  N  NUMB  0010H
LEDDN. . . . . . . . . . . . . . . .  B  ADDR  00B7H
LEDUP. . . . . . . . . . . . . . . .  B  ADDR  00B6H
LENGTH1. . . . . . . . . . . . . . .  C  ADDR  02F6H
LENGTH2. . . . . . . . . . . . . . .  C  ADDR  0348H
LIGHT1 . . . . . . . . . . . . . . .  C  ADDR  116DH
LIGHT11. . . . . . . . . . . . . . .  C  ADDR  119EH
LIGHT2 . . . . . . . . . . . . . . .  C  ADDR  11A9H
LIGHT22. . . . . . . . . . . . . . .  C  ADDR  11DAH
LIMITCHK1. . . . . . . . . . . . . .  N  NUMB  0016H
LIMITCHK2. . . . . . . . . . . . . .  N  NUMB  0017H
LIMITFIN . . . . . . . . . . . . . .  C  ADDR  1418H
LIMITMSG . . . . . . . . . . . . . .  C  ADDR  1415H
LIMITREAD. . . . . . . . . . . . . .  C  ADDR  00E1H
LINE1. . . . . . . . . . . . . . . .  C  ADDR  0D34H
LINE12 . . . . . . . . . . . . . . .  C  ADDR  0E43H
LINE2. . . . . . . . . . . . . . . .  C  ADDR  0E49H
LINE22 . . . . . . . . . . . . . . .  C  ADDR  0F58H
LOADEEP. . . . . . . . . . . . . . .  C  ADDR  0206H  NOT USED
LOWLIMIT1. . . . . . . . . . . . . .  C  ADDR  11A1H
LOWLIMIT2. . . . . . . . . . . . . .  C  ADDR  11DDH
MAF. . . . . . . . . . . . . . . . .  C  ADDR  0864H
MAFPID . . . . . . . . . . . . . . .  C  ADDR  1427H
MAIN . . . . . . . . . . . . . . . .  C  ADDR  0265H
MAIN2. . . . . . . . . . . . . . . .  C  ADDR  02ADH
MAIN3. . . . . . . . . . . . . . . .  C  ADDR  0284H
MENU1. . . . . . . . . . . . . . . .  C  ADDR  13D8H
MENU11 . . . . . . . . . . . . . . .  C  ADDR  13DBH
MENU12 . . . . . . . . . . . . . . .  C  ADDR  13DEH
MENU13 . . . . . . . . . . . . . . .  C  ADDR  13E1H
MENU14 . . . . . . . . . . . . . . .  C  ADDR  13E4H
MENU15 . . . . . . . . . . . . . . .  C  ADDR  13E7H
MENU16 . . . . . . . . . . . . . . .  C  ADDR  13EAH
MENU17 . . . . . . . . . . . . . . .  C  ADDR  13EDH
MENU2. . . . . . . . . . . . . . . .  C  ADDR  13F4H
METER. . . . . . . . . . . . . . . .  C  ADDR  025AH
MILISON. . . . . . . . . . . . . . .  C  ADDR  06CDH
MILOFF . . . . . . . . . . . . . . .  C  ADDR  13FDH
MILON. . . . . . . . . . . . . . . .  C  ADDR  1400H
MILSTATUS. . . . . . . . . . . . . .  C  ADDR  07A3H
MISO . . . . . . . . . . . . . . . .  B  ADDR  0096H
MODE011. . . . . . . . . . . . . . .  C  ADDR  030AH
MODE012. . . . . . . . . . . . . . .  C  ADDR  035CH
MODE22 . . . . . . . . . . . . . . .  C  ADDR  1003H
MOSI . . . . . . . . . . . . . . . .  B  ADDR  0095H
NODATA . . . . . . . . . . . . . . .  C  ADDR  14E3H
NOTCLR . . . . . . . . . . . . . . .  C  ADDR  07BFH
NO_DATA. . . . . . . . . . . . . . .  C  ADDR  1078H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H  NOT USED
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H  NOT USED
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H  NOT USED
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H  NOT USED
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PDOWN1 . . . . . . . . . . . . . . .  C  ADDR  14F5H
PDOWN2 . . . . . . . . . . . . . . .  C  ADDR  14F8H
PID04. . . . . . . . . . . . . . . .  C  ADDR  147DH
PID05. . . . . . . . . . . . . . . .  C  ADDR  1480H
PID06. . . . . . . . . . . . . . . .  C  ADDR  1485H
PID07. . . . . . . . . . . . . . . .  C  ADDR  1488H
PID0A. . . . . . . . . . . . . . . .  C  ADDR  148BH
PID0B. . . . . . . . . . . . . . . .  C  ADDR  148EH
PID0C. . . . . . . . . . . . . . . .  C  ADDR  1491H
PID0D. . . . . . . . . . . . . . . .  C  ADDR  1494H
PID0E. . . . . . . . . . . . . . . .  C  ADDR  1497H
PID0F. . . . . . . . . . . . . . . .  C  ADDR  149BH
PID1 . . . . . . . . . . . . . . . .  N  NUMB  0008H
PID10. . . . . . . . . . . . . . . .  C  ADDR  14A0H
PID11. . . . . . . . . . . . . . . .  C  ADDR  14A3H
PID14. . . . . . . . . . . . . . . .  C  ADDR  14A6H
PID15. . . . . . . . . . . . . . . .  C  ADDR  14A9H
PID1OK . . . . . . . . . . . . . . .  C  ADDR  04CCH
PID2 . . . . . . . . . . . . . . . .  N  NUMB  0009H
PID23. . . . . . . . . . . . . . . .  C  ADDR  14ACH
PID2C. . . . . . . . . . . . . . . .  C  ADDR  14AFH
PID2D. . . . . . . . . . . . . . . .  C  ADDR  14B2H
PID2E. . . . . . . . . . . . . . . .  C  ADDR  14B5H
PID2F. . . . . . . . . . . . . . . .  C  ADDR  14B8H
PID2OK . . . . . . . . . . . . . . .  C  ADDR  0509H
PID33. . . . . . . . . . . . . . . .  C  ADDR  14BBH
PID3C. . . . . . . . . . . . . . . .  C  ADDR  14BEH
PID3D. . . . . . . . . . . . . . . .  C  ADDR  14C3H
PID42. . . . . . . . . . . . . . . .  C  ADDR  14C8H
PID43. . . . . . . . . . . . . . . .  C  ADDR  14CBH
PID44. . . . . . . . . . . . . . . .  C  ADDR  14CEH
PID45. . . . . . . . . . . . . . . .  C  ADDR  14D1H
PID46. . . . . . . . . . . . . . . .  C  ADDR  14D4H
PID5C. . . . . . . . . . . . . . . .  C  ADDR  14D9H
PIDOFF . . . . . . . . . . . . . . .  C  ADDR  054DH
PIDSTATUS. . . . . . . . . . . . . .  C  ADDR  0531H
PIDTURN. . . . . . . . . . . . . . .  N  NUMB  000AH
PIDTURN2 . . . . . . . . . . . . . .  C  ADDR  0332H
POS. . . . . . . . . . . . . . . . .  C  ADDR  0B8CH
POSFT. . . . . . . . . . . . . . . .  C  ADDR  0B15H
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PWRDOWN. . . . . . . . . . . . . . .  C  ADDR  102CH
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RBLOCK . . . . . . . . . . . . . . .  C  ADDR  10D2H
RBLOCK1. . . . . . . . . . . . . . .  C  ADDR  10D4H
RBLOCK2. . . . . . . . . . . . . . .  C  ADDR  10DBH
RBYTE. . . . . . . . . . . . . . . .  C  ADDR  10E8H
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
RDERR. . . . . . . . . . . . . . . .  C  ADDR  14EFH
READ8BIT . . . . . . . . . . . . . .  C  ADDR  00E5H
READERR. . . . . . . . . . . . . . .  C  ADDR  0234H
RECEIVE. . . . . . . . . . . . . . .  C  ADDR  02D8H
RELEASE. . . . . . . . . . . . . . .  C  ADDR  13F0H
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
RES. . . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RES1 . . . . . . . . . . . . . . . .  C  ADDR  0002H
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RESULTLEN. . . . . . . . . . . . . .  N  NUMB  000FH
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
RS . . . . . . . . . . . . . . . . .  B  ADDR  00A1H
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RW . . . . . . . . . . . . . . . . .  B  ADDR  00A0H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SBLOCK . . . . . . . . . . . . . . .  C  ADDR  10C6H
SBLOCK1. . . . . . . . . . . . . . .  C  ADDR  10CBH
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SBYTE. . . . . . . . . . . . . . . .  C  ADDR  10E0H
SCK. . . . . . . . . . . . . . . . .  B  ADDR  0097H
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SELECT . . . . . . . . . . . . . . .  C  ADDR  03B6H
SEND221E1C . . . . . . . . . . . . .  C  ADDR  10A0H
SERINIT1 . . . . . . . . . . . . . .  C  ADDR  13B8H
SERINIT2 . . . . . . . . . . . . . .  C  ADDR  13BBH
SERINIT3 . . . . . . . . . . . . . .  C  ADDR  13BEH
SERINIT4 . . . . . . . . . . . . . .  C  ADDR  13C1H
SERINIT5 . . . . . . . . . . . . . .  C  ADDR  13C4H
SERWS. . . . . . . . . . . . . . . .  C  ADDR  13C7H
SETBEEP. . . . . . . . . . . . . . .  C  ADDR  047CH
SETBL. . . . . . . . . . . . . . . .  C  ADDR  0414H
SETMIL . . . . . . . . . . . . . . .  C  ADDR  1403H
SETMILOFF. . . . . . . . . . . . . .  C  ADDR  07CEH
SETPID . . . . . . . . . . . . . . .  C  ADDR  055CH
SETPID1. . . . . . . . . . . . . . .  C  ADDR  04ACH
SETPID2. . . . . . . . . . . . . . .  C  ADDR  04E9H
SETSLEEP . . . . . . . . . . . . . .  C  ADDR  05C2H
SETSOUND . . . . . . . . . . . . . .  C  ADDR  0430H
SETUP. . . . . . . . . . . . . . . .  C  ADDR  0386H
SETUP0 . . . . . . . . . . . . . . .  C  ADDR  02D6H
SETUPPID . . . . . . . . . . . . . .  C  ADDR  0496H
SHOWDTC. . . . . . . . . . . . . . .  C  ADDR  068BH
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SKIPNULL1. . . . . . . . . . . . . .  C  ADDR  0742H
SKIPNULL2. . . . . . . . . . . . . .  C  ADDR  0741H
SKIPPID. . . . . . . . . . . . . . .  C  ADDR  094EH
SLEEPCNT . . . . . . . . . . . . . .  N  NUMB  0018H
SLEEPOFF . . . . . . . . . . . . . .  C  ADDR  05B3H
SLEEPSTATUS. . . . . . . . . . . . .  C  ADDR  0597H
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SOUND_BEEP . . . . . . . . . . . . .  C  ADDR  1137H
SOUND_BEEP1. . . . . . . . . . . . .  C  ADDR  113DH
SOUND_TRIG . . . . . . . . . . . . .  C  ADDR  1148H
SOUND_TRIG0. . . . . . . . . . . . .  C  ADDR  1151H
SOUND_TRIG1. . . . . . . . . . . . .  C  ADDR  1155H
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDMAF . . . . . . . . . . . . . . .  C  ADDR  14E6H
SPDPID . . . . . . . . . . . . . . .  C  ADDR  1424H
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPLEXIT. . . . . . . . . . . . . . .  C  ADDR  07E8H
SPLFUNC. . . . . . . . . . . . . . .  C  ADDR  063DH
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TEMP1. . . . . . . . . . . . . . . .  N  NUMB  0011H
TEMP2. . . . . . . . . . . . . . . .  N  NUMB  0012H
TEMP3. . . . . . . . . . . . . . . .  N  NUMB  0013H
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TFT. . . . . . . . . . . . . . . . .  C  ADDR  14DEH
TFTPID . . . . . . . . . . . . . . .  C  ADDR  142AH
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TITLE1 . . . . . . . . . . . . . . .  C  ADDR  13CAH
TITLE2 . . . . . . . . . . . . . . .  C  ADDR  13CFH
TITLE3 . . . . . . . . . . . . . . .  C  ADDR  13D4H
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TOGGLE . . . . . . . . . . . . . . .  C  ADDR  1412H
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TRYCAN . . . . . . . . . . . . . . .  C  ADDR  01AEH
TRYCAN1. . . . . . . . . . . . . . .  C  ADDR  01C8H
TRYCAN2. . . . . . . . . . . . . . .  C  ADDR  01D4H
TRYCAN3. . . . . . . . . . . . . . .  C  ADDR  01DEH
TURNONCHK. . . . . . . . . . . . . .  C  ADDR  107FH
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
UDIV16 . . . . . . . . . . . . . . .  C  ADDR  11E5H
UGFIRM1. . . . . . . . . . . . . . .  C  ADDR  141BH
UGFIRM2. . . . . . . . . . . . . . .  C  ADDR  141EH
UGFIRM3. . . . . . . . . . . . . . .  C  ADDR  1421H
UMUL16 . . . . . . . . . . . . . . .  C  ADDR  121BH
UPGRADE. . . . . . . . . . . . . . .  C  ADDR  010AH
VEHINFO. . . . . . . . . . . . . . .  C  ADDR  13F7H
VEHSPD . . . . . . . . . . . . . . .  C  ADDR  083FH
VERSION. . . . . . . . . . . . . . .  C  ADDR  05DCH
WDRESET. . . . . . . . . . . . . . .  C  ADDR  132EH
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WDTRST . . . . . . . . . . . . . . .  N  NUMB  00A6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
WRADDL1. . . . . . . . . . . . . . .  N  NUMB  000BH
WRADDL2. . . . . . . . . . . . . . .  N  NUMB  000CH
WRCHAR . . . . . . . . . . . . . . .  C  ADDR  0FC9H
WRCMD. . . . . . . . . . . . . . . .  C  ADDR  0FBAH
WRERR. . . . . . . . . . . . . . . .  C  ADDR  14F2H
WRITEERR . . . . . . . . . . . . . .  C  ADDR  061BH
WRSCR. . . . . . . . . . . . . . . .  C  ADDR  0F8EH
WRSCR1 . . . . . . . . . . . . . . .  C  ADDR  0F90H
WRSCR2 . . . . . . . . . . . . . . .  C  ADDR  0F9EH
WRSCR3 . . . . . . . . . . . . . . .  C  ADDR  0FA3H
WRSTR. . . . . . . . . . . . . . . .  C  ADDR  0F5EH
WRSTR1 . . . . . . . . . . . . . . .  C  ADDR  0F60H
WRSTR2 . . . . . . . . . . . . . . .  C  ADDR  0F6EH
WRSTR3 . . . . . . . . . . . . . . .  C  ADDR  0F77H